/*
** NOTE: This file is generated by Gulp and should not be edited directly!
** Any changes made directly to this file will be overwritten next time its asset group is processed by Gulp.
*/

function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
window.openAIChatManager = function () {
  var renderer = new marked.Renderer();

  // Modify the link rendering to open in a new tab
  renderer.link = function (data) {
    return "<a href=\"".concat(data.href, "\" target=\"_blank\" rel=\"noopener noreferrer\">").concat(data.text, "</a>");
  };
  var defaultConfig = {
    messageTemplate: "\n            <div class=\"list-group\">\n                <div v-for=\"(message, index) in messages\" :key=\"index\" class=\"list-group-item\">\n                    <div class=\"d-flex align-items-center\">\n                        <div class=\"p-2\">\n                            <i :class=\"message.role === 'user' ? 'fa-solid fa-user fa-2xl text-primary' : 'fa fa-robot fa-2xl text-success'\"></i>\n                        </div>\n                        <div class=\"p-2 lh-base\">\n                            <h4 v-if=\"message.title\">{{ message.title }}</h4>\n                            <div v-html=\"message.htmlContent || message.content\"></div>\n                        </div>\n                    </div>\n                    <div class=\"d-flex justify-content-center message-buttons-container\" v-if=\"message.role !== 'indicator'\">\n                        <button class=\"ms-2 btn btn-sm btn-outline-secondary button-message-toolbox\" @click=\"copyResponse(message.content)\" title=\"Click here to copy response to clipboard.\">\n                            <i class=\"fa-solid fa-copy fa-lg\"></i>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        ",
    indicatorTemplate: "<div class=\"spinner-grow spinner-grow-sm\" role=\"status\"><span class=\"visually-hidden\">Loading...</span></div>"
  };
  var initialize = function initialize(instanceConfig) {
    var config = Object.assign({}, defaultConfig, instanceConfig);
    if (!config.signalRHubUrl) {
      console.error('The signalRHubUrl is required.');
      return;
    }
    if (!config.appElementSelector) {
      console.error('The appElementSelector is required.');
      return;
    }
    if (!config.chatContainerElementSelector) {
      console.error('The chatContainerElementSelector is required.');
      return;
    }
    if (!config.inputElementSelector) {
      console.error('The inputElementSelector is required.');
      return;
    }
    if (!config.sendButtonElementSelector) {
      console.error('The sendButtonElementSelector is required.');
      return;
    }
    var app = Vue.createApp({
      data: function data() {
        return {
          inputElement: null,
          buttonElement: null,
          chatContainer: null,
          placeholder: null,
          isSessionStarted: false,
          isPlaceholderVisible: true,
          chatWidgetStateName: null,
          chatWidgetStateSession: null,
          chatHistorySection: null,
          widgetIsInitialized: false,
          messages: [],
          prompt: '',
          messageBuffers: {} // Holds partial messages
        };
      },
      methods: {
        startConnection: function startConnection() {
          var _this = this;
          return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  _this.connection = new signalR.HubConnectionBuilder().withUrl(config.signalRHubUrl).withAutomaticReconnect().build();
                  _this.connection.on("StartMessageStream", function (messageId) {
                    _this.hideTypingIndicator();
                    if (!_this.messageBuffers[messageId]) {
                      var newMessage = {
                        role: "assistant",
                        content: "",
                        htmlContent: ""
                      };
                      _this.messages.push(newMessage);
                      _this.messageBuffers[messageId] = {
                        content: "",
                        messageIndex: _this.messages.length - 1,
                        references: {}
                      };
                    }
                  });
                  _this.connection.on("CompleteMessageStream", function (messageId) {
                    var buffer = _this.messageBuffers[messageId];
                    if (buffer.references && Object.keys(buffer.references).length) {
                      processedContent = buffer.content.trim() + '<br><br>';
                      for (var _i = 0, _Object$entries = Object.entries(buffer.references); _i < _Object$entries.length; _i++) {
                        var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
                          key = _Object$entries$_i[0],
                          value = _Object$entries$_i[1];
                        processedContent += "**".concat(value.index, "**. [").concat(value.text, "](").concat(value.link, ")<br>");
                        buffer.references[key] = value;
                      }
                      var message = _this.messages[buffer.messageIndex];
                      message.content = processedContent;
                      message.htmlContent = marked.parse(processedContent, {
                        renderer: renderer
                      });
                    }
                    delete _this.messageBuffers[messageId];
                  });
                  _this.connection.on("ReceiveMessageStream", function (chunk, messageId) {
                    var buffer = _this.messageBuffers[messageId];
                    if (chunk.content) {
                      var _processedContent = chunk.content;
                      if (chunk.references && _typeof(chunk.references) === "object" && Object.keys(chunk.references).length) {
                        for (var _i2 = 0, _Object$entries2 = Object.entries(chunk.references); _i2 < _Object$entries2.length; _i2++) {
                          var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i2], 2),
                            key = _Object$entries2$_i[0],
                            value = _Object$entries2$_i[1];
                          _processedContent = _processedContent.replaceAll(key, "<sup><strong>".concat(value.index, "</strong></sup>"));
                          buffer.references[key] = value;
                        }
                      }
                      // Append processed content to the buffer
                      // if we have multiple references, add a comma to ensure we don't concatenate numbers.
                      buffer.content += _processedContent.replaceAll('</strong></sup><sup>', '</strong></sup><sup>,</sup><sup>');
                    }

                    // Update the existing message
                    var message = _this.messages[buffer.messageIndex];
                    message.content = buffer.content;
                    message.htmlContent = marked.parse(buffer.content, {
                      renderer: renderer
                    });
                    _this.scrollToBottom();
                  });
                  _this.connection.on("LoadSession", function (data) {
                    var _data$messages;
                    _this.initializeSession(data.sessionId, true);
                    _this.messages = [];
                    ((_data$messages = data.messages) !== null && _data$messages !== void 0 ? _data$messages : []).forEach(function (msg) {
                      _this.addMessage(msg);
                    });
                  });
                  _this.connection.on("ReceiveError", function (error) {
                    console.log("SignalR Error: ", error);
                  });
                  _context.prev = 6;
                  _context.next = 9;
                  return _this.connection.start();
                case 9:
                  _context.next = 14;
                  break;
                case 11:
                  _context.prev = 11;
                  _context.t0 = _context["catch"](6);
                  console.error("SignalR Connection Error: ", _context.t0);
                case 14:
                case "end":
                  return _context.stop();
              }
            }, _callee, null, [[6, 11]]);
          }))();
        },
        addMessageInternal: function addMessageInternal(message) {
          var _this2 = this;
          this.fireEvent(new CustomEvent("addingOpenAIPromotMessage", {
            detail: {
              message: message
            }
          }));
          this.messages.push(message);
          this.$nextTick(function () {
            _this2.fireEvent(new CustomEvent("addedOpenAIPromotMessage", {
              detail: {
                message: message
              }
            }));
          });
        },
        addMessage: function addMessage(message) {
          var _this3 = this;
          if (message.content) {
            var _processedContent2 = message.content.trim();
            if (message.references && _typeof(message.references) === "object" && Object.keys(message.references).length) {
              for (var _i3 = 0, _Object$entries3 = Object.entries(message.references); _i3 < _Object$entries3.length; _i3++) {
                var _Object$entries3$_i = _slicedToArray(_Object$entries3[_i3], 2),
                  key = _Object$entries3$_i[0],
                  value = _Object$entries3$_i[1];
                _processedContent2 = _processedContent2.replaceAll(key, "<sup><strong>".concat(value.index, "</strong></sup>"));
              }

              // if we have multiple references, add a comma to ensure we don't concatenate numbers.
              _processedContent2 = _processedContent2.replaceAll('</strong></sup><sup>', '</strong></sup><sup>,</sup><sup>');
              _processedContent2 += '<br><br>';
              for (var _i4 = 0, _Object$entries4 = Object.entries(message.references); _i4 < _Object$entries4.length; _i4++) {
                var _Object$entries4$_i = _slicedToArray(_Object$entries4[_i4], 2),
                  _key = _Object$entries4$_i[0],
                  _value = _Object$entries4$_i[1];
                _processedContent2 += "**".concat(_value.index, "**. [").concat(_value.text, "](").concat(_value.link, ")<br>");
              }
            }
            message.content = _processedContent2;
            message.htmlContent = marked.parse(_processedContent2, {
              renderer: renderer
            });
          }
          this.addMessageInternal(message);
          this.hidePlaceholder();
          this.$nextTick(function () {
            _this3.scrollToBottom();
          });
        },
        addMessages: function addMessages(messages) {
          var _this4 = this;
          for (var i = 0; i < messages.length; i++) {
            this.addMessageInternal(messages[i]);
          }
          this.hidePlaceholder();
          this.$nextTick(function () {
            _this4.scrollToBottom();
          });
        },
        hidePlaceholder: function hidePlaceholder() {
          if (this.placeholder) {
            this.placeholder.classList.add('d-none');
          }
          this.isPlaceholderVisible = false;
        },
        showPlaceholder: function showPlaceholder() {
          if (this.placeholder) {
            this.placeholder.classList.remove('d-none');
          }
          this.isPlaceholderVisible = true;
        },
        fireEvent: function fireEvent(event) {
          document.dispatchEvent(event);
        },
        sendMessage: function sendMessage() {
          var trimmedPrompt = this.prompt.trim();
          if (!trimmedPrompt) {
            return;
          }
          this.addMessage({
            role: 'user',
            content: trimmedPrompt
          });
          this.connection.invoke("SendMessage", this.getProfileId(), trimmedPrompt, this.getSessionId(), null)["catch"](function (err) {
            return console.error(err);
          });
          this.showTypingIndicator();
          this.inputElement.value = '';
          this.prompt = '';
          this.buttonElement.setAttribute('disabled', true);
        },
        generatePrompt: function generatePrompt(element) {
          if (!element) {
            console.error('The element paramter is required.');
            return;
          }
          var profileId = element.getAttribute('data-profile-id');
          var sessionId = this.getSessionId();
          if (!profileId || !sessionId) {
            console.error('The given element is missing data-profile-id or the session has not yet started.');
            return;
          }
          this.showTypingIndicator();
          this.connection.invoke("SendMessage", profileId, null, sessionId, this.getProfileId())["catch"](function (err) {
            return console.error(err);
          });
        },
        createSessionUrl: function createSessionUrl(baseUrl, param, value) {
          var fullUrl = baseUrl.toLowerCase().startsWith('http') ? baseUrl : window.location.origin + baseUrl;
          var url = new URL(fullUrl);
          url.searchParams.set(param, value);
          return url.toString();
        },
        showTypingIndicator: function showTypingIndicator() {
          this.addMessage({
            role: 'indicator',
            htmlContent: config.indicatorTemplate
          });
        },
        hideTypingIndicator: function hideTypingIndicator() {
          this.messages = this.messages.filter(function (msg) {
            return msg.role !== 'indicator';
          });
        },
        scrollToBottom: function scrollToBottom() {
          var _this5 = this;
          setTimeout(function () {
            _this5.chatContainer.scrollTop = _this5.chatContainer.scrollHeight - _this5.chatContainer.clientHeight;
          }, 50);
        },
        handleUserInput: function handleUserInput(event) {
          this.prompt = event.target.value;
        },
        getProfileId: function getProfileId() {
          return this.inputElement.getAttribute('data-profile-id');
        },
        resetSession: function resetSession() {
          this.inputElement.setAttribute('data-session-id', '');
          this.isSessionStarted = false;
          if (this.widgetIsInitialized) {
            localStorage.removeItem(this.chatWidgetStateSession);
          }
          this.messages = [];
          this.showPlaceholder();
        },
        initializeApp: function initializeApp() {
          var _this6 = this;
          this.inputElement = document.querySelector(config.inputElementSelector);
          this.buttonElement = document.querySelector(config.sendButtonElementSelector);
          this.chatContainer = document.querySelector(config.chatContainerElementSelector);
          this.placeholder = document.querySelector(config.placeholderElementSelector);
          this.inputElement.addEventListener('keyup', function (event) {
            if (event.key === "Enter" && !event.shiftKey) {
              _this6.buttonElement.dispatchEvent(new Event('click'));
            }
          });
          this.inputElement.addEventListener('input', function (e) {
            _this6.handleUserInput(e);
            if (e.target.value.trim()) {
              _this6.buttonElement.removeAttribute('disabled');
            } else {
              _this6.buttonElement.setAttribute('disabled', true);
            }
          });
          this.buttonElement.addEventListener('click', function () {
            _this6.sendMessage();
          });
          var promptGenerators = document.getElementsByClassName('profile-generated-prompt');
          for (var i = 0; i < promptGenerators.length; i++) {
            promptGenerators[i].addEventListener('click', function (e) {
              e.preventDefault();
              _this6.generatePrompt(e.target);
            });
          }
          var chatSessions = document.getElementsByClassName('chat-session-history-item');
          for (var i = 0; i < chatSessions.length; i++) {
            chatSessions[i].addEventListener('click', function (e) {
              e.preventDefault();
              var sessionId = e.target.getAttribute('data-session-id');
              if (!sessionId) {
                console.error('an element with the class chat-session-history-item with no data-session-id set.');
                return;
              }
              _this6.loadSession(sessionId);
              _this6.showChatScreen();
            });
          }
          for (var _i5 = 0; _i5 < config.messages.length; _i5++) {
            this.addMessage(config.messages[_i5]);
          }
        },
        loadSession: function loadSession(sessionId) {
          this.connection.invoke("LoadSession", sessionId)["catch"](function (err) {
            return console.error(err);
          });
        },
        reloadCurrentSession: function reloadCurrentSession() {
          var sessionId = this.getSessionId();
          if (sessionId) {
            this.loadSession(sessionId);
          }
        },
        initializeSession: function initializeSession(sessionId, force) {
          if (this.isSessionStarted && !force) {
            return;
          }
          this.fireEvent(new CustomEvent("initializingSessionOpenAIChat", {
            detail: {
              sessionId: sessionId
            }
          }));
          this.inputElement.setAttribute('data-session-id', sessionId);
          this.isSessionStarted = true;
          if (this.widgetIsInitialized) {
            localStorage.setItem(this.chatWidgetStateSession, sessionId);
          }
        },
        initializeWidget: function initializeWidget() {
          var _this7 = this;
          if (!config.widget.showChatButton) {
            console.error('The widget showChatButton is required.');
            return;
          }
          if (!config.widget.chatWidgetContainer) {
            console.error('The widget chatWidgetContainer is required.');
            return;
          }
          if (!config.widget.chatWidgetStateName) {
            console.error('The widget chatWidgetStateName is required.');
            return;
          }
          var showChatButton = document.querySelector(config.widget.showChatButton);
          if (!showChatButton) {
            return;
          }
          var chatWidgetContainer = document.querySelector(config.widget.chatWidgetContainer);
          if (!chatWidgetContainer) {
            return;
          }
          if (config.widget.chatHistorySection) {
            this.chatHistorySection = document.querySelector(config.widget.chatHistorySection);
          }
          this.chatWidgetStateName = config.widget.chatWidgetStateName;
          this.chatWidgetStateSession = config.widget.chatWidgetStateName + 'Session';
          this.widgetIsInitialized = true;
          var isOpen = localStorage.getItem(this.chatWidgetStateName) === 'open';
          if (isOpen) {
            this.reloadCurrentSession();
            chatWidgetContainer.classList.remove('d-none');
          }
          showChatButton.addEventListener('click', function () {
            var isHidden = chatWidgetContainer.classList.contains('d-none');
            if (isHidden) {
              chatWidgetContainer.classList.remove('d-none');
              localStorage.setItem(_this7.chatWidgetStateName, 'open');
              _this7.reloadCurrentSession();
            } else {
              chatWidgetContainer.classList.add('d-none');
              localStorage.setItem(_this7.chatWidgetStateName, 'closed');
            }
          });
          if (config.widget.closeChatButton) {
            var closeChatButton = document.querySelector(config.widget.closeChatButton);
            if (closeChatButton) {
              closeChatButton.addEventListener('click', function () {
                chatWidgetContainer.classList.add('d-none');
                localStorage.setItem(_this7.chatWidgetStateName, 'closed');
              });
            }
          }
          if (config.widget.showHistoryButton && this.chatHistorySection) {
            var showHistoryButton = document.querySelector(config.widget.showHistoryButton);
            if (showHistoryButton) {
              showHistoryButton.addEventListener('click', function () {
                _this7.chatHistorySection.classList.toggle('show');
              });
            }
            if (config.widget.closeHistoryButton) {
              var closeHistoryButton = document.querySelector(config.widget.closeHistoryButton);
              if (closeHistoryButton) {
                closeHistoryButton.addEventListener('click', function () {
                  _this7.showChatScreen();
                });
              }
            }
          }
          if (config.widget.newChatButton) {
            var newChatButton = document.querySelector(config.widget.newChatButton);
            if (newChatButton) {
              newChatButton.addEventListener('click', function () {
                _this7.resetSession();
                _this7.showChatScreen();
              });
            }
          }
        },
        showChatScreen: function showChatScreen() {
          if (!this.chatHistorySection) {
            return;
          }
          this.chatHistorySection.classList.remove('show');
        },
        getSessionId: function getSessionId() {
          var sessionId = this.inputElement.getAttribute('data-session-id');
          if (!sessionId && this.widgetIsInitialized) {
            sessionId = localStorage.getItem(this.chatWidgetStateSession);
          }
          return sessionId;
        },
        copyResponse: function copyResponse(message) {
          navigator.clipboard.writeText(message);
        }
      },
      mounted: function mounted() {
        this.initializeApp();
        this.startConnection();
        if (config.widget) {
          this.initializeWidget();
        }
      },
      template: config.messageTemplate
    }).mount(config.appElementSelector);
    return app;
  };
  return {
    initialize: initialize
  };
}();