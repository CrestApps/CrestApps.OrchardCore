@using CrestApps.OrchardCore.AI.Workflows.ViewModels
@using CrestApps.OrchardCore.AI.Models
@using OrchardCore
@using CrestApps.OrchardCore.AI.Core

@model AICompletionWithConfigTaskViewModel

<div class="mb-3" asp-validation-class-for="ProviderName">
    <label asp-for="ProviderName" class="form-label">@T["Provider"]</label>
    <select asp-for="ProviderName" class="form-select" asp-items="Model.Providers">
        <option value="">@T["Select a provider"]</option>
    </select>
    <span asp-validation-for="ProviderName"></span>
    <span class="hint">@T["The AI provider to use."]</span>
</div>

<div class="mb-3" asp-validation-class-for="ConnectionName">
    <label asp-for="ConnectionName" class="form-label">@T["Conntection"]</label>
    <select asp-for="ConnectionName" class="form-select" asp-items="Model.ConnectionNames">
        <option value="">@T["Default connection"]</option>
    </select>
    <span asp-validation-for="ConnectionName"></span>
</div>

<div class="mb-3" asp-validation-class-for="DeploymentName">
    <label asp-for="DeploymentName" class="form-label">@T["Deployment"]</label>
    <select asp-for="DeploymentName" class="form-select" asp-items="Model.DeploymentNames">
        <option value="">@T["Default deployment"]</option>
    </select>
    <span asp-validation-for="DeploymentName"></span>
</div>

<div class="mb-3" asp-validation-class-for="ResultPropertyName">
    <label asp-for="ResultPropertyName" class="form-label">@T["Result property name"]</label>
    <input asp-for="ResultPropertyName" class="form-control" autofocus="autofocus" />
    <span asp-validation-for="ResultPropertyName"></span>
    <span class="hint">@T["Specifies where the result will be stored. Prefix the Result Property Name with AI- to avoid conflicts. This allows access to the AI Chat Response in subsequent workflow tasks."]</span>
</div>

<div class="mb-3" asp-validation-class-for="PromptTemplate">
    <label asp-for="PromptTemplate" class="form-label">@T["Prompt template"]</label>
    <input type="text" asp-for="PromptTemplate" class="form-control code" />
    <span asp-validation-for="PromptTemplate"></span>
    <span class="hint">@T["This template is used to generate the prompt for the AI model. You can structure the prompt using Liquid syntax."]</span>
</div>

<div class="@Orchard.GetWrapperClasses()">
    <label asp-for="SystemMessage" class="@Orchard.GetLabelClasses()">@T["System instructions"]</label>
    <div class="@Orchard.GetEndClasses()">
        <div class="hint mb-1">@T["The system instruction sets the AI's behavior and response style, guiding how it interacts in a conversation."]</div>
        <textarea asp-for="SystemMessage" class="form-control content-preview-text" rows="5"></textarea>
    </div>
</div>

<div class="@Orchard.GetWrapperClasses()">
    <label asp-for="MaxTokens" class="@Orchard.GetLabelClasses()">@T["Max response"]</label>
    <div class="@Orchard.GetEndClasses()">
        <input type="number" class="form-control" asp-for="MaxTokens" step="4" min="4">
        <span class="hint">@T["Set a limit on the number of tokens per model response. The supported number of tokens are shared between the prompt (including system message, examples, message history, and user query) and the model's response. One token is roughly 4 characters for typical English text."]</span>
    </div>
</div>

<div class="@Orchard.GetWrapperClasses()">
    <label asp-for="Temperature" class="@Orchard.GetLabelClasses()">@T["Temperature"]</label>
    <div class="@Orchard.GetEndClasses()">
        <input type="number" class="form-control" asp-for="Temperature" step="0.01" min="0" max="1">
        <span class="hint">@T["Controls randomness. Lowering the temperature means that the model will produce more repetitive and deterministic responses. Increasing the temperature will result in more unexpected or creative responses. Try adjusting temperature or Top P but not both."]</span>
    </div>
</div>

<div class="@Orchard.GetWrapperClasses()">
    <label asp-for="TopP" class="@Orchard.GetLabelClasses()">@T["Top P"]</label>
    <div class="@Orchard.GetEndClasses()">
        <input type="number" class="form-control" asp-for="TopP" step="0.01" min="0" max="1">
        <span class="hint">@T["Similar to temperature, this controls randomness but uses a different method. Lowering Top P will narrow the model's token selection to likelier tokens. Increasing Top P will let the model choose from tokens with both high and low likelihood. Try adjusting temperature or Top P but not both."]</span>
    </div>
</div>

<div class="@Orchard.GetWrapperClasses()">
    <label asp-for="FrequencyPenalty" class="@Orchard.GetLabelClasses()">@T["Frequency penalty"]</label>
    <div class="@Orchard.GetEndClasses()">
        <input type="number" class="form-control" asp-for="FrequencyPenalty" step="0.01" min="0" max="1">
        <span class="hint">@T["Reduce the chance of repeating a token proportionally based on how often it has appeared in the text so far. This decreases the likelihood of repeating the exact same text in a response."]</span>
    </div>
</div>

<div class="@Orchard.GetWrapperClasses()">
    <label asp-for="PresencePenalty" class="@Orchard.GetLabelClasses()">@T["Presence penalty"]</label>
    <div class="@Orchard.GetEndClasses()">
        <input type="number" class="form-control" asp-for="PresencePenalty" step="0.01" min="0" max="1">
        <span class="hint">@T["Reduce the chance of repeating any token that has appeared in the text at all so far. This increases the likelihood of introducing new topics in a response."]</span>
    </div>
</div>

<style asp-name="codemirror"></style>
<style asp-name="easymde"></style>
<style at="Head">
    .cm-editor-readonly {
        background-color: var(--bs-secondary-bg, '#e9ecef') !important;
    }
</style>

<style asp-name="codemirror"></style>
<script asp-name="codemirror" at="Foot"></script>
<script asp-name="codemirror-mode-javascript" at="Foot"></script>
<script asp-name="codemirror-addon-display-autorefresh" at="Foot"></script>
<script asp-name="codemirror-addon-mode-simple" at="Foot"></script>
<script asp-name="codemirror-addon-mode-multiplex" at="Foot"></script>
<script asp-name="codemirror-mode-xml" at="Foot"></script>
<script asp-src="~/OrchardCore.Liquid/codemirror/liquid.js" at="Foot"></script>

<script at="Foot" depends-on="codemirror">
    document.addEventListener('DOMContentLoaded', function () {
        const initializeLiquidEditor = (textArea) => {

            if (!textArea) {
                return;
            }

            var editor = CodeMirror.fromTextArea(textArea, {
                autoRefresh: true,
                lineNumbers: true,
                styleActiveLine: true,
                matchBrackets: true,
                mode: { name: "liquid" },
            });

            editor.on('change', function (cmEditor) {
                cmEditor.save();
                document.dispatchEvent(new Event('contentpreview:render'));
            });
        }

        initializeLiquidEditor(document.getElementById('@Html.IdFor(x => x.PromptTemplate)'));
    });

    document.addEventListener('DOMContentLoaded', function () {
        const providerElement = document.getElementById('@Html.IdFor(m => m.ProviderName)');
        const connectionElement = document.getElementById('@Html.IdFor(m => m.ConnectionName)');
        const deploymentElement = document.getElementById('@Html.IdFor(m => m.DeploymentName)');

        if (!providerElement || !connectionElement || !deploymentElement) {
            console.warn('AICompletionWithConfigTask: missing provider/connection/deployment elements');
            return;
        }

        const connectionContainer = connectionElement.closest('.mb-3');
        const deploymentContainer = deploymentElement.closest('.mb-3');

        // Hide by default
        if (connectionContainer) connectionContainer.style.display = 'none';
        if (deploymentContainer) deploymentContainer.style.display = 'none';

        const providerNameInitial = '@(Model.ProviderName ?? "")';
        const connectionInitial = '@(Model.ConnectionName ?? "")';
        const deploymentInitial = '@(Model.DeploymentName ?? "")';

        async function fetchConnections(providerName) {
            // Remove existing connection options that have a value (keep the default empty option)
            [...connectionElement.options].forEach(option => {
                if (option.value) option.remove();
            });

            // Hide deployment since connections are changing
            if (deploymentContainer) deploymentContainer.style.display = 'none';
            // Also clear deployment options (keep default)
            [...deploymentElement.options].forEach(option => {
                if (option.value) option.remove();
            });

            if (!providerName) {
                connectionElement.value = '';
                return;
            }

            var url = '@(Url.RouteUrl(AIConstants.RouteNames.GetConnectionsByProviderRouteName))';
            try {
                const response = await fetch(`${url}?providerName=${encodeURIComponent(providerName)}`);
                if (!response.ok) throw new Error('Failed to fetch connections');

                const connections = await response.json();

                if (connections && connections.length) {
                    connections.forEach(connection => {
                        let option = document.createElement('option');
                        option.value = connection.id;
                        option.textContent = connection.name;
                        connectionElement.appendChild(option);
                    });

                    // Show connection select
                    if (connectionContainer) connectionContainer.style.display = '';

                    // If there was an initial value set by server, select it and fetch deployments
                    if (connectionInitial) {
                        connectionElement.value = connectionInitial;
                        await fetchDeployments(providerName, connectionInitial);
                    }
                } else {
                    // No connections, hide connection
                    if (connectionContainer) connectionContainer.style.display = 'none';
                }
            } catch (error) {
                console.error('Error fetching connections:', error);
            }
        }

        async function fetchDeployments(providerName, connection) {
            // Remove existing deployment options that have a value (keep default)
            [...deploymentElement.options].forEach(option => {
                if (option.value) option.remove();
            });

            if (!connection) {
                deploymentElement.value = '';
                if (deploymentContainer) deploymentContainer.style.display = 'none';
                return;
            }

            var url = '@(Url.RouteUrl(AIConstants.RouteNames.GetDeploymentsByConnectionRouteName))';
            try {
                const response = await fetch(`${url}?providerName=${encodeURIComponent(providerName)}&connection=${encodeURIComponent(connection)}`);
                if (!response.ok) throw new Error('Failed to fetch deployments');

                const deployments = await response.json();

                if (deployments && deployments.length) {
                    deployments.forEach(deployment => {
                        let option = document.createElement('option');
                        option.value = deployment.id;
                        option.textContent = deployment.name;
                        deploymentElement.appendChild(option);
                    });

                    // Show deployment container if there are options beyond the default
                    if (deploymentContainer && deploymentElement.options.length > 1) deploymentContainer.style.display = '';

                    // If there was an initial value set by server, select it
                    if (deploymentInitial) {
                        deploymentElement.value = deploymentInitial;
                    }
                } else {
                    if (deploymentContainer) deploymentContainer.style.display = 'none';
                }
            } catch (error) {
                console.error('Error fetching deployments:', error);
            }
        }

        // Wire events
        providerElement.addEventListener('change', async (e) => {
            const provider = e.target.value;
            // When provider changes, clear selected connection/deployment
            connectionElement.value = '';
            deploymentElement.value = '';

            await fetchConnections(provider);
        });

        connectionElement.addEventListener('change', async (e) => {
            const selectedConnection = e.target.value;
            const provider = providerElement.value || providerNameInitial;

            // Remove only options that have a value
            [...deploymentElement.options].forEach(option => {
                if (option.value) option.remove();
            });

            if (!selectedConnection) {
                deploymentElement.value = '';
                if (deploymentContainer) deploymentContainer.style.display = 'none';
                return;
            }

            await fetchDeployments(provider, selectedConnection);

            // Fallback: if deployments were added show container
            if (deploymentContainer && deploymentElement.options.length > 1) {
                deploymentContainer.style.display = '';
            }
        });

        // On load, if provider exists, fetch connections
        if (providerNameInitial) {
            providerElement.value = providerNameInitial;
            fetchConnections(providerNameInitial);
        }
    });
</script>
