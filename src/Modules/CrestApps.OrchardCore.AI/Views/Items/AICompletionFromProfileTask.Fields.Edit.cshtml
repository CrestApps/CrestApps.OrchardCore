@using CrestApps.OrchardCore.AI.Workflows.ViewModels
@using CrestApps.OrchardCore.AI.Models

@model AICompletionFromProfileTaskViewModel

<div class="mb-3" asp-validation-class-for="ProfileId">
    <label asp-for="ProfileId" class="form-label">@T["Profiles"]</label>
    <select asp-for="ProfileId" class="form-select" asp-items="Model.Profiles">
        <option value="">@T["Select a profile"]</option>
    </select>
    <span asp-validation-for="ProfileId"></span>
    <span class="hint">@T["The profile to use when generating the message."]</span>
</div>

<div class="mb-3" asp-validation-class-for="ResultPropertyName">
    <label asp-for="ResultPropertyName" class="form-label">@T["Result property name"]</label>
    <input asp-for="ResultPropertyName" class="form-control" autofocus="autofocus" />
    <span asp-validation-for="ResultPropertyName"></span>
    <span class="hint">@T["Specifies where the result will be stored. Prefix the Result Property Name with AI- to avoid conflicts. This allows access to the AI Chat Response in subsequent workflow tasks."]</span>
</div>

<div class="mb-3" asp-validation-class-for="PromptTemplate">
    <label asp-for="PromptTemplate" class="form-label">@T["Prompt template"]</label>
    <input type="text" asp-for="PromptTemplate" class="form-control code" />
    <span asp-validation-for="PromptTemplate"></span>
    <span class="hint">@T["This template is used to generate the prompt for the AI model. You can structure the prompt using Liquid syntax and seamlessly combine existing variables with placeholders like <code>{0}</code>.", "profile"]</span>
</div>

<style asp-name="codemirror"></style>
<script asp-name="codemirror" at="Foot"></script>
<script asp-name="codemirror-mode-javascript" at="Foot"></script>
<script asp-name="codemirror-addon-display-autorefresh" at="Foot"></script>
<script asp-name="codemirror-addon-mode-simple" at="Foot"></script>
<script asp-name="codemirror-addon-mode-multiplex" at="Foot"></script>
<script asp-name="codemirror-mode-xml" at="Foot"></script>
<script asp-src="~/OrchardCore.Liquid/codemirror/liquid.js" at="Foot"></script>

<script at="Foot" depends-on="codemirror">
    document.addEventListener('DOMContentLoaded', function () {
        const initializeLiquidEditor = (textArea) => {

            if (!textArea) {
                return;
            }

            var editor = CodeMirror.fromTextArea(textArea, {
                autoRefresh: true,
                lineNumbers: true,
                styleActiveLine: true,
                matchBrackets: true,
                mode: { name: "liquid" },
            });

            editor.on('change', function (cmEditor) {
                cmEditor.save();
                document.dispatchEvent(new Event('contentpreview:render'));
            });
        }

        initializeLiquidEditor(document.getElementById('@Html.IdFor(x => x.PromptTemplate)'));
    });
</script>
