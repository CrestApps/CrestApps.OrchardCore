@using CrestApps.OrchardCore.AI.ViewModels
@using OrchardCore

@model EditProfileMainFieldsViewModel

<div class="@Orchard.GetWrapperClasses()">
    <label asp-for="DisplayText" class="@Orchard.GetLabelClasses()">@T["Title"]</label>
    <div class="@Orchard.GetEndClasses()">
        <input asp-for="DisplayText" class="form-control" />
        <span asp-validation-for="DisplayText" class="text-danger"></span>
        <span class="hint">@T["Profile title for the user interface."]</span>
    </div>
</div>

<div class="@Orchard.GetWrapperClasses()">
    <label asp-for="Name" class="@Orchard.GetLabelClasses()">@T["Technical name"]</label>
    <div class="@Orchard.GetEndClasses()">
        <input asp-for="Name" class="form-control" disabled="@(!Model.IsNew)" />
        <span asp-validation-for="Name" class="text-danger"></span>
        @if (Model.IsNew)
        {
            <span class="hint">@T["Profile name. This name cannot be changed later."]</span>
        }
        else
        {
            <span class="hint">@T["Profile name."]</span>
        }
    </div>
</div>

@if (Model.IsNew)
{
    <script>
        (function () {
            document.addEventListener('DOMContentLoaded', function () {
                var displayEl = document.getElementById('@Html.IdFor(x => x.DisplayText)');
                var nameEl = document.getElementById('@Html.IdFor(x => x.Name)');
                if (!displayEl || !nameEl) return;

                // Track whether the user has entered a non-empty value in the Name field.
                var userEdited = nameEl.value.trim() !== '';

                // Resume auto-generation only when the Name field is empty again.
                nameEl.addEventListener('input', function () {
                    userEdited = nameEl.value.trim() !== '';
                });

                function toTitleCaseNoSpaces(value) {
                    return value
                        .trim()
                        // split on whitespace or common separators or any non-alphanumeric
                        .split(/[^A-Za-z0-9]+/)
                        .filter(function (w) { return w.length > 0; })
                        .map(function (w) { return w.charAt(0).toUpperCase() + w.slice(1).toLowerCase(); })
                        .join('');
                }

                // Generate on keyup as requested
                displayEl.addEventListener('keyup', function () {
                    if (userEdited) return;
                    var generated = toTitleCaseNoSpaces(displayEl.value || '');
                    nameEl.value = generated;
                });
            });
        })();
    </script>
}
