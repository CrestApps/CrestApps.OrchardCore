@using CrestApps.OrchardCore.AI.Core
@using CrestApps.OrchardCore.AI.ViewModels
@using OrchardCore

@model EditChatProfileDeploymentViewModel

<div class="@Orchard.GetWrapperClasses()">
    <label asp-for="DeploymentId" class="@Orchard.GetLabelClasses()">@T["Deployment"]</label>
    <div class="@Orchard.GetEndClasses()">
        <select asp-for="DeploymentId" class="form-select">
            <option value="">@T["Default deployment"]</option>
            @if (Model.Deployments != null)
            {
                foreach (var deployment in Model.Deployments)
                {
                    <option value="@deployment.Value">@deployment.Text</option>
                }
            }
        </select>
        <span asp-validation-for="DeploymentId" class="text-danger"></span>
        <span class="hint">@T["The deployment to use for this profile."]</span>
    </div>
</div>

<script at="Foot">
    document.addEventListener('DOMContentLoaded', function () {

        const connectionNameElement = document.getElementById('@Html.IdFor(x => x.ConnectionName)');
        const deploymentsElement = document.getElementById('@Html.IdFor(x => x.DeploymentId)');
        const providerName = '@(Model.ProviderName)';

        connectionNameElement.addEventListener('change', async (e) => {
            const selectedConnection = e.target.value;

            // Remove only options that have a value
            [...deploymentsElement.options].forEach(option => {
                if (option.value) {
                    option.remove();
                }
            });

            if (!selectedConnection) {

                deploymentsElement.value = '';

                return;
            }

            var url = '@(Url.RouteUrl(AIConstants.RouteNames.GetDeploymentsByConnectionRouteName))';
            try {
                const response = await fetch(`${url}?providerName=${encodeURIComponent(providerName)}&connection=${encodeURIComponent(selectedConnection)}`);

                if (!response.ok) {
                    throw new Error('Failed to fetch deployments');
                }

                const deployments = await response.json();

                // Populate new options
                deployments.forEach(deployment => {
                    let option = document.createElement('option');
                    option.value = deployment.id;
                    option.textContent = deployment.name;
                    deploymentsElement.appendChild(option);
                });
            } catch (error) {
                console.error('Error fetching deployments:', error);
            }
        });
    });
</script>
