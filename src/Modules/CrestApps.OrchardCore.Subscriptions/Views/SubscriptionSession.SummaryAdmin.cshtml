@using CrestApps.OrchardCore.Subscriptions
@{
    SubscriptionSession subscription = Model.SubscriptionSession;

    if (subscription == null)
    {
        return;
    }
}

<div class="list-group-item notification-container-item p-3">
    <div class="row">
        <div class="col-lg col-12 title d-flex">

            <div class="selectors-container d-flex">
                @if (Model.Selectors != null)
                {
                    <div class="selectors cursor-pointer">
                        @await DisplayAsync(Model.Selectors)
                    </div>
                }
                <div class="form-check">
                    <input type="checkbox" class="form-check-input" value="@subscription.SessionId" name="itemIds" id="itemIds-@subscription.SessionId">
                    <label class="form-check-label" for="itemIds-@subscription.SessionId"></label>
                </div>
            </div>

            <div class="summary d-flex flex-column flex-md-row">
                <div class="contentitem me-2">
                    @subscription
                </div>
                @if (Model.Header != null)
                {
                    <div class="header me-1">
                        @await DisplayAsync(Model.Header)
                    </div>
                }
                @if (Model.Tags != null)
                {
                    <div class="tags me-1">
                        @await DisplayAsync(Model.Tags)
                    </div>
                }
                @if (Model.Meta != null)
                {
                    <div class="metadata me-1">
                        @await DisplayAsync(Model.Meta)
                    </div>
                }
            </div>
        </div>
        <div class="col-lg-auto col-12 d-flex justify-content-end">
            <div class="actions text-start">
                @if (Model.Actions != null)
                {
                    @await DisplayAsync(Model.Actions)
                }

                @if (Model.ActionsMenu != null && Model.ActionsMenu.HasItems)
                {
                    <div class="btn-group" title="@T["Actions"]">
                        <button type="button" class="btn btn-sm btn-secondary dropdown-toggle actions" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            <span>@T["Actions"]</span>
                        </button>
                        <div class="actions-menu dropdown-menu dropdown-menu-end">
                            @await DisplayAsync(Model.ActionsMenu)
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@if (Model.Content != null)
{
    <div class="row">
        <div class="col primary">
            @await DisplayAsync(Model.Content)
        </div>
    </div>
}

<style at="Head">
    .notification-container .notification-is-unread {
        color: #664d03 !important;
        background-color: #fff3cd !important;
    }
</style>

<script asp-name="bootstrap-select" depends-on="bootstrap" at="Foot"></script>
