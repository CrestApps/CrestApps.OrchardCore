@using CrestApps.OrchardCore.Stripe.Core
@using CrestApps.OrchardCore.Subscriptions.ViewModels

@model StripeViewModel

@if (!Model.IsLive && !string.IsNullOrEmpty(Model.PublishableKey))
{
    <div class="alert alert-info" role="alert">
        @T["Stripe is in test mode."]
    </div>
}
else if (string.IsNullOrEmpty(Model.PublishableKey))
{
    <div class="alert alert-warning" role="alert">
        @T["Stripe has not yet been configured. Please visit the configuration section and configure it."]
    </div>
}

<div id="card-errors" role="alert" class="alert alert-danger d-none"></div>

<div id="card-element"></div>

<script asp-name="stripe-subscription-payment" depends-on="stripe">
    const stripe = Stripe('@Model.PublishableKey');
    const elements = stripe.elements();
    const card = elements.create('card');
    card.mount('#card-element');
    const errorElement = document.getElementById('card-errors');
    const showError = (message) => {
        errorElement.textContent = message;
        errorElement.classList.remove('d-none');
    };
    const clearError = () => {
        errorElement.textContent = '';
        errorElement.classList.add('d-none');
    };
    card.on('change', function (event) {
        clearError();

        if (event.error) {
            showError(event.error.message);
        }
    });

    const form = document.getElementById('subscription-form');

    form.addEventListener('submit', function (event) {
        event.preventDefault();

        stripe.createPaymentMethod({
            type: 'card',
            card: card,
            billing_details: {
                // Include any additional billing details
            },
        }).then(function (result) {
            if (result.error) {
                errorElement.textContent = result.error.message;
            } else {
                // Send payment method ID to the server
                fetch('@StripeConstants.RouteName.CreateSetupIntentEndpoint', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        paymentMethodId: result.paymentMethod.id,
                        Metadata: {
                            sessionId: '@Model.SessionId'
                        }
                    }),
                }).then((response) => {
                    return response.json();
                }).then((data) => {
                    if (data.error) {
                        showError(data.error);
                    } else {
                        stripe.confirmCardSetup(data.client_secret)
                            .then((result) => {
                                if (result.error) {
                                    showError(result.error.message);
                                } else {
                                    var paymentMethodId = result.setupIntent.payment_method;
                                    // Send payment method ID to the server to create payment intent and subscription
                                    fetch('@StripeConstants.RouteName.CreatePaymentIntentEndpoint', {
                                        method: 'POST',
                                        headers: {
                                            'Content-Type': 'application/json',
                                        },
                                        body: JSON.stringify({
                                            customerId: data.customer_id,
                                            paymentMethodId: paymentMethodId,
                                            Metadata: {
                                                sessionId: '@Model.SessionId'
                                            }
                                        }),
                                    }).then((response) => {
                                        return response.json();
                                    }).then((paymentData) => {
                                        if (paymentData.error) {
                                            showError(paymentData.error);
                                        } else {
                                            stripe.confirmCardPayment(paymentData.client_secret)
                                                .then((result) => {
                                                    if (result.error) {
                                                        showError(result.error.message);
                                                    } else {
                                                        // Handle successful payment
                                                        fetch('@StripeConstants.RouteName.CreateSubscriptionEndpoint', {
                                                            method: 'POST',
                                                            headers: {
                                                                'Content-Type': 'application/json',
                                                            },
                                                            body: JSON.stringify({
                                                                customerId: data.customer_id,
                                                                paymentMethodId: paymentMethodId,
                                                                Metadata: {
                                                                    sessionId: '@Model.SessionId'
                                                                }
                                                            }),
                                                        }).then((response) => {
                                                            return response.json();
                                                        }).then((subscriptionData) => {
                                                            if (subscriptionData.error) {
                                                                showError(subscriptionData.error);
                                                            } else {
                                                                if (subscriptionData.requires_action) {
                                                                    stripe.confirmCardPayment(subscriptionData.client_secret)
                                                                        .then(function (result) {
                                                                            if (result.error) {
                                                                                showError(result.error.message);
                                                                            } else {
                                                                                const submitEvent = new Event("submit", { bubbles: true, cancelable: true });
                                                                                form.dispatchEvent(submitEvent);
                                                                            }
                                                                        });
                                                                } else {
                                                                    const submitEvent = new Event("submit", { bubbles: true, cancelable: true });
                                                                    form.dispatchEvent(submitEvent);
                                                                }
                                                            }
                                                        });
                                                    }
                                                });
                                        }
                                    });
                                }
                            });
                    }
                });
            }
        });
    });
</script>