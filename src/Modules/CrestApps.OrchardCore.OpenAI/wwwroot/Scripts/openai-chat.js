/*
** NOTE: This file is generated by Gulp and should not be edited directly!
** Any changes made directly to this file will be overwritten next time its asset group is processed by Gulp.
*/

var openAIChatManager = function () {
  var defaultConfig = {
    messageTemplate: "\n            <div class=\"list-group\">\n                <div v-for=\"(message, index) in messages\" :key=\"index\" class=\"list-group-item\">\n                    <div class=\"d-flex\">\n                        <div class=\"p-2\">\n                            <i :class=\"message.role === 'user' ? 'fa-solid fa-user fa-2xl text-primary' : 'fa fa-robot fa-2xl text-success'\"></i>\n                        </div>\n                        <div class=\"p-2 flex-grow-1\">\n                            <h4 v-if=\"message.title\">{{ message.title }}</h4>\n                            <div v-html=\"message.contentHTML || message.content\"></div>\n                        </div>\n                    </div>\n                    <div class=\"d-flex justify-content-center message-buttons-container\">\n                        <button class=\"ms-2 btn btn-sm btn-outline-secondary\" @click=\"copyResponse(message.content)\" title=\"Click here to copy response to clipboard.\">\n                            <i class=\"fa-solid fa-copy fa-lg\"></i>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        ",
    indicatorTemplate: "<div class=\"spinner-grow spinner-grow-sm\" role=\"status\"><span class=\"visually-hidden\">Loading...</span></div>"
  };
  var initialize = function initialize(instanceConfig) {
    var config = Object.assign({}, defaultConfig, instanceConfig);
    if (!config.chatUrl) {
      console.error('The chatUrl is required.');
      return;
    }
    if (!config.appElementSelector) {
      console.error('The appElementSelector is required.');
      return;
    }
    if (!config.chatContainerElementSelector) {
      console.error('The chatContainerElementSelector is required.');
      return;
    }
    if (!config.inputElementSelector) {
      console.error('The inputElementSelector is required.');
      return;
    }
    if (!config.sendButtonElementSelector) {
      console.error('The sendButtonElementSelector is required.');
      return;
    }
    Vue.createApp({
      data: function data() {
        return {
          inputElement: null,
          buttonElement: null,
          chatContainer: null,
          placeholder: null,
          isSessionStarted: false,
          isPlaceholderVisible: true,
          messages: [],
          prompt: ''
        };
      },
      methods: {
        addMessage: function addMessage(message) {
          var _this = this;
          this.messages.push(message);
          if (message.role != 'indicator') {
            this.$emit('addingOpenAIPromotMessage', message);
          }
          if (this.isPlaceholderVisible) {
            if (this.placeholder) {
              this.placeholder.classList.add('d-none');
            }
            this.isPlaceholderVisible = false;
          }
          this.$nextTick(function () {
            _this.$emit('addedOpenAIPromotMessage', message);
            _this.scrollToBottom();
          });
        },
        handleUserInput: function handleUserInput(event) {
          this.prompt = event.target.value;
        },
        getProfileId: function getProfileId() {
          return this.inputElement.getAttribute('data-profile-id');
        },
        initializeElements: function initializeElements() {
          var _this2 = this;
          this.inputElement = document.querySelector(config.inputElementSelector);
          this.buttonElement = document.querySelector(config.sendButtonElementSelector);
          this.chatContainer = document.querySelector(config.chatContainerElementSelector);
          this.placeholder = document.querySelector(config.placeholderElementSelector);
          this.inputElement.addEventListener('keyup', function (event) {
            if (event.key === "Enter") {
              _this2.buttonElement.dispatchEvent(new Event('click'));
            }
          });
          this.inputElement.addEventListener('input', function (e) {
            if (e.target.value.trim()) {
              _this2.buttonElement.removeAttribute('disabled');
            } else {
              _this2.buttonElement.setAttribute('disabled', true);
            }
            _this2.handleUserInput(e);
          });
          this.buttonElement.addEventListener('click', function () {
            _this2.sendMessage();
          });
        },
        getSessionId: function getSessionId() {
          return this.inputElement.getAttribute('data-session-id');
        },
        copyResponse: function copyResponse(message) {
          navigator.clipboard.writeText(message);
        },
        sendMessage: function sendMessage() {
          var trimmedPrompt = this.prompt.trim();
          if (!trimmedPrompt) {
            return;
          }
          this.addMessage({
            role: 'user',
            content: trimmedPrompt
          });
          this.showTypingIndicator();
          this.inputElement.value = '';
          this.prompt = '';
          this.buttonElement.setAttribute('disabled', true);
          this.completeChat(this.getProfileId(), trimmedPrompt, this.getSessionId());
        },
        generatePrompt: function generatePrompt(element) {
          if (!element) {
            console.error('The element paramter is required.');
            return;
          }
          var profileId = element.getAttribute('data-profile-id');
          var sessionId = this.getSessionId();
          if (!profileId || !sessionId) {
            console.error('The given element is missing data-profile-id or the session has not yet started.');
            return;
          }
          this.completeChat(profileId, null, sessionId);
        },
        completeChat: function completeChat(profileId, prompt, sessionId) {
          var _this3 = this;
          var sessionProfileId = this.getProfileId();
          fetch(config.chatUrl, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              profileId: profileId,
              sessionId: sessionId,
              prompt: prompt,
              sessionProfileId: sessionProfileId == profileId ? null : sessionProfileId
            })
          }).then(function (response) {
            return response.json();
          }).then(function (result) {
            _this3.setSession(result.sessionId);
            _this3.addMessage(result.message);
            _this3.hideTypingIndicator();
            _this3.scrollToBottom();
          })["catch"](function (error) {
            console.error('Failed to send the message.', error);
            _this3.hideTypingIndicator();
          });
        },
        setSession: function setSession(sessionId) {
          if (this.isSessionStarted) {
            return;
          }
          this.inputElement.setAttribute('data-session-id', sessionId);
          this.isSessionStarted = true;
        },
        showTypingIndicator: function showTypingIndicator() {
          this.addMessage({
            role: 'indicator',
            contentHTML: config.indicatorTemplate
          });
        },
        hideTypingIndicator: function hideTypingIndicator() {
          this.messages = this.messages.filter(function (msg) {
            return msg.role != 'indicator';
          });
        },
        scrollToBottom: function scrollToBottom() {
          this.chatContainer.scrollTop = this.chatContainer.scrollHeight - this.chatContainer.clientHeight;
        }
      },
      mounted: function mounted() {
        var _this4 = this;
        // First initialize elements.
        this.initializeElements();
        var promptGenerators = document.getElementsByClassName('profile-generated-prompt');
        for (var i = 0; i < promptGenerators.length; i++) {
          promptGenerators[i].addEventListener('click', function (e) {
            e.preventDefault();
            _this4.generatePrompt(e.target);
          });
        }
        for (var _i = 0; _i < config.messages.length; _i++) {
          this.addMessage(config.messages[_i]);
        }
      },
      template: config.messageTemplate
    }).mount(config.appElementSelector);
  };
  return {
    initialize: initialize
  };
}();