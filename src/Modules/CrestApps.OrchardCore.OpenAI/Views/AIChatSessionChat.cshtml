@using CrestApps.OrchardCore.OpenAI.Core
@using CrestApps.OrchardCore.OpenAI.Core.Models
@using CrestApps.OrchardCore.OpenAI.ViewModels.Sessions
@using System.Text.Json
@using OrchardCore.DisplayManagement
@using OrchardCore.DisplayManagement.ModelBinding
@using OrchardCore.Entities

@model AIChatSessionViewModel

@inject IUpdateModelAccessor UpdateModelAccessor
@inject IDisplayManager<AIChatSessionMessage> DisplayManager
@{
    var part = Model.Session.As<AIChatSessionPart>();
    var baseId = Html.IdForModel();
    var buttonHtmlId = $"{baseId}_SendButton";
    var userPromptHtmlId = $"{baseId}_UserPrompt";
    var placeholderHtmlId = $"{baseId}_SessionPlaceHolder";
    var chatContainerHtmlId = $"{baseId}_ChatContainer";
    var messagesContainerHtmlId = $"{baseId}_MessagesContainer";
}

<div class="mb-3 mx-3 p-3 overflow-y-auto h-100 rounded-2 border bg-theme" id="@chatContainerHtmlId">

    <div class="list-group list-group-flush w-100">

        @if (part.Prompts.Count == 0)
        {
            <div id="@placeholderHtmlId" class="text-center p-3">
                <h1 class="mb-3">
                    @(string.IsNullOrEmpty(Model.Session.WelcomeMessage) ? T["What do you want to know?"] : Model.Session.WelcomeMessage)
                </h1>
            </div>
        }

        <div id="@(baseId)_ChatApp"></div>

    </div>

</div>

<div class="bg-theme border-top">
    <div class="container py-3">

        <div class="input-group input-group-lg">
            <input class="form-control" type="text" id="@userPromptHtmlId" data-session-id="@(Model.IsNew ? string.Empty : Model.Session.SessionId)" data-profile-id="@(Model.Session.ProfileId)" placeholder="@T["Message AI Chat"] ..." aria-label="@T["Message AI Chat"]" aria-describedby="@buttonHtmlId">
            <button class="btn btn-outline-secondary" type="button" id="@buttonHtmlId" disabled>
                <i class="fa-solid fa-arrow-up"></i>
            </button>
            <div class="btn-group ps-3">
                <button type="button" class="btn btn-secondary dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fa-solid fa-screwdriver-wrench"></i>
                </button>
                <ul class="dropdown-menu">
                    @* Here we may want to create shapes for functions. *@
                    <li>
                        @*
                <button type="button" class="dropdown-item" title="@T["Generate conversation summary"]" id="GenerateConversationSummary">
                    <i class="fa-solid fa-feather"></i> @T["Summarize Conversation"]
                </button>
                *@
                    </li>
                </ul>
            </div>
        </div>

    </div>
</div>

<script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>
<script at="Foot">
    Vue.createApp({
        data() {
            return {
                messages: []
            };
        },
        methods: {
            addMessage(message) {
                this.messages.push(message);
            },
        },
        template: `
            <div class="list-group" id="@messagesContainerHtmlId">
                <div v-for="(message, index) in messages" :key="index" class="list-group-item">
                    <div class="d-flex">
                        <div class="p-2">
                            <i :class="message.role === 'user' ? 'fa-solid fa-user fa-2xl text-primary' : 'fa fa-robot fa-2xl text-success'"></i>
                        </div>
                        <div class="p-2 flex-grow-1" v-html="message.promptHTML || message.prompt"></div>
                    </div>
                </div>
            </div>
        `,
        mounted() {
            const sendButton = document.getElementById('@buttonHtmlId');
            const userPrompt = document.getElementById('@userPromptHtmlId');
            const placeholder = document.getElementById('@placeholderHtmlId');
            const chatContainer = document.getElementById('@chatContainerHtmlId');
            const messagesContainer = document.getElementById('@messagesContainerHtmlId');

            const setScrollHeight = () => {
                chatContainer.scrollTop = (chatContainer.scrollHeight - chatContainer.clientHeight);
            }

            chatContainer.addEventListener('scroll', () => {
                console.log('Container is being scrolled!');
                // You can also check for the scroll position, for example:
                console.log('Current scroll position:', chatContainer.scrollTop);
                console.log('Total scrollable height:', chatContainer.scrollHeight);
                console.log('Container height:', chatContainer.clientHeight);
            });

            const createUserMessage = () => {
                let userMessage = {
                    role: 'user',
                    prompt: userPrompt.value,
                };

                userPrompt.value = '';
                sendButton.setAttribute('disabled', true);

                return userMessage;
            }

            const isTyping = () => {

                if (messagesContainer.lastChild.classList) {
                    return messagesContainer.lastChild.classList.contains('list-group-item-in-progress');
                }

                return false;
            }

            const showTyping = () => {
                var el = document.createElement('div');
                el.classList.add('list-group-item');
                el.classList.add('list-group-item-in-progress');
                let wrapper = document.createElement('div');
                wrapper.classList.add('d-flex');

                let icon = document.createElement('div');
                icon.classList.add('p-2');
                icon.innerHTML = '<i class="fa-solid fa-robot fa-2xl text-secondary"></i>';
                wrapper.appendChild(icon);

                let content = document.createElement('div');
                content.classList.add('p-2');
                content.classList.add('flex-grow-1')
                content.innerHTML = '<div class="spinner-grow spinner-grow-sm" role="status"><span class="visually-hidden">...</span></div>';
                wrapper.appendChild(content);

                el.appendChild(wrapper);

                messagesContainer.appendChild(el);
            };

            const hideTyping = () => {
                if (!isTyping()) {
                    return;
                }

                messagesContainer.lastChild.remove();
            };
            userPrompt.addEventListener('keyup', event => {
                if (event.key === "Enter") {
                    sendButton.dispatchEvent(new Event('click'));
                }
            });

            userPrompt.addEventListener('input', e => {
                if (e.target.value.length) {
                    sendButton.removeAttribute('disabled')
                } else {
                    sendButton.setAttribute('disabled', true);
                }
            });

            sendButton.addEventListener('click', () => {
                if (!userPrompt.value) {
                    return;
                }

                hideTyping();
                placeholder.classList.add('d-none');
                let userMessage = createUserMessage();
                this.addMessage(userMessage);
                showTyping();
                setScrollHeight();

                fetch('@(Url.RouteUrl(OpenAIConstants.RouteNames.ChatRouteName))', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        sessionId: userPrompt.getAttribute('data-session-id'),
                        profileId: userPrompt.getAttribute('data-profile-id'),
                        prompt: userMessage.prompt,
                    }),
                })
                .then(response => response.json())
                .then(result => {
                    userPrompt.setAttribute('data-session-id', result.sessionId);

                    hideTyping();
                    this.addMessage(result.message);

                    setScrollHeight();
                })
                .catch(error => {
                    console.error('Failed to send the message.', error);
                });
            });
        }
    }).mount('#@(baseId)_ChatApp');

</script>
