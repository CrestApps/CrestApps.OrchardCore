@using CrestApps.OrchardCore.OpenAI
@using CrestApps.OrchardCore.OpenAI.Core
@using CrestApps.OrchardCore.OpenAI.Core.Models
@using CrestApps.OrchardCore.OpenAI.Models
@using CrestApps.OrchardCore.OpenAI.ViewModels.Sessions
@using OrchardCore.DisplayManagement
@using OrchardCore.DisplayManagement.ModelBinding
@using OrchardCore.Entities
@using System.Text.Json

@model AIChatSessionViewModel

@inject IUpdateModelAccessor UpdateModelAccessor
@inject IDisplayManager<AIChatSessionMessage> DisplayManager
@inject IAIChatProfileStore ChatProfileStore
@{
    var part = Model.Session.As<AIChatSessionPart>();
    var baseId = Html.IdForModel();
    var buttonHtmlId = $"{baseId}_SendButton";
    var userPromptHtmlId = $"{baseId}_UserPrompt";
    var placeholderHtmlId = $"{baseId}_SessionPlaceHolder";
    var chatContainerHtmlId = $"{baseId}_ChatContainer";
    var messagesContainerHtmlId = $"{baseId}_MessagesContainer";

    var promptGeneratedProfiles = (await ChatProfileStore.GetAllAsync()).Where(x => x.Type == AIChatProfileType.GeneratedPrompt);
}

<div class="mb-3 mx-3 p-3 overflow-y-auto h-100 rounded-2 border bg-theme" id="@chatContainerHtmlId">
    <div class="list-group list-group-flush w-100">
        @if (part.Prompts.Count == 0)
        {
            <div id="@placeholderHtmlId" class="text-center p-3">
                <h1 class="mb-3">
                    @(string.IsNullOrEmpty(Model.Session.WelcomeMessage) ? T["What do you want to know?"] : Model.Session.WelcomeMessage)
                </h1>
            </div>
        }

        <div id="@(baseId)_ChatApp"></div>
    </div>
</div>

<div class="bg-theme border-top">
    <div class="container py-3">
        <div class="input-group input-group-lg">
            <input class="form-control" type="text" id="@userPromptHtmlId" data-session-id="@(Model.IsNew ? string.Empty : Model.Session.SessionId)" data-profile-id="@(Model.Session.ProfileId)" placeholder="@T["Message AI Chat"] ..." aria-label="@T["Message AI Chat"]" aria-describedby="@buttonHtmlId">
            <button class="btn btn-outline-secondary" type="button" id="@buttonHtmlId" disabled="">
                <i class="fa-solid fa-arrow-up"></i>
            </button>
            @if (promptGeneratedProfiles.Any())
            {
                <div class="btn-group ps-3">
                    <button type="button" class="btn btn-secondary dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                        <i class="fa-solid fa-screwdriver-wrench"></i>
                    </button>
                    <ul class="dropdown-menu">
                        @foreach (var profile in promptGeneratedProfiles)
                        {
                            <li>
                                <button type="button" class="dropdown-item profile-generated-prompt" data-session-id="@(Model.IsNew ? string.Empty : Model.Session.SessionId)" data-profile-id="@(Model.Session.ProfileId)">@profile.Name</button>
                            </li>
                        }
                    </ul>
                </div>
            }
        </div>
    </div>
</div>

<script asp-name="OpenAIChatApp" at="Foot"></script>
<script at="Foot" depends-on="OpenAIChatApp">
    openAIChatManager.initialize({
        chatUrl: '@(Url.RouteUrl(OpenAIConstants.RouteNames.ChatCompletionRouteName))',
        appElementSelector: '#@(baseId)_ChatApp',
        chatContainerElementSelector: '#@chatContainerHtmlId',
        inputElementSelector: '#@userPromptHtmlId',
        sendButtonElementSelector: '#@buttonHtmlId',
        placeholderElementSelector: '#@placeholderHtmlId',
        messages: @Html.Raw(JsonSerializer.Serialize(part.Prompts ?? [], JOptions.CamelCase))
    });
</script>
