@using CrestApps.OrchardCore.OpenAI.Workflows.ViewModels

@model ChatUtilityCompletionTaskViewModel

<div class="mb-3" asp-validation-class-for="ProfileId">
    <label asp-for="ProfileId" class="form-label">@T["Profile"]</label>
    <select asp-for="ProfileId" class="form-select" asp-items="Model.Profiles"></select>
    <span asp-validation-for="ProfileId"></span>
    <span class="hint">@T["The utility profile to use when generating the message."]</span>
</div>

<div class="mb-3" asp-validation-class-for="PromptTemplate">
    <label asp-for="PromptTemplate" class="form-label">@T["Prompt template"]</label>
    <input type="text" asp-for="PromptTemplate" class="form-control code" />
    <span asp-validation-for="PromptTemplate"></span>
    <span class="hint">@T["This template is used to generate the prompt for the OpenAI model. You can structure the prompt using Liquid syntax and seamlessly combine existing variables with placeholders like <code>{0}</code>.", "profile"]</span>
</div>

<div class="mb-3" asp-validation-class-for="ResultPropertyName">
    <label asp-for="ResultPropertyName" class="form-label">@T["Result property name"]</label>
    <input asp-for="ResultPropertyName" class="form-control" autofocus="autofocus" />
    <span asp-validation-for="ResultPropertyName"></span>
    <span class="hint">@T["Specifies the property where the result will be stored. If the property does not already exist, it will be created. This allows access to the OpenAI Chat Response in any of the following workflow tasks."]</span>
</div>

<div class="mb-3" asp-validation-class-for="RespondWithHtml">
    <div class="form-check">
        <input type="checkbox" class="form-check-input" asp-for="RespondWithHtml">
        <label class="form-check-label" asp-for="RespondWithHtml">@T["Respond with HTML format"]</label>
        <span class="hint dashed">@T["When enabled, the model would return HTML formatted respond instead of plain text."]</span>
    </div>
</div>
