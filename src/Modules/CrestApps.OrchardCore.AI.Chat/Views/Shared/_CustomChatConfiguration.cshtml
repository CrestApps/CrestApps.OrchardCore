@using CrestApps.OrchardCore.AI.Chat.ViewModels
@using CrestApps.OrchardCore.AI.Core.Models
@using OrchardCore

@model CustomChatInstanceViewModel

<div class="mb-3">
    <label asp-for="Title" class="form-label">@T["Instance Title"]</label>
    <input asp-for="Title" class="form-control" placeholder="@T["My Custom Chat"]" />
    <span asp-validation-for="Title" class="text-danger"></span>
    <div class="form-text">@T["Give your chat instance a descriptive name."]</div>
</div>

<input type="hidden" asp-for="ProviderName" value="@Model.ProviderName" />

@if (Model.ConnectionNames?.Any() == true)
{
    <div class="mb-3">
        <label asp-for="ConnectionName" class="form-label">@T["Connection"]</label>
        <select asp-for="ConnectionName" asp-items="Model.ConnectionNames" class="form-select" id="connectionSelect">
            <option value="">@T["Default connection"]</option>
        </select>
        <span asp-validation-for="ConnectionName" class="text-danger"></span>
        <div class="form-text">@T["Select the AI provider connection to use."]</div>
    </div>
}
else
{
    <input type="hidden" asp-for="ConnectionName" />
}

<div class="mb-3">
    <label asp-for="DeploymentId" class="form-label">@T["Deployment"]</label>
    <select asp-for="DeploymentId" asp-items="Model.Deployments" class="form-select" id="deploymentSelect">
        <option value="">@T["Default deployment"]</option>
    </select>
    <span asp-validation-for="DeploymentId" class="text-danger"></span>
    <div class="form-text">@T["Select the AI model deployment to use."]</div>
</div>

<div class="mb-3">
    <label asp-for="SystemMessage" class="form-label">@T["System Instructions"]</label>
    <textarea asp-for="SystemMessage" class="form-control" rows="5" placeholder="@T["You are a helpful AI assistant..."]"></textarea>
    <span asp-validation-for="SystemMessage" class="text-danger"></span>
    <div class="form-text">@T["Define how the AI should behave and respond."]</div>
</div>

<div class="row">
    <div class="col-md-6">
        <div class="mb-3">
            <label asp-for="MaxTokens" class="form-label">@T["Max Response Tokens"]</label>
            <input type="number" asp-for="MaxTokens" class="form-control" step="4" min="4" />
            <span asp-validation-for="MaxTokens" class="text-danger"></span>
            <div class="form-text">@T["Maximum number of tokens in the response."]</div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="mb-3">
            <label asp-for="PastMessagesCount" class="form-label">@T["Past Messages Included"]</label>
            <input type="number" asp-for="PastMessagesCount" class="form-control" step="1" min="2" max="20" />
            <span asp-validation-for="PastMessagesCount" class="text-danger"></span>
            <div class="form-text">@T["Number of previous messages to include for context."]</div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-md-6">
        <div class="mb-3">
            <label asp-for="Temperature" class="form-label">@T["Temperature"]</label>
            <input type="number" asp-for="Temperature" class="form-control" step="0.01" min="0" max="1" />
            <span asp-validation-for="Temperature" class="text-danger"></span>
            <div class="form-text">@T["Controls response randomness (0 = focused, 1 = creative)."]</div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="mb-3">
            <label asp-for="TopP" class="form-label">@T["Top P"]</label>
            <input type="number" asp-for="TopP" class="form-control" step="0.01" min="0" max="1" />
            <span asp-validation-for="TopP" class="text-danger"></span>
            <div class="form-text">@T["Alternative to temperature for controlling randomness."]</div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-md-6">
        <div class="mb-3">
            <label asp-for="FrequencyPenalty" class="form-label">@T["Frequency Penalty"]</label>
            <input type="number" asp-for="FrequencyPenalty" class="form-control" step="0.01" min="0" max="1" />
            <span asp-validation-for="FrequencyPenalty" class="text-danger"></span>
            <div class="form-text">@T["Reduces repetition of frequent tokens."]</div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="mb-3">
            <label asp-for="PresencePenalty" class="form-label">@T["Presence Penalty"]</label>
            <input type="number" asp-for="PresencePenalty" class="form-control" step="0.01" min="0" max="1" />
            <span asp-validation-for="PresencePenalty" class="text-danger"></span>
            <div class="form-text">@T["Encourages introducing new topics."]</div>
        </div>
    </div>
</div>

@if (Model.AllowCaching)
{
    <div class="mb-3">
        <div class="form-check">
            <input type="checkbox" asp-for="UseCaching" class="form-check-input" />
            <label class="form-check-label" asp-for="UseCaching">@T["Use Caching"]</label>
            <div class="form-text">@T["Enable semantic caching to reduce costs and improve performance."]</div>
        </div>
    </div>
}

@if (Model.Tools != null && Model.Tools.Count > 0)
{
    <h4 class="border-bottom pb-2 mt-4">@T["Available Tools"]</h4>
    <p class="text-muted">@T["Select which tools the AI can use during conversations."]</p>

    foreach (var toolGroup in Model.Tools)
    {
        var groupKey = toolGroup.Key;
        var groupId = groupKey.Replace(" ", "-");

        <div class="mb-3">
            <h5>@groupKey</h5>

            <div class="form-check">
                <input class="form-check-input group-toggle"
                       type="checkbox"
                       id="selectAll_@groupId"
                       data-group="@groupId" />
                <label class="form-check-label" for="selectAll_@groupId">
                    @T["Select All in {0}", groupKey]
                </label>
            </div>

            <div class="ms-3">
                @for (var i = 0; i < toolGroup.Value.Length; i++)
                {
                    <div class="form-check">
                        <input type="hidden" asp-for="@Model.Tools[groupKey][i].ItemId" />
                        <input asp-for="@Model.Tools[groupKey][i].IsSelected"
                               type="checkbox"
                               class="form-check-input group-checkbox"
                               data-group="@groupId"
                               id="tool_@(groupId)_@i" />

                        <label class="form-check-label" asp-for="@Model.Tools[groupKey][i].IsSelected">
                            @toolGroup.Value[i].DisplayText
                        </label>
                        @if (!string.IsNullOrEmpty(toolGroup.Value[i].Description))
                        {
                            <div class="form-text">@toolGroup.Value[i].Description</div>
                        }
                    </div>
                }
            </div>
        </div>
    }

    <script at="Foot">
        document.addEventListener('DOMContentLoaded', () => {
            document.querySelectorAll('.group-toggle').forEach(toggle => {
                toggle.addEventListener('change', function () {
                    const groupName = this.dataset.group;
                    const checkboxes = document.querySelectorAll(`.group-checkbox[data-group="${groupName}"]`);
                    checkboxes.forEach(cb => cb.checked = this.checked);
                });
            });

            document.querySelectorAll('.group-checkbox').forEach(checkbox => {
                checkbox.addEventListener('change', function () {
                    const groupName = this.dataset.group;
                    const all = document.querySelectorAll(`.group-checkbox[data-group="${groupName}"]`);
                    const allChecked = [...all].every(cb => cb.checked);
                    const toggle = document.querySelector(`.group-toggle[data-group="${groupName}"]`);
                    toggle.checked = allChecked;
                });
            });
        });
    </script>
}

<script at="Foot">
    document.addEventListener('DOMContentLoaded', function () {
        const connectionSelect = document.getElementById('connectionSelect');
        const deploymentSelect = document.getElementById('deploymentSelect');
        const providerName = '@Model.ProviderName';

        if (connectionSelect) {
            connectionSelect.addEventListener('change', async function () {
                const selectedConnection = this.value;

                // Remove all deployment options except the default
                [...deploymentSelect.options].forEach(option => {
                    if (option.value) {
                        option.remove();
                    }
                });

                if (!selectedConnection) {
                    deploymentSelect.value = '';
                    return;
                }

                try {
                    const response = await fetch(`@Url.Action("GetDeployments", "CustomChat")?providerName=${encodeURIComponent(providerName)}&connection=${encodeURIComponent(selectedConnection)}`);

                    if (!response.ok) {
                        throw new Error('Failed to fetch deployments');
                    }

                    const deployments = await response.json();

                    deployments.forEach(deployment => {
                        let option = document.createElement('option');
                        option.value = deployment.id;
                        option.textContent = deployment.name;
                        deploymentSelect.appendChild(option);
                    });
                } catch (error) {
                    console.error('Error fetching deployments:', error);
                }
            });
        }
    });
</script>
