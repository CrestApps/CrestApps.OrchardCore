/*
** NOTE: This file is generated by Gulp and should not be edited directly!
** Any changes made directly to this file will be overwritten next time its asset group is processed by Gulp.
*/

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }
function _construct(t, e, r) { if (_isNativeReflectConstruct()) return Reflect.construct.apply(null, arguments); var o = [null]; o.push.apply(o, e); var p = new (t.bind.apply(t, o))(); return r && _setPrototypeOf(p, r.prototype), p; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _isNativeFunction(fn) { try { return Function.toString.call(fn).indexOf("[native code]") !== -1; } catch (e) { return typeof fn === "function"; } }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
(function webpackUniversalModuleDefinition(root, factory) {
  if ((typeof exports === "undefined" ? "undefined" : _typeof(exports)) === 'object' && (typeof module === "undefined" ? "undefined" : _typeof(module)) === 'object') module.exports = factory();else if (typeof define === 'function' && define.amd) define([], factory);else if ((typeof exports === "undefined" ? "undefined" : _typeof(exports)) === 'object') exports["signalR"] = factory();else root["signalR"] = factory();
})(self, function () {
  return /******/function () {
    // webpackBootstrap
    /******/
    "use strict";

    /******/ // The require scope
    /******/
    var __webpack_require__ = {};
    /******/
    /************************************************************************/
    /******/ /* webpack/runtime/define property getters */
    /******/
    (function () {
      /******/ // define getter functions for harmony exports
      /******/__webpack_require__.d = function (exports, definition) {
        /******/for (var key in definition) {
          /******/if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
            /******/Object.defineProperty(exports, key, {
              enumerable: true,
              get: definition[key]
            });
            /******/
          }
          /******/
        }
        /******/
      };
      /******/
    })();
    /******/
    /******/ /* webpack/runtime/global */
    /******/
    (function () {
      /******/__webpack_require__.g = function () {
        /******/if ((typeof globalThis === "undefined" ? "undefined" : _typeof(globalThis)) === 'object') return globalThis;
        /******/
        try {
          /******/return this || new Function('return this')();
          /******/
        } catch (e) {
          /******/if ((typeof window === "undefined" ? "undefined" : _typeof(window)) === 'object') return window;
          /******/
        }
        /******/
      }();
      /******/
    })();
    /******/
    /******/ /* webpack/runtime/hasOwnProperty shorthand */
    /******/
    (function () {
      /******/__webpack_require__.o = function (obj, prop) {
        return Object.prototype.hasOwnProperty.call(obj, prop);
      };
      /******/
    })();
    /******/
    /******/ /* webpack/runtime/make namespace object */
    /******/
    (function () {
      /******/ // define __esModule on exports
      /******/__webpack_require__.r = function (exports) {
        /******/if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {
          /******/Object.defineProperty(exports, Symbol.toStringTag, {
            value: 'Module'
          });
          /******/
        }
        /******/
        Object.defineProperty(exports, '__esModule', {
          value: true
        });
        /******/
      };
      /******/
    })();
    /******/
    /************************************************************************/
    var __webpack_exports__ = {};
    // ESM COMPAT FLAG
    __webpack_require__.r(__webpack_exports__);

    // EXPORTS
    __webpack_require__.d(__webpack_exports__, {
      "AbortError": function AbortError() {
        return /* reexport */_AbortError;
      },
      "DefaultHttpClient": function DefaultHttpClient() {
        return /* reexport */_DefaultHttpClient;
      },
      "HttpClient": function HttpClient() {
        return /* reexport */_HttpClient;
      },
      "HttpError": function HttpError() {
        return /* reexport */_HttpError;
      },
      "HttpResponse": function HttpResponse() {
        return /* reexport */_HttpResponse;
      },
      "HttpTransportType": function HttpTransportType() {
        return /* reexport */_HttpTransportType;
      },
      "HubConnection": function HubConnection() {
        return /* reexport */_HubConnection;
      },
      "HubConnectionBuilder": function HubConnectionBuilder() {
        return /* reexport */_HubConnectionBuilder;
      },
      "HubConnectionState": function HubConnectionState() {
        return /* reexport */_HubConnectionState;
      },
      "JsonHubProtocol": function JsonHubProtocol() {
        return /* reexport */_JsonHubProtocol;
      },
      "LogLevel": function LogLevel() {
        return /* reexport */_LogLevel;
      },
      "MessageType": function MessageType() {
        return /* reexport */_MessageType;
      },
      "NullLogger": function NullLogger() {
        return /* reexport */_NullLogger;
      },
      "Subject": function Subject() {
        return /* reexport */_Subject;
      },
      "TimeoutError": function TimeoutError() {
        return /* reexport */_TimeoutError;
      },
      "TransferFormat": function TransferFormat() {
        return /* reexport */_TransferFormat;
      },
      "VERSION": function VERSION() {
        return /* reexport */_VERSION;
      }
    });
    ; // CONCATENATED MODULE: ./src/Errors.ts
    // Licensed to the .NET Foundation under one or more agreements.
    // The .NET Foundation licenses this file to you under the MIT license.
    /** Error thrown when an HTTP request fails. */
    var _HttpError = /*#__PURE__*/function (_Error) {
      /** Constructs a new instance of {@link @microsoft/signalr.HttpError}.
       *
       * @param {string} errorMessage A descriptive error message.
       * @param {number} statusCode The HTTP status code represented by this error.
       */
      function _HttpError(errorMessage, statusCode) {
        var _this;
        _classCallCheck(this, _HttpError);
        var trueProto = (this instanceof _HttpError ? this.constructor : void 0).prototype;
        _this = _callSuper(this, _HttpError, ["".concat(errorMessage, ": Status code '").concat(statusCode, "'")]);
        _this.statusCode = statusCode;
        // Workaround issue in Typescript compiler
        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200
        _this.__proto__ = trueProto;
        return _this;
      }
      _inherits(_HttpError, _Error);
      return _createClass(_HttpError);
    }( /*#__PURE__*/_wrapNativeSuper(Error));
    /** Error thrown when a timeout elapses. */
    var _TimeoutError = /*#__PURE__*/function (_Error2) {
      /** Constructs a new instance of {@link @microsoft/signalr.TimeoutError}.
       *
       * @param {string} errorMessage A descriptive error message.
       */
      function _TimeoutError() {
        var _this2;
        var errorMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "A timeout occurred.";
        _classCallCheck(this, _TimeoutError);
        var trueProto = (this instanceof _TimeoutError ? this.constructor : void 0).prototype;
        _this2 = _callSuper(this, _TimeoutError, [errorMessage]);
        // Workaround issue in Typescript compiler
        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200
        _this2.__proto__ = trueProto;
        return _this2;
      }
      _inherits(_TimeoutError, _Error2);
      return _createClass(_TimeoutError);
    }( /*#__PURE__*/_wrapNativeSuper(Error));
    /** Error thrown when an action is aborted. */
    var _AbortError = /*#__PURE__*/function (_Error3) {
      /** Constructs a new instance of {@link AbortError}.
       *
       * @param {string} errorMessage A descriptive error message.
       */
      function _AbortError() {
        var _this3;
        var errorMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "An abort occurred.";
        _classCallCheck(this, _AbortError);
        var trueProto = (this instanceof _AbortError ? this.constructor : void 0).prototype;
        _this3 = _callSuper(this, _AbortError, [errorMessage]);
        // Workaround issue in Typescript compiler
        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200
        _this3.__proto__ = trueProto;
        return _this3;
      }
      _inherits(_AbortError, _Error3);
      return _createClass(_AbortError);
    }( /*#__PURE__*/_wrapNativeSuper(Error));
    /** Error thrown when the selected transport is unsupported by the browser. */
    /** @private */
    var UnsupportedTransportError = /*#__PURE__*/function (_Error4) {
      /** Constructs a new instance of {@link @microsoft/signalr.UnsupportedTransportError}.
       *
       * @param {string} message A descriptive error message.
       * @param {HttpTransportType} transport The {@link @microsoft/signalr.HttpTransportType} this error occurred on.
       */
      function UnsupportedTransportError(message, transport) {
        var _this4;
        _classCallCheck(this, UnsupportedTransportError);
        var trueProto = (this instanceof UnsupportedTransportError ? this.constructor : void 0).prototype;
        _this4 = _callSuper(this, UnsupportedTransportError, [message]);
        _this4.transport = transport;
        _this4.errorType = 'UnsupportedTransportError';
        // Workaround issue in Typescript compiler
        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200
        _this4.__proto__ = trueProto;
        return _this4;
      }
      _inherits(UnsupportedTransportError, _Error4);
      return _createClass(UnsupportedTransportError);
    }( /*#__PURE__*/_wrapNativeSuper(Error));
    /** Error thrown when the selected transport is disabled by the browser. */
    /** @private */
    var DisabledTransportError = /*#__PURE__*/function (_Error5) {
      /** Constructs a new instance of {@link @microsoft/signalr.DisabledTransportError}.
       *
       * @param {string} message A descriptive error message.
       * @param {HttpTransportType} transport The {@link @microsoft/signalr.HttpTransportType} this error occurred on.
       */
      function DisabledTransportError(message, transport) {
        var _this5;
        _classCallCheck(this, DisabledTransportError);
        var trueProto = (this instanceof DisabledTransportError ? this.constructor : void 0).prototype;
        _this5 = _callSuper(this, DisabledTransportError, [message]);
        _this5.transport = transport;
        _this5.errorType = 'DisabledTransportError';
        // Workaround issue in Typescript compiler
        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200
        _this5.__proto__ = trueProto;
        return _this5;
      }
      _inherits(DisabledTransportError, _Error5);
      return _createClass(DisabledTransportError);
    }( /*#__PURE__*/_wrapNativeSuper(Error));
    /** Error thrown when the selected transport cannot be started. */
    /** @private */
    var FailedToStartTransportError = /*#__PURE__*/function (_Error6) {
      /** Constructs a new instance of {@link @microsoft/signalr.FailedToStartTransportError}.
       *
       * @param {string} message A descriptive error message.
       * @param {HttpTransportType} transport The {@link @microsoft/signalr.HttpTransportType} this error occurred on.
       */
      function FailedToStartTransportError(message, transport) {
        var _this6;
        _classCallCheck(this, FailedToStartTransportError);
        var trueProto = (this instanceof FailedToStartTransportError ? this.constructor : void 0).prototype;
        _this6 = _callSuper(this, FailedToStartTransportError, [message]);
        _this6.transport = transport;
        _this6.errorType = 'FailedToStartTransportError';
        // Workaround issue in Typescript compiler
        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200
        _this6.__proto__ = trueProto;
        return _this6;
      }
      _inherits(FailedToStartTransportError, _Error6);
      return _createClass(FailedToStartTransportError);
    }( /*#__PURE__*/_wrapNativeSuper(Error));
    /** Error thrown when the negotiation with the server failed to complete. */
    /** @private */
    var FailedToNegotiateWithServerError = /*#__PURE__*/function (_Error7) {
      /** Constructs a new instance of {@link @microsoft/signalr.FailedToNegotiateWithServerError}.
       *
       * @param {string} message A descriptive error message.
       */
      function FailedToNegotiateWithServerError(message) {
        var _this7;
        _classCallCheck(this, FailedToNegotiateWithServerError);
        var trueProto = (this instanceof FailedToNegotiateWithServerError ? this.constructor : void 0).prototype;
        _this7 = _callSuper(this, FailedToNegotiateWithServerError, [message]);
        _this7.errorType = 'FailedToNegotiateWithServerError';
        // Workaround issue in Typescript compiler
        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200
        _this7.__proto__ = trueProto;
        return _this7;
      }
      _inherits(FailedToNegotiateWithServerError, _Error7);
      return _createClass(FailedToNegotiateWithServerError);
    }( /*#__PURE__*/_wrapNativeSuper(Error));
    /** Error thrown when multiple errors have occurred. */
    /** @private */
    var AggregateErrors = /*#__PURE__*/function (_Error8) {
      /** Constructs a new instance of {@link @microsoft/signalr.AggregateErrors}.
       *
       * @param {string} message A descriptive error message.
       * @param {Error[]} innerErrors The collection of errors this error is aggregating.
       */
      function AggregateErrors(message, innerErrors) {
        var _this8;
        _classCallCheck(this, AggregateErrors);
        var trueProto = (this instanceof AggregateErrors ? this.constructor : void 0).prototype;
        _this8 = _callSuper(this, AggregateErrors, [message]);
        _this8.innerErrors = innerErrors;
        // Workaround issue in Typescript compiler
        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200
        _this8.__proto__ = trueProto;
        return _this8;
      }
      _inherits(AggregateErrors, _Error8);
      return _createClass(AggregateErrors);
    }( /*#__PURE__*/_wrapNativeSuper(Error));
    ; // CONCATENATED MODULE: ./src/HttpClient.ts
    // Licensed to the .NET Foundation under one or more agreements.
    // The .NET Foundation licenses this file to you under the MIT license.
    /** Represents an HTTP response. */
    var _HttpResponse = /*#__PURE__*/_createClass(function _HttpResponse(statusCode, statusText, content) {
      _classCallCheck(this, _HttpResponse);
      this.statusCode = statusCode;
      this.statusText = statusText;
      this.content = content;
    });
    /** Abstraction over an HTTP client.
     *
     * This class provides an abstraction over an HTTP client so that a different implementation can be provided on different platforms.
     */
    var _HttpClient = /*#__PURE__*/function () {
      function _HttpClient() {
        _classCallCheck(this, _HttpClient);
      }
      return _createClass(_HttpClient, [{
        key: "get",
        value: function get(url, options) {
          return this.send(_objectSpread(_objectSpread({}, options), {}, {
            method: "GET",
            url: url
          }));
        }
      }, {
        key: "post",
        value: function post(url, options) {
          return this.send(_objectSpread(_objectSpread({}, options), {}, {
            method: "POST",
            url: url
          }));
        }
      }, {
        key: "delete",
        value: function _delete(url, options) {
          return this.send(_objectSpread(_objectSpread({}, options), {}, {
            method: "DELETE",
            url: url
          }));
        }
        /** Gets all cookies that apply to the specified URL.
         *
         * @param url The URL that the cookies are valid for.
         * @returns {string} A string containing all the key-value cookie pairs for the specified URL.
         */
        // @ts-ignore
      }, {
        key: "getCookieString",
        value: function getCookieString(url) {
          return "";
        }
      }]);
    }();
    ; // CONCATENATED MODULE: ./src/ILogger.ts
    // Licensed to the .NET Foundation under one or more agreements.
    // The .NET Foundation licenses this file to you under the MIT license.
    // These values are designed to match the ASP.NET Log Levels since that's the pattern we're emulating here.
    /** Indicates the severity of a log message.
     *
     * Log Levels are ordered in increasing severity. So `Debug` is more severe than `Trace`, etc.
     */
    var _LogLevel;
    (function (LogLevel) {
      /** Log level for very low severity diagnostic messages. */
      LogLevel[LogLevel["Trace"] = 0] = "Trace";
      /** Log level for low severity diagnostic messages. */
      LogLevel[LogLevel["Debug"] = 1] = "Debug";
      /** Log level for informational diagnostic messages. */
      LogLevel[LogLevel["Information"] = 2] = "Information";
      /** Log level for diagnostic messages that indicate a non-fatal problem. */
      LogLevel[LogLevel["Warning"] = 3] = "Warning";
      /** Log level for diagnostic messages that indicate a failure in the current operation. */
      LogLevel[LogLevel["Error"] = 4] = "Error";
      /** Log level for diagnostic messages that indicate a failure that will terminate the entire application. */
      LogLevel[LogLevel["Critical"] = 5] = "Critical";
      /** The highest possible log level. Used when configuring logging to indicate that no log messages should be emitted. */
      LogLevel[LogLevel["None"] = 6] = "None";
    })(_LogLevel || (_LogLevel = {}));
    ; // CONCATENATED MODULE: ./src/Loggers.ts
    // Licensed to the .NET Foundation under one or more agreements.
    // The .NET Foundation licenses this file to you under the MIT license.
    /** A logger that does nothing when log messages are sent to it. */
    var _NullLogger = /*#__PURE__*/function () {
      function _NullLogger() {
        _classCallCheck(this, _NullLogger);
      }
      /** @inheritDoc */
      // eslint-disable-next-line
      return _createClass(_NullLogger, [{
        key: "log",
        value: function log(_logLevel, _message) {}
      }]);
    }();
    /** The singleton instance of the {@link @microsoft/signalr.NullLogger}. */
    _NullLogger.instance = new _NullLogger();
    ; // CONCATENATED MODULE: ./src/Utils.ts
    // Licensed to the .NET Foundation under one or more agreements.
    // The .NET Foundation licenses this file to you under the MIT license.

    // Version token that will be replaced by the prepack command
    /** The version of the SignalR client. */
    var _VERSION = "8.0.7";
    /** @private */
    var Arg = /*#__PURE__*/function () {
      function Arg() {
        _classCallCheck(this, Arg);
      }
      return _createClass(Arg, null, [{
        key: "isRequired",
        value: function isRequired(val, name) {
          if (val === null || val === undefined) {
            throw new Error("The '".concat(name, "' argument is required."));
          }
        }
      }, {
        key: "isNotEmpty",
        value: function isNotEmpty(val, name) {
          if (!val || val.match(/^\s*$/)) {
            throw new Error("The '".concat(name, "' argument should not be empty."));
          }
        }
      }, {
        key: "isIn",
        value: function isIn(val, values, name) {
          // TypeScript enums have keys for **both** the name and the value of each enum member on the type itself.
          if (!(val in values)) {
            throw new Error("Unknown ".concat(name, " value: ").concat(val, "."));
          }
        }
      }]);
    }();
    /** @private */
    var Platform = /*#__PURE__*/function () {
      function Platform() {
        _classCallCheck(this, Platform);
      }
      return _createClass(Platform, null, [{
        key: "isBrowser",
        get:
        // react-native has a window but no document so we should check both
        function get() {
          return !Platform.isNode && (typeof window === "undefined" ? "undefined" : _typeof(window)) === "object" && _typeof(window.document) === "object";
        }
        // WebWorkers don't have a window object so the isBrowser check would fail
      }, {
        key: "isWebWorker",
        get: function get() {
          return !Platform.isNode && (typeof self === "undefined" ? "undefined" : _typeof(self)) === "object" && "importScripts" in self;
        }
        // react-native has a window but no document
      }, {
        key: "isReactNative",
        get: function get() {
          return !Platform.isNode && (typeof window === "undefined" ? "undefined" : _typeof(window)) === "object" && typeof window.document === "undefined";
        }
        // Node apps shouldn't have a window object, but WebWorkers don't either
        // so we need to check for both WebWorker and window
      }, {
        key: "isNode",
        get: function get() {
          return typeof process !== "undefined" && process.release && process.release.name === "node";
        }
      }]);
    }();
    /** @private */
    function getDataDetail(data, includeContent) {
      var detail = "";
      if (isArrayBuffer(data)) {
        detail = "Binary data of length ".concat(data.byteLength);
        if (includeContent) {
          detail += ". Content: '".concat(formatArrayBuffer(data), "'");
        }
      } else if (typeof data === "string") {
        detail = "String data of length ".concat(data.length);
        if (includeContent) {
          detail += ". Content: '".concat(data, "'");
        }
      }
      return detail;
    }
    /** @private */
    function formatArrayBuffer(data) {
      var view = new Uint8Array(data);
      // Uint8Array.map only supports returning another Uint8Array?
      var str = "";
      view.forEach(function (num) {
        var pad = num < 16 ? "0" : "";
        str += "0x".concat(pad).concat(num.toString(16), " ");
      });
      // Trim of trailing space.
      return str.substr(0, str.length - 1);
    }
    // Also in signalr-protocol-msgpack/Utils.ts
    /** @private */
    function isArrayBuffer(val) {
      return val && typeof ArrayBuffer !== "undefined" && (val instanceof ArrayBuffer ||
      // Sometimes we get an ArrayBuffer that doesn't satisfy instanceof
      val.constructor && val.constructor.name === "ArrayBuffer");
    }
    /** @private */
    function sendMessage(_x, _x2, _x3, _x4, _x5, _x6) {
      return _sendMessage.apply(this, arguments);
    }
    /** @private */
    function _sendMessage() {
      _sendMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee28(logger, transportName, httpClient, url, content, options) {
        var headers, _getUserAgentHeader11, _getUserAgentHeader12, name, value, responseType, response;
        return _regeneratorRuntime().wrap(function _callee28$(_context29) {
          while (1) switch (_context29.prev = _context29.next) {
            case 0:
              headers = {};
              _getUserAgentHeader11 = getUserAgentHeader(), _getUserAgentHeader12 = _slicedToArray(_getUserAgentHeader11, 2), name = _getUserAgentHeader12[0], value = _getUserAgentHeader12[1];
              headers[name] = value;
              logger.log(_LogLevel.Trace, "(".concat(transportName, " transport) sending data. ").concat(getDataDetail(content, options.logMessageContent), "."));
              responseType = isArrayBuffer(content) ? "arraybuffer" : "text";
              _context29.next = 7;
              return httpClient.post(url, {
                content: content,
                headers: _objectSpread(_objectSpread({}, headers), options.headers),
                responseType: responseType,
                timeout: options.timeout,
                withCredentials: options.withCredentials
              });
            case 7:
              response = _context29.sent;
              logger.log(_LogLevel.Trace, "(".concat(transportName, " transport) request complete. Response status: ").concat(response.statusCode, "."));
            case 9:
            case "end":
              return _context29.stop();
          }
        }, _callee28);
      }));
      return _sendMessage.apply(this, arguments);
    }
    function createLogger(logger) {
      if (logger === undefined) {
        return new ConsoleLogger(_LogLevel.Information);
      }
      if (logger === null) {
        return _NullLogger.instance;
      }
      if (logger.log !== undefined) {
        return logger;
      }
      return new ConsoleLogger(logger);
    }
    /** @private */
    var SubjectSubscription = /*#__PURE__*/function () {
      function SubjectSubscription(subject, observer) {
        _classCallCheck(this, SubjectSubscription);
        this._subject = subject;
        this._observer = observer;
      }
      return _createClass(SubjectSubscription, [{
        key: "dispose",
        value: function dispose() {
          var index = this._subject.observers.indexOf(this._observer);
          if (index > -1) {
            this._subject.observers.splice(index, 1);
          }
          if (this._subject.observers.length === 0 && this._subject.cancelCallback) {
            this._subject.cancelCallback()["catch"](function (_) {});
          }
        }
      }]);
    }();
    /** @private */
    var ConsoleLogger = /*#__PURE__*/function () {
      function ConsoleLogger(minimumLogLevel) {
        _classCallCheck(this, ConsoleLogger);
        this._minLevel = minimumLogLevel;
        this.out = console;
      }
      return _createClass(ConsoleLogger, [{
        key: "log",
        value: function log(logLevel, message) {
          if (logLevel >= this._minLevel) {
            var msg = "[".concat(new Date().toISOString(), "] ").concat(_LogLevel[logLevel], ": ").concat(message);
            switch (logLevel) {
              case _LogLevel.Critical:
              case _LogLevel.Error:
                this.out.error(msg);
                break;
              case _LogLevel.Warning:
                this.out.warn(msg);
                break;
              case _LogLevel.Information:
                this.out.info(msg);
                break;
              default:
                // console.debug only goes to attached debuggers in Node, so we use console.log for Trace and Debug
                this.out.log(msg);
                break;
            }
          }
        }
      }]);
    }();
    /** @private */
    function getUserAgentHeader() {
      var userAgentHeaderName = "X-SignalR-User-Agent";
      if (Platform.isNode) {
        userAgentHeaderName = "User-Agent";
      }
      return [userAgentHeaderName, constructUserAgent(_VERSION, getOsName(), getRuntime(), getRuntimeVersion())];
    }
    /** @private */
    function constructUserAgent(version, os, runtime, runtimeVersion) {
      // Microsoft SignalR/[Version] ([Detailed Version]; [Operating System]; [Runtime]; [Runtime Version])
      var userAgent = "Microsoft SignalR/";
      var majorAndMinor = version.split(".");
      userAgent += "".concat(majorAndMinor[0], ".").concat(majorAndMinor[1]);
      userAgent += " (".concat(version, "; ");
      if (os && os !== "") {
        userAgent += "".concat(os, "; ");
      } else {
        userAgent += "Unknown OS; ";
      }
      userAgent += "".concat(runtime);
      if (runtimeVersion) {
        userAgent += "; ".concat(runtimeVersion);
      } else {
        userAgent += "; Unknown Runtime Version";
      }
      userAgent += ")";
      return userAgent;
    }
    // eslint-disable-next-line spaced-comment
    /*#__PURE__*/
    function getOsName() {
      if (Platform.isNode) {
        switch (process.platform) {
          case "win32":
            return "Windows NT";
          case "darwin":
            return "macOS";
          case "linux":
            return "Linux";
          default:
            return process.platform;
        }
      } else {
        return "";
      }
    }
    // eslint-disable-next-line spaced-comment
    /*#__PURE__*/
    function getRuntimeVersion() {
      if (Platform.isNode) {
        return process.versions.node;
      }
      return undefined;
    }
    function getRuntime() {
      if (Platform.isNode) {
        return "NodeJS";
      } else {
        return "Browser";
      }
    }
    /** @private */
    function getErrorString(e) {
      if (e.stack) {
        return e.stack;
      } else if (e.message) {
        return e.message;
      }
      return "".concat(e);
    }
    /** @private */
    function getGlobalThis() {
      // globalThis is semi-new and not available in Node until v12
      if (typeof globalThis !== "undefined") {
        return globalThis;
      }
      if (typeof self !== "undefined") {
        return self;
      }
      if (typeof window !== "undefined") {
        return window;
      }
      if (typeof __webpack_require__.g !== "undefined") {
        return __webpack_require__.g;
      }
      throw new Error("could not find global");
    }
    ; // CONCATENATED MODULE: ./src/FetchHttpClient.ts
    // Licensed to the .NET Foundation under one or more agreements.
    // The .NET Foundation licenses this file to you under the MIT license.
    var FetchHttpClient = /*#__PURE__*/function (_HttpClient2) {
      function FetchHttpClient(logger) {
        var _this9;
        _classCallCheck(this, FetchHttpClient);
        _this9 = _callSuper(this, FetchHttpClient);
        _this9._logger = logger;
        // Node added a fetch implementation to the global scope starting in v18.
        // We need to add a cookie jar in node to be able to share cookies with WebSocket
        if (typeof fetch === "undefined" || Platform.isNode) {
          // In order to ignore the dynamic require in webpack builds we need to do this magic
          // @ts-ignore: TS doesn't know about these names
          var requireFunc = true ? require : 0;
          // Cookies aren't automatically handled in Node so we need to add a CookieJar to preserve cookies across requests
          _this9._jar = new (requireFunc("tough-cookie").CookieJar)();
          if (typeof fetch === "undefined") {
            _this9._fetchType = requireFunc("node-fetch");
          } else {
            // Use fetch from Node if available
            _this9._fetchType = fetch;
          }
          // node-fetch doesn't have a nice API for getting and setting cookies
          // fetch-cookie will wrap a fetch implementation with a default CookieJar or a provided one
          _this9._fetchType = requireFunc("fetch-cookie")(_this9._fetchType, _this9._jar);
        } else {
          _this9._fetchType = fetch.bind(getGlobalThis());
        }
        if (typeof AbortController === "undefined") {
          // In order to ignore the dynamic require in webpack builds we need to do this magic
          // @ts-ignore: TS doesn't know about these names
          var _requireFunc = true ? require : 0;
          // Node needs EventListener methods on AbortController which our custom polyfill doesn't provide
          _this9._abortControllerType = _requireFunc("abort-controller");
        } else {
          _this9._abortControllerType = AbortController;
        }
        return _this9;
      }
      /** @inheritDoc */
      _inherits(FetchHttpClient, _HttpClient2);
      return _createClass(FetchHttpClient, [{
        key: "send",
        value: (function () {
          var _send = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(request) {
            var _this10 = this;
            var abortController, error, timeoutId, msTimeout, response, errorMessage, content, payload;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  if (!(request.abortSignal && request.abortSignal.aborted)) {
                    _context.next = 2;
                    break;
                  }
                  throw new _AbortError();
                case 2:
                  if (request.method) {
                    _context.next = 4;
                    break;
                  }
                  throw new Error("No method defined.");
                case 4:
                  if (request.url) {
                    _context.next = 6;
                    break;
                  }
                  throw new Error("No url defined.");
                case 6:
                  abortController = new this._abortControllerType();
                  // Hook our abortSignal into the abort controller
                  if (request.abortSignal) {
                    request.abortSignal.onabort = function () {
                      abortController.abort();
                      error = new _AbortError();
                    };
                  }
                  // If a timeout has been passed in, setup a timeout to call abort
                  // Type needs to be any to fit window.setTimeout and NodeJS.setTimeout
                  timeoutId = null;
                  if (request.timeout) {
                    msTimeout = request.timeout;
                    timeoutId = setTimeout(function () {
                      abortController.abort();
                      _this10._logger.log(_LogLevel.Warning, "Timeout from HTTP request.");
                      error = new _TimeoutError();
                    }, msTimeout);
                  }
                  if (request.content === "") {
                    request.content = undefined;
                  }
                  if (request.content) {
                    // Explicitly setting the Content-Type header for React Native on Android platform.
                    request.headers = request.headers || {};
                    if (isArrayBuffer(request.content)) {
                      request.headers["Content-Type"] = "application/octet-stream";
                    } else {
                      request.headers["Content-Type"] = "text/plain;charset=UTF-8";
                    }
                  }
                  _context.prev = 12;
                  _context.next = 15;
                  return this._fetchType(request.url, {
                    body: request.content,
                    cache: "no-cache",
                    credentials: request.withCredentials === true ? "include" : "same-origin",
                    headers: _objectSpread({
                      "X-Requested-With": "XMLHttpRequest"
                    }, request.headers),
                    method: request.method,
                    mode: "cors",
                    redirect: "follow",
                    signal: abortController.signal
                  });
                case 15:
                  response = _context.sent;
                  _context.next = 24;
                  break;
                case 18:
                  _context.prev = 18;
                  _context.t0 = _context["catch"](12);
                  if (!error) {
                    _context.next = 22;
                    break;
                  }
                  throw error;
                case 22:
                  this._logger.log(_LogLevel.Warning, "Error from HTTP request. ".concat(_context.t0, "."));
                  throw _context.t0;
                case 24:
                  _context.prev = 24;
                  if (timeoutId) {
                    clearTimeout(timeoutId);
                  }
                  if (request.abortSignal) {
                    request.abortSignal.onabort = null;
                  }
                  return _context.finish(24);
                case 28:
                  if (response.ok) {
                    _context.next = 33;
                    break;
                  }
                  _context.next = 31;
                  return deserializeContent(response, "text");
                case 31:
                  errorMessage = _context.sent;
                  throw new _HttpError(errorMessage || response.statusText, response.status);
                case 33:
                  content = deserializeContent(response, request.responseType);
                  _context.next = 36;
                  return content;
                case 36:
                  payload = _context.sent;
                  return _context.abrupt("return", new _HttpResponse(response.status, response.statusText, payload));
                case 38:
                case "end":
                  return _context.stop();
              }
            }, _callee, this, [[12, 18, 24, 28]]);
          }));
          function send(_x7) {
            return _send.apply(this, arguments);
          }
          return send;
        }())
      }, {
        key: "getCookieString",
        value: function getCookieString(url) {
          var cookies = "";
          if (Platform.isNode && this._jar) {
            // @ts-ignore: unused variable
            this._jar.getCookies(url, function (e, c) {
              return cookies = c.join("; ");
            });
          }
          return cookies;
        }
      }]);
    }(_HttpClient);
    function deserializeContent(response, responseType) {
      var content;
      switch (responseType) {
        case "arraybuffer":
          content = response.arrayBuffer();
          break;
        case "text":
          content = response.text();
          break;
        case "blob":
        case "document":
        case "json":
          throw new Error("".concat(responseType, " is not supported."));
        default:
          content = response.text();
          break;
      }
      return content;
    }
    ; // CONCATENATED MODULE: ./src/XhrHttpClient.ts
    // Licensed to the .NET Foundation under one or more agreements.
    // The .NET Foundation licenses this file to you under the MIT license.
    var XhrHttpClient = /*#__PURE__*/function (_HttpClient3) {
      function XhrHttpClient(logger) {
        var _this11;
        _classCallCheck(this, XhrHttpClient);
        _this11 = _callSuper(this, XhrHttpClient);
        _this11._logger = logger;
        return _this11;
      }
      /** @inheritDoc */
      _inherits(XhrHttpClient, _HttpClient3);
      return _createClass(XhrHttpClient, [{
        key: "send",
        value: function send(request) {
          var _this12 = this;
          // Check that abort was not signaled before calling send
          if (request.abortSignal && request.abortSignal.aborted) {
            return Promise.reject(new _AbortError());
          }
          if (!request.method) {
            return Promise.reject(new Error("No method defined."));
          }
          if (!request.url) {
            return Promise.reject(new Error("No url defined."));
          }
          return new Promise(function (resolve, reject) {
            var xhr = new XMLHttpRequest();
            xhr.open(request.method, request.url, true);
            xhr.withCredentials = request.withCredentials === undefined ? true : request.withCredentials;
            xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest");
            if (request.content === "") {
              request.content = undefined;
            }
            if (request.content) {
              // Explicitly setting the Content-Type header for React Native on Android platform.
              if (isArrayBuffer(request.content)) {
                xhr.setRequestHeader("Content-Type", "application/octet-stream");
              } else {
                xhr.setRequestHeader("Content-Type", "text/plain;charset=UTF-8");
              }
            }
            var headers = request.headers;
            if (headers) {
              Object.keys(headers).forEach(function (header) {
                xhr.setRequestHeader(header, headers[header]);
              });
            }
            if (request.responseType) {
              xhr.responseType = request.responseType;
            }
            if (request.abortSignal) {
              request.abortSignal.onabort = function () {
                xhr.abort();
                reject(new _AbortError());
              };
            }
            if (request.timeout) {
              xhr.timeout = request.timeout;
            }
            xhr.onload = function () {
              if (request.abortSignal) {
                request.abortSignal.onabort = null;
              }
              if (xhr.status >= 200 && xhr.status < 300) {
                resolve(new _HttpResponse(xhr.status, xhr.statusText, xhr.response || xhr.responseText));
              } else {
                reject(new _HttpError(xhr.response || xhr.responseText || xhr.statusText, xhr.status));
              }
            };
            xhr.onerror = function () {
              _this12._logger.log(_LogLevel.Warning, "Error from HTTP request. ".concat(xhr.status, ": ").concat(xhr.statusText, "."));
              reject(new _HttpError(xhr.statusText, xhr.status));
            };
            xhr.ontimeout = function () {
              _this12._logger.log(_LogLevel.Warning, "Timeout from HTTP request.");
              reject(new _TimeoutError());
            };
            xhr.send(request.content);
          });
        }
      }]);
    }(_HttpClient);
    ; // CONCATENATED MODULE: ./src/DefaultHttpClient.ts
    // Licensed to the .NET Foundation under one or more agreements.
    // The .NET Foundation licenses this file to you under the MIT license.

    /** Default implementation of {@link @microsoft/signalr.HttpClient}. */
    var _DefaultHttpClient = /*#__PURE__*/function (_HttpClient4) {
      /** Creates a new instance of the {@link @microsoft/signalr.DefaultHttpClient}, using the provided {@link @microsoft/signalr.ILogger} to log messages. */
      function _DefaultHttpClient(logger) {
        var _this13;
        _classCallCheck(this, _DefaultHttpClient);
        _this13 = _callSuper(this, _DefaultHttpClient);
        if (typeof fetch !== "undefined" || Platform.isNode) {
          _this13._httpClient = new FetchHttpClient(logger);
        } else if (typeof XMLHttpRequest !== "undefined") {
          _this13._httpClient = new XhrHttpClient(logger);
        } else {
          throw new Error("No usable HttpClient found.");
        }
        return _this13;
      }
      /** @inheritDoc */
      _inherits(_DefaultHttpClient, _HttpClient4);
      return _createClass(_DefaultHttpClient, [{
        key: "send",
        value: function send(request) {
          // Check that abort was not signaled before calling send
          if (request.abortSignal && request.abortSignal.aborted) {
            return Promise.reject(new _AbortError());
          }
          if (!request.method) {
            return Promise.reject(new Error("No method defined."));
          }
          if (!request.url) {
            return Promise.reject(new Error("No url defined."));
          }
          return this._httpClient.send(request);
        }
      }, {
        key: "getCookieString",
        value: function getCookieString(url) {
          return this._httpClient.getCookieString(url);
        }
      }]);
    }(_HttpClient);
    ; // CONCATENATED MODULE: ./src/TextMessageFormat.ts
    // Licensed to the .NET Foundation under one or more agreements.
    // The .NET Foundation licenses this file to you under the MIT license.
    // Not exported from index
    /** @private */
    var TextMessageFormat = /*#__PURE__*/function () {
      function TextMessageFormat() {
        _classCallCheck(this, TextMessageFormat);
      }
      return _createClass(TextMessageFormat, null, [{
        key: "write",
        value: function write(output) {
          return "".concat(output).concat(TextMessageFormat.RecordSeparator);
        }
      }, {
        key: "parse",
        value: function parse(input) {
          if (input[input.length - 1] !== TextMessageFormat.RecordSeparator) {
            throw new Error("Message is incomplete.");
          }
          var messages = input.split(TextMessageFormat.RecordSeparator);
          messages.pop();
          return messages;
        }
      }]);
    }();
    TextMessageFormat.RecordSeparatorCode = 0x1e;
    TextMessageFormat.RecordSeparator = String.fromCharCode(TextMessageFormat.RecordSeparatorCode);
    ; // CONCATENATED MODULE: ./src/HandshakeProtocol.ts
    // Licensed to the .NET Foundation under one or more agreements.
    // The .NET Foundation licenses this file to you under the MIT license.

    /** @private */
    var HandshakeProtocol = /*#__PURE__*/function () {
      function HandshakeProtocol() {
        _classCallCheck(this, HandshakeProtocol);
      }
      return _createClass(HandshakeProtocol, [{
        key: "writeHandshakeRequest",
        value:
        // Handshake request is always JSON
        function writeHandshakeRequest(handshakeRequest) {
          return TextMessageFormat.write(JSON.stringify(handshakeRequest));
        }
      }, {
        key: "parseHandshakeResponse",
        value: function parseHandshakeResponse(data) {
          var messageData;
          var remainingData;
          if (isArrayBuffer(data)) {
            // Format is binary but still need to read JSON text from handshake response
            var binaryData = new Uint8Array(data);
            var separatorIndex = binaryData.indexOf(TextMessageFormat.RecordSeparatorCode);
            if (separatorIndex === -1) {
              throw new Error("Message is incomplete.");
            }
            // content before separator is handshake response
            // optional content after is additional messages
            var responseLength = separatorIndex + 1;
            messageData = String.fromCharCode.apply(null, Array.prototype.slice.call(binaryData.slice(0, responseLength)));
            remainingData = binaryData.byteLength > responseLength ? binaryData.slice(responseLength).buffer : null;
          } else {
            var textData = data;
            var _separatorIndex = textData.indexOf(TextMessageFormat.RecordSeparator);
            if (_separatorIndex === -1) {
              throw new Error("Message is incomplete.");
            }
            // content before separator is handshake response
            // optional content after is additional messages
            var _responseLength = _separatorIndex + 1;
            messageData = textData.substring(0, _responseLength);
            remainingData = textData.length > _responseLength ? textData.substring(_responseLength) : null;
          }
          // At this point we should have just the single handshake message
          var messages = TextMessageFormat.parse(messageData);
          var response = JSON.parse(messages[0]);
          if (response.type) {
            throw new Error("Expected a handshake response from the server.");
          }
          var responseMessage = response;
          // multiple messages could have arrived with handshake
          // return additional data to be parsed as usual, or null if all parsed
          return [remainingData, responseMessage];
        }
      }]);
    }();
    ; // CONCATENATED MODULE: ./src/IHubProtocol.ts
    // Licensed to the .NET Foundation under one or more agreements.
    // The .NET Foundation licenses this file to you under the MIT license.
    /** Defines the type of a Hub Message. */
    var _MessageType;
    (function (MessageType) {
      /** Indicates the message is an Invocation message and implements the {@link @microsoft/signalr.InvocationMessage} interface. */
      MessageType[MessageType["Invocation"] = 1] = "Invocation";
      /** Indicates the message is a StreamItem message and implements the {@link @microsoft/signalr.StreamItemMessage} interface. */
      MessageType[MessageType["StreamItem"] = 2] = "StreamItem";
      /** Indicates the message is a Completion message and implements the {@link @microsoft/signalr.CompletionMessage} interface. */
      MessageType[MessageType["Completion"] = 3] = "Completion";
      /** Indicates the message is a Stream Invocation message and implements the {@link @microsoft/signalr.StreamInvocationMessage} interface. */
      MessageType[MessageType["StreamInvocation"] = 4] = "StreamInvocation";
      /** Indicates the message is a Cancel Invocation message and implements the {@link @microsoft/signalr.CancelInvocationMessage} interface. */
      MessageType[MessageType["CancelInvocation"] = 5] = "CancelInvocation";
      /** Indicates the message is a Ping message and implements the {@link @microsoft/signalr.PingMessage} interface. */
      MessageType[MessageType["Ping"] = 6] = "Ping";
      /** Indicates the message is a Close message and implements the {@link @microsoft/signalr.CloseMessage} interface. */
      MessageType[MessageType["Close"] = 7] = "Close";
      MessageType[MessageType["Ack"] = 8] = "Ack";
      MessageType[MessageType["Sequence"] = 9] = "Sequence";
    })(_MessageType || (_MessageType = {}));
    ; // CONCATENATED MODULE: ./src/Subject.ts
    // Licensed to the .NET Foundation under one or more agreements.
    // The .NET Foundation licenses this file to you under the MIT license.

    /** Stream implementation to stream items to the server. */
    var _Subject = /*#__PURE__*/function () {
      function _Subject() {
        _classCallCheck(this, _Subject);
        this.observers = [];
      }
      return _createClass(_Subject, [{
        key: "next",
        value: function next(item) {
          var _iterator = _createForOfIteratorHelper(this.observers),
            _step;
          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var observer = _step.value;
              observer.next(item);
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
        }
      }, {
        key: "error",
        value: function error(err) {
          var _iterator2 = _createForOfIteratorHelper(this.observers),
            _step2;
          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              var observer = _step2.value;
              if (observer.error) {
                observer.error(err);
              }
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
        }
      }, {
        key: "complete",
        value: function complete() {
          var _iterator3 = _createForOfIteratorHelper(this.observers),
            _step3;
          try {
            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
              var observer = _step3.value;
              if (observer.complete) {
                observer.complete();
              }
            }
          } catch (err) {
            _iterator3.e(err);
          } finally {
            _iterator3.f();
          }
        }
      }, {
        key: "subscribe",
        value: function subscribe(observer) {
          this.observers.push(observer);
          return new SubjectSubscription(this, observer);
        }
      }]);
    }();
    ; // CONCATENATED MODULE: ./src/MessageBuffer.ts
    // Licensed to the .NET Foundation under one or more agreements.
    // The .NET Foundation licenses this file to you under the MIT license.

    /** @private */
    var MessageBuffer = /*#__PURE__*/function () {
      function MessageBuffer(protocol, connection, bufferSize) {
        _classCallCheck(this, MessageBuffer);
        this._bufferSize = 100000;
        this._messages = [];
        this._totalMessageCount = 0;
        this._waitForSequenceMessage = false;
        // Message IDs start at 1 and always increment by 1
        this._nextReceivingSequenceId = 1;
        this._latestReceivedSequenceId = 0;
        this._bufferedByteCount = 0;
        this._reconnectInProgress = false;
        this._protocol = protocol;
        this._connection = connection;
        this._bufferSize = bufferSize;
      }
      return _createClass(MessageBuffer, [{
        key: "_send",
        value: function () {
          var _send2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(message) {
            var serializedMessage, backpressurePromise, backpressurePromiseResolver, backpressurePromiseRejector;
            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) switch (_context2.prev = _context2.next) {
                case 0:
                  serializedMessage = this._protocol.writeMessage(message);
                  backpressurePromise = Promise.resolve(); // Only count invocation messages. Acks, pings, etc. don't need to be resent on reconnect
                  if (this._isInvocationMessage(message)) {
                    this._totalMessageCount++;
                    backpressurePromiseResolver = function backpressurePromiseResolver() {};
                    backpressurePromiseRejector = function backpressurePromiseRejector() {};
                    if (isArrayBuffer(serializedMessage)) {
                      this._bufferedByteCount += serializedMessage.byteLength;
                    } else {
                      this._bufferedByteCount += serializedMessage.length;
                    }
                    if (this._bufferedByteCount >= this._bufferSize) {
                      backpressurePromise = new Promise(function (resolve, reject) {
                        backpressurePromiseResolver = resolve;
                        backpressurePromiseRejector = reject;
                      });
                    }
                    this._messages.push(new BufferedItem(serializedMessage, this._totalMessageCount, backpressurePromiseResolver, backpressurePromiseRejector));
                  }
                  _context2.prev = 3;
                  if (this._reconnectInProgress) {
                    _context2.next = 7;
                    break;
                  }
                  _context2.next = 7;
                  return this._connection.send(serializedMessage);
                case 7:
                  _context2.next = 12;
                  break;
                case 9:
                  _context2.prev = 9;
                  _context2.t0 = _context2["catch"](3);
                  this._disconnected();
                case 12:
                  _context2.next = 14;
                  return backpressurePromise;
                case 14:
                case "end":
                  return _context2.stop();
              }
            }, _callee2, this, [[3, 9]]);
          }));
          function _send(_x8) {
            return _send2.apply(this, arguments);
          }
          return _send;
        }()
      }, {
        key: "_ack",
        value: function _ack(ackMessage) {
          var newestAckedMessage = -1;
          // Find index of newest message being acked
          for (var index = 0; index < this._messages.length; index++) {
            var element = this._messages[index];
            if (element._id <= ackMessage.sequenceId) {
              newestAckedMessage = index;
              if (isArrayBuffer(element._message)) {
                this._bufferedByteCount -= element._message.byteLength;
              } else {
                this._bufferedByteCount -= element._message.length;
              }
              // resolve items that have already been sent and acked
              element._resolver();
            } else if (this._bufferedByteCount < this._bufferSize) {
              // resolve items that now fall under the buffer limit but haven't been acked
              element._resolver();
            } else {
              break;
            }
          }
          if (newestAckedMessage !== -1) {
            // We're removing everything including the message pointed to, so add 1
            this._messages = this._messages.slice(newestAckedMessage + 1);
          }
        }
      }, {
        key: "_shouldProcessMessage",
        value: function _shouldProcessMessage(message) {
          if (this._waitForSequenceMessage) {
            if (message.type !== _MessageType.Sequence) {
              return false;
            } else {
              this._waitForSequenceMessage = false;
              return true;
            }
          }
          // No special processing for acks, pings, etc.
          if (!this._isInvocationMessage(message)) {
            return true;
          }
          var currentId = this._nextReceivingSequenceId;
          this._nextReceivingSequenceId++;
          if (currentId <= this._latestReceivedSequenceId) {
            if (currentId === this._latestReceivedSequenceId) {
              // Should only hit this if we just reconnected and the server is sending
              // Messages it has buffered, which would mean it hasn't seen an Ack for these messages
              this._ackTimer();
            }
            // Ignore, this is a duplicate message
            return false;
          }
          this._latestReceivedSequenceId = currentId;
          // Only start the timer for sending an Ack message when we have a message to ack. This also conveniently solves
          // timer throttling by not having a recursive timer, and by starting the timer via a network call (recv)
          this._ackTimer();
          return true;
        }
      }, {
        key: "_resetSequence",
        value: function _resetSequence(message) {
          if (message.sequenceId > this._nextReceivingSequenceId) {
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            this._connection.stop(new Error("Sequence ID greater than amount of messages we've received."));
            return;
          }
          this._nextReceivingSequenceId = message.sequenceId;
        }
      }, {
        key: "_disconnected",
        value: function _disconnected() {
          this._reconnectInProgress = true;
          this._waitForSequenceMessage = true;
        }
      }, {
        key: "_resend",
        value: function () {
          var _resend2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
            var sequenceId, messages, _iterator4, _step4, element;
            return _regeneratorRuntime().wrap(function _callee3$(_context3) {
              while (1) switch (_context3.prev = _context3.next) {
                case 0:
                  sequenceId = this._messages.length !== 0 ? this._messages[0]._id : this._totalMessageCount + 1;
                  _context3.next = 3;
                  return this._connection.send(this._protocol.writeMessage({
                    type: _MessageType.Sequence,
                    sequenceId: sequenceId
                  }));
                case 3:
                  // Get a local variable to the _messages, just in case messages are acked while resending
                  // Which would slice the _messages array (which creates a new copy)
                  messages = this._messages;
                  _iterator4 = _createForOfIteratorHelper(messages);
                  _context3.prev = 5;
                  _iterator4.s();
                case 7:
                  if ((_step4 = _iterator4.n()).done) {
                    _context3.next = 13;
                    break;
                  }
                  element = _step4.value;
                  _context3.next = 11;
                  return this._connection.send(element._message);
                case 11:
                  _context3.next = 7;
                  break;
                case 13:
                  _context3.next = 18;
                  break;
                case 15:
                  _context3.prev = 15;
                  _context3.t0 = _context3["catch"](5);
                  _iterator4.e(_context3.t0);
                case 18:
                  _context3.prev = 18;
                  _iterator4.f();
                  return _context3.finish(18);
                case 21:
                  this._reconnectInProgress = false;
                case 22:
                case "end":
                  return _context3.stop();
              }
            }, _callee3, this, [[5, 15, 18, 21]]);
          }));
          function _resend() {
            return _resend2.apply(this, arguments);
          }
          return _resend;
        }()
      }, {
        key: "_dispose",
        value: function _dispose(error) {
          error !== null && error !== void 0 ? error : error = new Error("Unable to reconnect to server.");
          // Unblock backpressure if any
          var _iterator5 = _createForOfIteratorHelper(this._messages),
            _step5;
          try {
            for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
              var element = _step5.value;
              element._rejector(error);
            }
          } catch (err) {
            _iterator5.e(err);
          } finally {
            _iterator5.f();
          }
        }
      }, {
        key: "_isInvocationMessage",
        value: function _isInvocationMessage(message) {
          // There is no way to check if something implements an interface.
          // So we individually check the messages in a switch statement.
          // To make sure we don't miss any message types we rely on the compiler
          // seeing the function returns a value and it will do the
          // exhaustive check for us on the switch statement, since we don't use 'case default'
          switch (message.type) {
            case _MessageType.Invocation:
            case _MessageType.StreamItem:
            case _MessageType.Completion:
            case _MessageType.StreamInvocation:
            case _MessageType.CancelInvocation:
              return true;
            case _MessageType.Close:
            case _MessageType.Sequence:
            case _MessageType.Ping:
            case _MessageType.Ack:
              return false;
          }
        }
      }, {
        key: "_ackTimer",
        value: function _ackTimer() {
          var _this14 = this;
          if (this._ackTimerHandle === undefined) {
            this._ackTimerHandle = setTimeout( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {
              return _regeneratorRuntime().wrap(function _callee4$(_context4) {
                while (1) switch (_context4.prev = _context4.next) {
                  case 0:
                    _context4.prev = 0;
                    if (_this14._reconnectInProgress) {
                      _context4.next = 4;
                      break;
                    }
                    _context4.next = 4;
                    return _this14._connection.send(_this14._protocol.writeMessage({
                      type: _MessageType.Ack,
                      sequenceId: _this14._latestReceivedSequenceId
                    }));
                  case 4:
                    _context4.next = 8;
                    break;
                  case 6:
                    _context4.prev = 6;
                    _context4.t0 = _context4["catch"](0);
                  case 8:
                    clearTimeout(_this14._ackTimerHandle);
                    _this14._ackTimerHandle = undefined;
                    // 1 second delay so we don't spam Ack messages if there are many messages being received at once.
                  case 10:
                  case "end":
                    return _context4.stop();
                }
              }, _callee4, null, [[0, 6]]);
            })), 1000);
          }
        }
      }]);
    }();
    var BufferedItem = /*#__PURE__*/_createClass(function BufferedItem(message, id, resolver, rejector) {
      _classCallCheck(this, BufferedItem);
      this._message = message;
      this._id = id;
      this._resolver = resolver;
      this._rejector = rejector;
    });
    ; // CONCATENATED MODULE: ./src/HubConnection.ts
    // Licensed to the .NET Foundation under one or more agreements.
    // The .NET Foundation licenses this file to you under the MIT license.

    var DEFAULT_TIMEOUT_IN_MS = 30 * 1000;
    var DEFAULT_PING_INTERVAL_IN_MS = 15 * 1000;
    var DEFAULT_STATEFUL_RECONNECT_BUFFER_SIZE = 100000;
    /** Describes the current state of the {@link HubConnection} to the server. */
    var _HubConnectionState;
    (function (HubConnectionState) {
      /** The hub connection is disconnected. */
      HubConnectionState["Disconnected"] = "Disconnected";
      /** The hub connection is connecting. */
      HubConnectionState["Connecting"] = "Connecting";
      /** The hub connection is connected. */
      HubConnectionState["Connected"] = "Connected";
      /** The hub connection is disconnecting. */
      HubConnectionState["Disconnecting"] = "Disconnecting";
      /** The hub connection is reconnecting. */
      HubConnectionState["Reconnecting"] = "Reconnecting";
    })(_HubConnectionState || (_HubConnectionState = {}));
    /** Represents a connection to a SignalR Hub. */
    var _HubConnection = /*#__PURE__*/function () {
      function _HubConnection(connection, logger, protocol, reconnectPolicy, serverTimeoutInMilliseconds, keepAliveIntervalInMilliseconds, statefulReconnectBufferSize) {
        var _this15 = this;
        _classCallCheck(this, _HubConnection);
        this._nextKeepAlive = 0;
        this._freezeEventListener = function () {
          _this15._logger.log(_LogLevel.Warning, "The page is being frozen, this will likely lead to the connection being closed and messages being lost. For more information see the docs at https://learn.microsoft.com/aspnet/core/signalr/javascript-client#bsleep");
        };
        Arg.isRequired(connection, "connection");
        Arg.isRequired(logger, "logger");
        Arg.isRequired(protocol, "protocol");
        this.serverTimeoutInMilliseconds = serverTimeoutInMilliseconds !== null && serverTimeoutInMilliseconds !== void 0 ? serverTimeoutInMilliseconds : DEFAULT_TIMEOUT_IN_MS;
        this.keepAliveIntervalInMilliseconds = keepAliveIntervalInMilliseconds !== null && keepAliveIntervalInMilliseconds !== void 0 ? keepAliveIntervalInMilliseconds : DEFAULT_PING_INTERVAL_IN_MS;
        this._statefulReconnectBufferSize = statefulReconnectBufferSize !== null && statefulReconnectBufferSize !== void 0 ? statefulReconnectBufferSize : DEFAULT_STATEFUL_RECONNECT_BUFFER_SIZE;
        this._logger = logger;
        this._protocol = protocol;
        this.connection = connection;
        this._reconnectPolicy = reconnectPolicy;
        this._handshakeProtocol = new HandshakeProtocol();
        this.connection.onreceive = function (data) {
          return _this15._processIncomingData(data);
        };
        this.connection.onclose = function (error) {
          return _this15._connectionClosed(error);
        };
        this._callbacks = {};
        this._methods = {};
        this._closedCallbacks = [];
        this._reconnectingCallbacks = [];
        this._reconnectedCallbacks = [];
        this._invocationId = 0;
        this._receivedHandshakeResponse = false;
        this._connectionState = _HubConnectionState.Disconnected;
        this._connectionStarted = false;
        this._cachedPingMessage = this._protocol.writeMessage({
          type: _MessageType.Ping
        });
      }
      /** Indicates the state of the {@link HubConnection} to the server. */
      return _createClass(_HubConnection, [{
        key: "state",
        get: function get() {
          return this._connectionState;
        }
        /** Represents the connection id of the {@link HubConnection} on the server. The connection id will be null when the connection is either
         *  in the disconnected state or if the negotiation step was skipped.
         */
      }, {
        key: "connectionId",
        get: function get() {
          return this.connection ? this.connection.connectionId || null : null;
        }
        /** Indicates the url of the {@link HubConnection} to the server. */
      }, {
        key: "baseUrl",
        get: function get() {
          return this.connection.baseUrl || "";
        }
        /**
         * Sets a new url for the HubConnection. Note that the url can only be changed when the connection is in either the Disconnected or
         * Reconnecting states.
         * @param {string} url The url to connect to.
         */,
        set: function set(url) {
          if (this._connectionState !== _HubConnectionState.Disconnected && this._connectionState !== _HubConnectionState.Reconnecting) {
            throw new Error("The HubConnection must be in the Disconnected or Reconnecting state to change the url.");
          }
          if (!url) {
            throw new Error("The HubConnection url must be a valid url.");
          }
          this.connection.baseUrl = url;
        }
        /** Starts the connection.
         *
         * @returns {Promise<void>} A Promise that resolves when the connection has been successfully established, or rejects with an error.
         */
      }, {
        key: "start",
        value: function start() {
          this._startPromise = this._startWithStateTransitions();
          return this._startPromise;
        }
      }, {
        key: "_startWithStateTransitions",
        value: function () {
          var _startWithStateTransitions2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {
            return _regeneratorRuntime().wrap(function _callee5$(_context5) {
              while (1) switch (_context5.prev = _context5.next) {
                case 0:
                  if (!(this._connectionState !== _HubConnectionState.Disconnected)) {
                    _context5.next = 2;
                    break;
                  }
                  return _context5.abrupt("return", Promise.reject(new Error("Cannot start a HubConnection that is not in the 'Disconnected' state.")));
                case 2:
                  this._connectionState = _HubConnectionState.Connecting;
                  this._logger.log(_LogLevel.Debug, "Starting HubConnection.");
                  _context5.prev = 4;
                  _context5.next = 7;
                  return this._startInternal();
                case 7:
                  if (Platform.isBrowser) {
                    // Log when the browser freezes the tab so users know why their connection unexpectedly stopped working
                    window.document.addEventListener("freeze", this._freezeEventListener);
                  }
                  this._connectionState = _HubConnectionState.Connected;
                  this._connectionStarted = true;
                  this._logger.log(_LogLevel.Debug, "HubConnection connected successfully.");
                  _context5.next = 18;
                  break;
                case 13:
                  _context5.prev = 13;
                  _context5.t0 = _context5["catch"](4);
                  this._connectionState = _HubConnectionState.Disconnected;
                  this._logger.log(_LogLevel.Debug, "HubConnection failed to start successfully because of error '".concat(_context5.t0, "'."));
                  return _context5.abrupt("return", Promise.reject(_context5.t0));
                case 18:
                case "end":
                  return _context5.stop();
              }
            }, _callee5, this, [[4, 13]]);
          }));
          function _startWithStateTransitions() {
            return _startWithStateTransitions2.apply(this, arguments);
          }
          return _startWithStateTransitions;
        }()
      }, {
        key: "_startInternal",
        value: function () {
          var _startInternal2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {
            var _this16 = this;
            var handshakePromise, version, handshakeRequest, useStatefulReconnect;
            return _regeneratorRuntime().wrap(function _callee6$(_context6) {
              while (1) switch (_context6.prev = _context6.next) {
                case 0:
                  this._stopDuringStartError = undefined;
                  this._receivedHandshakeResponse = false;
                  // Set up the promise before any connection is (re)started otherwise it could race with received messages
                  handshakePromise = new Promise(function (resolve, reject) {
                    _this16._handshakeResolver = resolve;
                    _this16._handshakeRejecter = reject;
                  });
                  _context6.next = 5;
                  return this.connection.start(this._protocol.transferFormat);
                case 5:
                  _context6.prev = 5;
                  version = this._protocol.version;
                  if (!this.connection.features.reconnect) {
                    // Stateful Reconnect starts with HubProtocol version 2, newer clients connecting to older servers will fail to connect due to
                    // the handshake only supporting version 1, so we will try to send version 1 during the handshake to keep old servers working.
                    version = 1;
                  }
                  handshakeRequest = {
                    protocol: this._protocol.name,
                    version: version
                  };
                  this._logger.log(_LogLevel.Debug, "Sending handshake request.");
                  _context6.next = 12;
                  return this._sendMessage(this._handshakeProtocol.writeHandshakeRequest(handshakeRequest));
                case 12:
                  this._logger.log(_LogLevel.Information, "Using HubProtocol '".concat(this._protocol.name, "'."));
                  // defensively cleanup timeout in case we receive a message from the server before we finish start
                  this._cleanupTimeout();
                  this._resetTimeoutPeriod();
                  this._resetKeepAliveInterval();
                  _context6.next = 18;
                  return handshakePromise;
                case 18:
                  if (!this._stopDuringStartError) {
                    _context6.next = 20;
                    break;
                  }
                  throw this._stopDuringStartError;
                case 20:
                  useStatefulReconnect = this.connection.features.reconnect || false;
                  if (useStatefulReconnect) {
                    this._messageBuffer = new MessageBuffer(this._protocol, this.connection, this._statefulReconnectBufferSize);
                    this.connection.features.disconnected = this._messageBuffer._disconnected.bind(this._messageBuffer);
                    this.connection.features.resend = function () {
                      if (_this16._messageBuffer) {
                        return _this16._messageBuffer._resend();
                      }
                    };
                  }
                  if (this.connection.features.inherentKeepAlive) {
                    _context6.next = 25;
                    break;
                  }
                  _context6.next = 25;
                  return this._sendMessage(this._cachedPingMessage);
                case 25:
                  _context6.next = 35;
                  break;
                case 27:
                  _context6.prev = 27;
                  _context6.t0 = _context6["catch"](5);
                  this._logger.log(_LogLevel.Debug, "Hub handshake failed with error '".concat(_context6.t0, "' during start(). Stopping HubConnection."));
                  this._cleanupTimeout();
                  this._cleanupPingTimer();
                  // HttpConnection.stop() should not complete until after the onclose callback is invoked.
                  // This will transition the HubConnection to the disconnected state before HttpConnection.stop() completes.
                  _context6.next = 34;
                  return this.connection.stop(_context6.t0);
                case 34:
                  throw _context6.t0;
                case 35:
                case "end":
                  return _context6.stop();
              }
            }, _callee6, this, [[5, 27]]);
          }));
          function _startInternal() {
            return _startInternal2.apply(this, arguments);
          }
          return _startInternal;
        }()
        /** Stops the connection.
         *
         * @returns {Promise<void>} A Promise that resolves when the connection has been successfully terminated, or rejects with an error.
         */
      }, {
        key: "stop",
        value: (function () {
          var _stop = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {
            var startPromise;
            return _regeneratorRuntime().wrap(function _callee7$(_context7) {
              while (1) switch (_context7.prev = _context7.next) {
                case 0:
                  // Capture the start promise before the connection might be restarted in an onclose callback.
                  startPromise = this._startPromise;
                  this.connection.features.reconnect = false;
                  this._stopPromise = this._stopInternal();
                  _context7.next = 5;
                  return this._stopPromise;
                case 5:
                  _context7.prev = 5;
                  _context7.next = 8;
                  return startPromise;
                case 8:
                  _context7.next = 12;
                  break;
                case 10:
                  _context7.prev = 10;
                  _context7.t0 = _context7["catch"](5);
                case 12:
                case "end":
                  return _context7.stop();
              }
            }, _callee7, this, [[5, 10]]);
          }));
          function stop() {
            return _stop.apply(this, arguments);
          }
          return stop;
        }())
      }, {
        key: "_stopInternal",
        value: function _stopInternal(error) {
          if (this._connectionState === _HubConnectionState.Disconnected) {
            this._logger.log(_LogLevel.Debug, "Call to HubConnection.stop(".concat(error, ") ignored because it is already in the disconnected state."));
            return Promise.resolve();
          }
          if (this._connectionState === _HubConnectionState.Disconnecting) {
            this._logger.log(_LogLevel.Debug, "Call to HttpConnection.stop(".concat(error, ") ignored because the connection is already in the disconnecting state."));
            return this._stopPromise;
          }
          var state = this._connectionState;
          this._connectionState = _HubConnectionState.Disconnecting;
          this._logger.log(_LogLevel.Debug, "Stopping HubConnection.");
          if (this._reconnectDelayHandle) {
            // We're in a reconnect delay which means the underlying connection is currently already stopped.
            // Just clear the handle to stop the reconnect loop (which no one is waiting on thankfully) and
            // fire the onclose callbacks.
            this._logger.log(_LogLevel.Debug, "Connection stopped during reconnect delay. Done reconnecting.");
            clearTimeout(this._reconnectDelayHandle);
            this._reconnectDelayHandle = undefined;
            this._completeClose();
            return Promise.resolve();
          }
          if (state === _HubConnectionState.Connected) {
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            this._sendCloseMessage();
          }
          this._cleanupTimeout();
          this._cleanupPingTimer();
          this._stopDuringStartError = error || new _AbortError("The connection was stopped before the hub handshake could complete.");
          // HttpConnection.stop() should not complete until after either HttpConnection.start() fails
          // or the onclose callback is invoked. The onclose callback will transition the HubConnection
          // to the disconnected state if need be before HttpConnection.stop() completes.
          return this.connection.stop(error);
        }
      }, {
        key: "_sendCloseMessage",
        value: function () {
          var _sendCloseMessage2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {
            return _regeneratorRuntime().wrap(function _callee8$(_context8) {
              while (1) switch (_context8.prev = _context8.next) {
                case 0:
                  _context8.prev = 0;
                  _context8.next = 3;
                  return this._sendWithProtocol(this._createCloseMessage());
                case 3:
                  _context8.next = 7;
                  break;
                case 5:
                  _context8.prev = 5;
                  _context8.t0 = _context8["catch"](0);
                case 7:
                case "end":
                  return _context8.stop();
              }
            }, _callee8, this, [[0, 5]]);
          }));
          function _sendCloseMessage() {
            return _sendCloseMessage2.apply(this, arguments);
          }
          return _sendCloseMessage;
        }()
        /** Invokes a streaming hub method on the server using the specified name and arguments.
         *
         * @typeparam T The type of the items returned by the server.
         * @param {string} methodName The name of the server method to invoke.
         * @param {any[]} args The arguments used to invoke the server method.
         * @returns {IStreamResult<T>} An object that yields results from the server as they are received.
         */
      }, {
        key: "stream",
        value: function stream(methodName) {
          var _this17 = this;
          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }
          var _this$_replaceStreami = this._replaceStreamingParams(args),
            _this$_replaceStreami2 = _slicedToArray(_this$_replaceStreami, 2),
            streams = _this$_replaceStreami2[0],
            streamIds = _this$_replaceStreami2[1];
          var invocationDescriptor = this._createStreamInvocation(methodName, args, streamIds);
          // eslint-disable-next-line prefer-const
          var promiseQueue;
          var subject = new _Subject();
          subject.cancelCallback = function () {
            var cancelInvocation = _this17._createCancelInvocation(invocationDescriptor.invocationId);
            delete _this17._callbacks[invocationDescriptor.invocationId];
            return promiseQueue.then(function () {
              return _this17._sendWithProtocol(cancelInvocation);
            });
          };
          this._callbacks[invocationDescriptor.invocationId] = function (invocationEvent, error) {
            if (error) {
              subject.error(error);
              return;
            } else if (invocationEvent) {
              // invocationEvent will not be null when an error is not passed to the callback
              if (invocationEvent.type === _MessageType.Completion) {
                if (invocationEvent.error) {
                  subject.error(new Error(invocationEvent.error));
                } else {
                  subject.complete();
                }
              } else {
                subject.next(invocationEvent.item);
              }
            }
          };
          promiseQueue = this._sendWithProtocol(invocationDescriptor)["catch"](function (e) {
            subject.error(e);
            delete _this17._callbacks[invocationDescriptor.invocationId];
          });
          this._launchStreams(streams, promiseQueue);
          return subject;
        }
      }, {
        key: "_sendMessage",
        value: function _sendMessage(message) {
          this._resetKeepAliveInterval();
          return this.connection.send(message);
        }
        /**
         * Sends a js object to the server.
         * @param message The js object to serialize and send.
         */
      }, {
        key: "_sendWithProtocol",
        value: function _sendWithProtocol(message) {
          if (this._messageBuffer) {
            return this._messageBuffer._send(message);
          } else {
            return this._sendMessage(this._protocol.writeMessage(message));
          }
        }
        /** Invokes a hub method on the server using the specified name and arguments. Does not wait for a response from the receiver.
         *
         * The Promise returned by this method resolves when the client has sent the invocation to the server. The server may still
         * be processing the invocation.
         *
         * @param {string} methodName The name of the server method to invoke.
         * @param {any[]} args The arguments used to invoke the server method.
         * @returns {Promise<void>} A Promise that resolves when the invocation has been successfully sent, or rejects with an error.
         */
      }, {
        key: "send",
        value: function send(methodName) {
          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
            args[_key2 - 1] = arguments[_key2];
          }
          var _this$_replaceStreami3 = this._replaceStreamingParams(args),
            _this$_replaceStreami4 = _slicedToArray(_this$_replaceStreami3, 2),
            streams = _this$_replaceStreami4[0],
            streamIds = _this$_replaceStreami4[1];
          var sendPromise = this._sendWithProtocol(this._createInvocation(methodName, args, true, streamIds));
          this._launchStreams(streams, sendPromise);
          return sendPromise;
        }
        /** Invokes a hub method on the server using the specified name and arguments.
         *
         * The Promise returned by this method resolves when the server indicates it has finished invoking the method. When the promise
         * resolves, the server has finished invoking the method. If the server method returns a result, it is produced as the result of
         * resolving the Promise.
         *
         * @typeparam T The expected return type.
         * @param {string} methodName The name of the server method to invoke.
         * @param {any[]} args The arguments used to invoke the server method.
         * @returns {Promise<T>} A Promise that resolves with the result of the server method (if any), or rejects with an error.
         */
      }, {
        key: "invoke",
        value: function invoke(methodName) {
          var _this18 = this;
          for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
            args[_key3 - 1] = arguments[_key3];
          }
          var _this$_replaceStreami5 = this._replaceStreamingParams(args),
            _this$_replaceStreami6 = _slicedToArray(_this$_replaceStreami5, 2),
            streams = _this$_replaceStreami6[0],
            streamIds = _this$_replaceStreami6[1];
          var invocationDescriptor = this._createInvocation(methodName, args, false, streamIds);
          var p = new Promise(function (resolve, reject) {
            // invocationId will always have a value for a non-blocking invocation
            _this18._callbacks[invocationDescriptor.invocationId] = function (invocationEvent, error) {
              if (error) {
                reject(error);
                return;
              } else if (invocationEvent) {
                // invocationEvent will not be null when an error is not passed to the callback
                if (invocationEvent.type === _MessageType.Completion) {
                  if (invocationEvent.error) {
                    reject(new Error(invocationEvent.error));
                  } else {
                    resolve(invocationEvent.result);
                  }
                } else {
                  reject(new Error("Unexpected message type: ".concat(invocationEvent.type)));
                }
              }
            };
            var promiseQueue = _this18._sendWithProtocol(invocationDescriptor)["catch"](function (e) {
              reject(e);
              // invocationId will always have a value for a non-blocking invocation
              delete _this18._callbacks[invocationDescriptor.invocationId];
            });
            _this18._launchStreams(streams, promiseQueue);
          });
          return p;
        }
      }, {
        key: "on",
        value: function on(methodName, newMethod) {
          if (!methodName || !newMethod) {
            return;
          }
          methodName = methodName.toLowerCase();
          if (!this._methods[methodName]) {
            this._methods[methodName] = [];
          }
          // Preventing adding the same handler multiple times.
          if (this._methods[methodName].indexOf(newMethod) !== -1) {
            return;
          }
          this._methods[methodName].push(newMethod);
        }
      }, {
        key: "off",
        value: function off(methodName, method) {
          if (!methodName) {
            return;
          }
          methodName = methodName.toLowerCase();
          var handlers = this._methods[methodName];
          if (!handlers) {
            return;
          }
          if (method) {
            var removeIdx = handlers.indexOf(method);
            if (removeIdx !== -1) {
              handlers.splice(removeIdx, 1);
              if (handlers.length === 0) {
                delete this._methods[methodName];
              }
            }
          } else {
            delete this._methods[methodName];
          }
        }
        /** Registers a handler that will be invoked when the connection is closed.
         *
         * @param {Function} callback The handler that will be invoked when the connection is closed. Optionally receives a single argument containing the error that caused the connection to close (if any).
         */
      }, {
        key: "onclose",
        value: function onclose(callback) {
          if (callback) {
            this._closedCallbacks.push(callback);
          }
        }
        /** Registers a handler that will be invoked when the connection starts reconnecting.
         *
         * @param {Function} callback The handler that will be invoked when the connection starts reconnecting. Optionally receives a single argument containing the error that caused the connection to start reconnecting (if any).
         */
      }, {
        key: "onreconnecting",
        value: function onreconnecting(callback) {
          if (callback) {
            this._reconnectingCallbacks.push(callback);
          }
        }
        /** Registers a handler that will be invoked when the connection successfully reconnects.
         *
         * @param {Function} callback The handler that will be invoked when the connection successfully reconnects.
         */
      }, {
        key: "onreconnected",
        value: function onreconnected(callback) {
          if (callback) {
            this._reconnectedCallbacks.push(callback);
          }
        }
      }, {
        key: "_processIncomingData",
        value: function _processIncomingData(data) {
          var _this19 = this;
          this._cleanupTimeout();
          if (!this._receivedHandshakeResponse) {
            data = this._processHandshakeResponse(data);
            this._receivedHandshakeResponse = true;
          }
          // Data may have all been read when processing handshake response
          if (data) {
            // Parse the messages
            var messages = this._protocol.parseMessages(data, this._logger);
            var _iterator6 = _createForOfIteratorHelper(messages),
              _step6;
            try {
              for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
                var message = _step6.value;
                if (this._messageBuffer && !this._messageBuffer._shouldProcessMessage(message)) {
                  // Don't process the message, we are either waiting for a SequenceMessage or received a duplicate message
                  continue;
                }
                switch (message.type) {
                  case _MessageType.Invocation:
                    this._invokeClientMethod(message)["catch"](function (e) {
                      _this19._logger.log(_LogLevel.Error, "Invoke client method threw error: ".concat(getErrorString(e)));
                    });
                    break;
                  case _MessageType.StreamItem:
                  case _MessageType.Completion:
                    {
                      var callback = this._callbacks[message.invocationId];
                      if (callback) {
                        if (message.type === _MessageType.Completion) {
                          delete this._callbacks[message.invocationId];
                        }
                        try {
                          callback(message);
                        } catch (e) {
                          this._logger.log(_LogLevel.Error, "Stream callback threw error: ".concat(getErrorString(e)));
                        }
                      }
                      break;
                    }
                  case _MessageType.Ping:
                    // Don't care about pings
                    break;
                  case _MessageType.Close:
                    {
                      this._logger.log(_LogLevel.Information, "Close message received from server.");
                      var error = message.error ? new Error("Server returned an error on close: " + message.error) : undefined;
                      if (message.allowReconnect === true) {
                        // It feels wrong not to await connection.stop() here, but processIncomingData is called as part of an onreceive callback which is not async,
                        // this is already the behavior for serverTimeout(), and HttpConnection.Stop() should catch and log all possible exceptions.
                        // eslint-disable-next-line @typescript-eslint/no-floating-promises
                        this.connection.stop(error);
                      } else {
                        // We cannot await stopInternal() here, but subsequent calls to stop() will await this if stopInternal() is still ongoing.
                        this._stopPromise = this._stopInternal(error);
                      }
                      break;
                    }
                  case _MessageType.Ack:
                    if (this._messageBuffer) {
                      this._messageBuffer._ack(message);
                    }
                    break;
                  case _MessageType.Sequence:
                    if (this._messageBuffer) {
                      this._messageBuffer._resetSequence(message);
                    }
                    break;
                  default:
                    this._logger.log(_LogLevel.Warning, "Invalid message type: ".concat(message.type, "."));
                    break;
                }
              }
            } catch (err) {
              _iterator6.e(err);
            } finally {
              _iterator6.f();
            }
          }
          this._resetTimeoutPeriod();
        }
      }, {
        key: "_processHandshakeResponse",
        value: function _processHandshakeResponse(data) {
          var responseMessage;
          var remainingData;
          try {
            var _this$_handshakeProto = this._handshakeProtocol.parseHandshakeResponse(data);
            var _this$_handshakeProto2 = _slicedToArray(_this$_handshakeProto, 2);
            remainingData = _this$_handshakeProto2[0];
            responseMessage = _this$_handshakeProto2[1];
          } catch (e) {
            var message = "Error parsing handshake response: " + e;
            this._logger.log(_LogLevel.Error, message);
            var error = new Error(message);
            this._handshakeRejecter(error);
            throw error;
          }
          if (responseMessage.error) {
            var _message2 = "Server returned handshake error: " + responseMessage.error;
            this._logger.log(_LogLevel.Error, _message2);
            var _error = new Error(_message2);
            this._handshakeRejecter(_error);
            throw _error;
          } else {
            this._logger.log(_LogLevel.Debug, "Server handshake complete.");
          }
          this._handshakeResolver();
          return remainingData;
        }
      }, {
        key: "_resetKeepAliveInterval",
        value: function _resetKeepAliveInterval() {
          if (this.connection.features.inherentKeepAlive) {
            return;
          }
          // Set the time we want the next keep alive to be sent
          // Timer will be setup on next message receive
          this._nextKeepAlive = new Date().getTime() + this.keepAliveIntervalInMilliseconds;
          this._cleanupPingTimer();
        }
      }, {
        key: "_resetTimeoutPeriod",
        value: function _resetTimeoutPeriod() {
          var _this20 = this;
          if (!this.connection.features || !this.connection.features.inherentKeepAlive) {
            // Set the timeout timer
            this._timeoutHandle = setTimeout(function () {
              return _this20.serverTimeout();
            }, this.serverTimeoutInMilliseconds);
            // Set keepAlive timer if there isn't one
            if (this._pingServerHandle === undefined) {
              var nextPing = this._nextKeepAlive - new Date().getTime();
              if (nextPing < 0) {
                nextPing = 0;
              }
              // The timer needs to be set from a networking callback to avoid Chrome timer throttling from causing timers to run once a minute
              this._pingServerHandle = setTimeout( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {
                return _regeneratorRuntime().wrap(function _callee9$(_context9) {
                  while (1) switch (_context9.prev = _context9.next) {
                    case 0:
                      if (!(_this20._connectionState === _HubConnectionState.Connected)) {
                        _context9.next = 9;
                        break;
                      }
                      _context9.prev = 1;
                      _context9.next = 4;
                      return _this20._sendMessage(_this20._cachedPingMessage);
                    case 4:
                      _context9.next = 9;
                      break;
                    case 6:
                      _context9.prev = 6;
                      _context9.t0 = _context9["catch"](1);
                      // We don't care about the error. It should be seen elsewhere in the client.
                      // The connection is probably in a bad or closed state now, cleanup the timer so it stops triggering
                      _this20._cleanupPingTimer();
                    case 9:
                    case "end":
                      return _context9.stop();
                  }
                }, _callee9, null, [[1, 6]]);
              })), nextPing);
            }
          }
        }
        // eslint-disable-next-line @typescript-eslint/naming-convention
      }, {
        key: "serverTimeout",
        value: function serverTimeout() {
          // The server hasn't talked to us in a while. It doesn't like us anymore ... :(
          // Terminate the connection, but we don't need to wait on the promise. This could trigger reconnecting.
          // eslint-disable-next-line @typescript-eslint/no-floating-promises
          this.connection.stop(new Error("Server timeout elapsed without receiving a message from the server."));
        }
      }, {
        key: "_invokeClientMethod",
        value: function () {
          var _invokeClientMethod2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(invocationMessage) {
            var methodName, methods, methodsCopy, expectsResponse, res, exception, completionMessage, _iterator7, _step7, m, prevRes;
            return _regeneratorRuntime().wrap(function _callee10$(_context10) {
              while (1) switch (_context10.prev = _context10.next) {
                case 0:
                  methodName = invocationMessage.target.toLowerCase();
                  methods = this._methods[methodName];
                  if (methods) {
                    _context10.next = 9;
                    break;
                  }
                  this._logger.log(_LogLevel.Warning, "No client method with the name '".concat(methodName, "' found."));
                  // No handlers provided by client but the server is expecting a response still, so we send an error
                  if (!invocationMessage.invocationId) {
                    _context10.next = 8;
                    break;
                  }
                  this._logger.log(_LogLevel.Warning, "No result given for '".concat(methodName, "' method and invocation ID '").concat(invocationMessage.invocationId, "'."));
                  _context10.next = 8;
                  return this._sendWithProtocol(this._createCompletionMessage(invocationMessage.invocationId, "Client didn't provide a result.", null));
                case 8:
                  return _context10.abrupt("return");
                case 9:
                  // Avoid issues with handlers removing themselves thus modifying the list while iterating through it
                  methodsCopy = methods.slice(); // Server expects a response
                  expectsResponse = invocationMessage.invocationId ? true : false; // We preserve the last result or exception but still call all handlers
                  _iterator7 = _createForOfIteratorHelper(methodsCopy);
                  _context10.prev = 12;
                  _iterator7.s();
                case 14:
                  if ((_step7 = _iterator7.n()).done) {
                    _context10.next = 31;
                    break;
                  }
                  m = _step7.value;
                  _context10.prev = 16;
                  prevRes = res;
                  _context10.next = 20;
                  return m.apply(this, invocationMessage.arguments);
                case 20:
                  res = _context10.sent;
                  if (expectsResponse && res && prevRes) {
                    this._logger.log(_LogLevel.Error, "Multiple results provided for '".concat(methodName, "'. Sending error to server."));
                    completionMessage = this._createCompletionMessage(invocationMessage.invocationId, "Client provided multiple results.", null);
                  }
                  // Ignore exception if we got a result after, the exception will be logged
                  exception = undefined;
                  _context10.next = 29;
                  break;
                case 25:
                  _context10.prev = 25;
                  _context10.t0 = _context10["catch"](16);
                  exception = _context10.t0;
                  this._logger.log(_LogLevel.Error, "A callback for the method '".concat(methodName, "' threw error '").concat(_context10.t0, "'."));
                case 29:
                  _context10.next = 14;
                  break;
                case 31:
                  _context10.next = 36;
                  break;
                case 33:
                  _context10.prev = 33;
                  _context10.t1 = _context10["catch"](12);
                  _iterator7.e(_context10.t1);
                case 36:
                  _context10.prev = 36;
                  _iterator7.f();
                  return _context10.finish(36);
                case 39:
                  if (!completionMessage) {
                    _context10.next = 44;
                    break;
                  }
                  _context10.next = 42;
                  return this._sendWithProtocol(completionMessage);
                case 42:
                  _context10.next = 51;
                  break;
                case 44:
                  if (!expectsResponse) {
                    _context10.next = 50;
                    break;
                  }
                  // If there is an exception that means either no result was given or a handler after a result threw
                  if (exception) {
                    completionMessage = this._createCompletionMessage(invocationMessage.invocationId, "".concat(exception), null);
                  } else if (res !== undefined) {
                    completionMessage = this._createCompletionMessage(invocationMessage.invocationId, null, res);
                  } else {
                    this._logger.log(_LogLevel.Warning, "No result given for '".concat(methodName, "' method and invocation ID '").concat(invocationMessage.invocationId, "'."));
                    // Client didn't provide a result or throw from a handler, server expects a response so we send an error
                    completionMessage = this._createCompletionMessage(invocationMessage.invocationId, "Client didn't provide a result.", null);
                  }
                  _context10.next = 48;
                  return this._sendWithProtocol(completionMessage);
                case 48:
                  _context10.next = 51;
                  break;
                case 50:
                  if (res) {
                    this._logger.log(_LogLevel.Error, "Result given for '".concat(methodName, "' method but server is not expecting a result."));
                  }
                case 51:
                case "end":
                  return _context10.stop();
              }
            }, _callee10, this, [[12, 33, 36, 39], [16, 25]]);
          }));
          function _invokeClientMethod(_x9) {
            return _invokeClientMethod2.apply(this, arguments);
          }
          return _invokeClientMethod;
        }()
      }, {
        key: "_connectionClosed",
        value: function _connectionClosed(error) {
          this._logger.log(_LogLevel.Debug, "HubConnection.connectionClosed(".concat(error, ") called while in state ").concat(this._connectionState, "."));
          // Triggering this.handshakeRejecter is insufficient because it could already be resolved without the continuation having run yet.
          this._stopDuringStartError = this._stopDuringStartError || error || new _AbortError("The underlying connection was closed before the hub handshake could complete.");
          // If the handshake is in progress, start will be waiting for the handshake promise, so we complete it.
          // If it has already completed, this should just noop.
          if (this._handshakeResolver) {
            this._handshakeResolver();
          }
          this._cancelCallbacksWithError(error || new Error("Invocation canceled due to the underlying connection being closed."));
          this._cleanupTimeout();
          this._cleanupPingTimer();
          if (this._connectionState === _HubConnectionState.Disconnecting) {
            this._completeClose(error);
          } else if (this._connectionState === _HubConnectionState.Connected && this._reconnectPolicy) {
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            this._reconnect(error);
          } else if (this._connectionState === _HubConnectionState.Connected) {
            this._completeClose(error);
          }
          // If none of the above if conditions were true were called the HubConnection must be in either:
          // 1. The Connecting state in which case the handshakeResolver will complete it and stopDuringStartError will fail it.
          // 2. The Reconnecting state in which case the handshakeResolver will complete it and stopDuringStartError will fail the current reconnect attempt
          //    and potentially continue the reconnect() loop.
          // 3. The Disconnected state in which case we're already done.
        }
      }, {
        key: "_completeClose",
        value: function _completeClose(error) {
          var _this21 = this;
          if (this._connectionStarted) {
            this._connectionState = _HubConnectionState.Disconnected;
            this._connectionStarted = false;
            if (this._messageBuffer) {
              this._messageBuffer._dispose(error !== null && error !== void 0 ? error : new Error("Connection closed."));
              this._messageBuffer = undefined;
            }
            if (Platform.isBrowser) {
              window.document.removeEventListener("freeze", this._freezeEventListener);
            }
            try {
              this._closedCallbacks.forEach(function (c) {
                return c.apply(_this21, [error]);
              });
            } catch (e) {
              this._logger.log(_LogLevel.Error, "An onclose callback called with error '".concat(error, "' threw error '").concat(e, "'."));
            }
          }
        }
      }, {
        key: "_reconnect",
        value: function () {
          var _reconnect2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(error) {
            var _this22 = this;
            var reconnectStartTime, previousReconnectAttempts, retryError, nextRetryDelay;
            return _regeneratorRuntime().wrap(function _callee11$(_context11) {
              while (1) switch (_context11.prev = _context11.next) {
                case 0:
                  reconnectStartTime = Date.now();
                  previousReconnectAttempts = 0;
                  retryError = error !== undefined ? error : new Error("Attempting to reconnect due to a unknown error.");
                  nextRetryDelay = this._getNextRetryDelay(previousReconnectAttempts++, 0, retryError);
                  if (!(nextRetryDelay === null)) {
                    _context11.next = 8;
                    break;
                  }
                  this._logger.log(_LogLevel.Debug, "Connection not reconnecting because the IRetryPolicy returned null on the first reconnect attempt.");
                  this._completeClose(error);
                  return _context11.abrupt("return");
                case 8:
                  this._connectionState = _HubConnectionState.Reconnecting;
                  if (error) {
                    this._logger.log(_LogLevel.Information, "Connection reconnecting because of error '".concat(error, "'."));
                  } else {
                    this._logger.log(_LogLevel.Information, "Connection reconnecting.");
                  }
                  if (!(this._reconnectingCallbacks.length !== 0)) {
                    _context11.next = 15;
                    break;
                  }
                  try {
                    this._reconnectingCallbacks.forEach(function (c) {
                      return c.apply(_this22, [error]);
                    });
                  } catch (e) {
                    this._logger.log(_LogLevel.Error, "An onreconnecting callback called with error '".concat(error, "' threw error '").concat(e, "'."));
                  }
                  // Exit early if an onreconnecting callback called connection.stop().
                  if (!(this._connectionState !== _HubConnectionState.Reconnecting)) {
                    _context11.next = 15;
                    break;
                  }
                  this._logger.log(_LogLevel.Debug, "Connection left the reconnecting state in onreconnecting callback. Done reconnecting.");
                  return _context11.abrupt("return");
                case 15:
                  if (!(nextRetryDelay !== null)) {
                    _context11.next = 43;
                    break;
                  }
                  this._logger.log(_LogLevel.Information, "Reconnect attempt number ".concat(previousReconnectAttempts, " will start in ").concat(nextRetryDelay, " ms."));
                  _context11.next = 19;
                  return new Promise(function (resolve) {
                    _this22._reconnectDelayHandle = setTimeout(resolve, nextRetryDelay);
                  });
                case 19:
                  this._reconnectDelayHandle = undefined;
                  if (!(this._connectionState !== _HubConnectionState.Reconnecting)) {
                    _context11.next = 23;
                    break;
                  }
                  this._logger.log(_LogLevel.Debug, "Connection left the reconnecting state during reconnect delay. Done reconnecting.");
                  return _context11.abrupt("return");
                case 23:
                  _context11.prev = 23;
                  _context11.next = 26;
                  return this._startInternal();
                case 26:
                  this._connectionState = _HubConnectionState.Connected;
                  this._logger.log(_LogLevel.Information, "HubConnection reconnected successfully.");
                  if (this._reconnectedCallbacks.length !== 0) {
                    try {
                      this._reconnectedCallbacks.forEach(function (c) {
                        return c.apply(_this22, [_this22.connection.connectionId]);
                      });
                    } catch (e) {
                      this._logger.log(_LogLevel.Error, "An onreconnected callback called with connectionId '".concat(this.connection.connectionId, "; threw error '").concat(e, "'."));
                    }
                  }
                  return _context11.abrupt("return");
                case 32:
                  _context11.prev = 32;
                  _context11.t0 = _context11["catch"](23);
                  this._logger.log(_LogLevel.Information, "Reconnect attempt failed because of error '".concat(_context11.t0, "'."));
                  if (!(this._connectionState !== _HubConnectionState.Reconnecting)) {
                    _context11.next = 39;
                    break;
                  }
                  this._logger.log(_LogLevel.Debug, "Connection moved to the '".concat(this._connectionState, "' from the reconnecting state during reconnect attempt. Done reconnecting."));
                  // The TypeScript compiler thinks that connectionState must be Connected here. The TypeScript compiler is wrong.
                  if (this._connectionState === _HubConnectionState.Disconnecting) {
                    this._completeClose();
                  }
                  return _context11.abrupt("return");
                case 39:
                  retryError = _context11.t0 instanceof Error ? _context11.t0 : new Error(_context11.t0.toString());
                  nextRetryDelay = this._getNextRetryDelay(previousReconnectAttempts++, Date.now() - reconnectStartTime, retryError);
                case 41:
                  _context11.next = 15;
                  break;
                case 43:
                  this._logger.log(_LogLevel.Information, "Reconnect retries have been exhausted after ".concat(Date.now() - reconnectStartTime, " ms and ").concat(previousReconnectAttempts, " failed attempts. Connection disconnecting."));
                  this._completeClose();
                case 45:
                case "end":
                  return _context11.stop();
              }
            }, _callee11, this, [[23, 32]]);
          }));
          function _reconnect(_x10) {
            return _reconnect2.apply(this, arguments);
          }
          return _reconnect;
        }()
      }, {
        key: "_getNextRetryDelay",
        value: function _getNextRetryDelay(previousRetryCount, elapsedMilliseconds, retryReason) {
          try {
            return this._reconnectPolicy.nextRetryDelayInMilliseconds({
              elapsedMilliseconds: elapsedMilliseconds,
              previousRetryCount: previousRetryCount,
              retryReason: retryReason
            });
          } catch (e) {
            this._logger.log(_LogLevel.Error, "IRetryPolicy.nextRetryDelayInMilliseconds(".concat(previousRetryCount, ", ").concat(elapsedMilliseconds, ") threw error '").concat(e, "'."));
            return null;
          }
        }
      }, {
        key: "_cancelCallbacksWithError",
        value: function _cancelCallbacksWithError(error) {
          var _this23 = this;
          var callbacks = this._callbacks;
          this._callbacks = {};
          Object.keys(callbacks).forEach(function (key) {
            var callback = callbacks[key];
            try {
              callback(null, error);
            } catch (e) {
              _this23._logger.log(_LogLevel.Error, "Stream 'error' callback called with '".concat(error, "' threw error: ").concat(getErrorString(e)));
            }
          });
        }
      }, {
        key: "_cleanupPingTimer",
        value: function _cleanupPingTimer() {
          if (this._pingServerHandle) {
            clearTimeout(this._pingServerHandle);
            this._pingServerHandle = undefined;
          }
        }
      }, {
        key: "_cleanupTimeout",
        value: function _cleanupTimeout() {
          if (this._timeoutHandle) {
            clearTimeout(this._timeoutHandle);
          }
        }
      }, {
        key: "_createInvocation",
        value: function _createInvocation(methodName, args, nonblocking, streamIds) {
          if (nonblocking) {
            if (streamIds.length !== 0) {
              return {
                arguments: args,
                streamIds: streamIds,
                target: methodName,
                type: _MessageType.Invocation
              };
            } else {
              return {
                arguments: args,
                target: methodName,
                type: _MessageType.Invocation
              };
            }
          } else {
            var invocationId = this._invocationId;
            this._invocationId++;
            if (streamIds.length !== 0) {
              return {
                arguments: args,
                invocationId: invocationId.toString(),
                streamIds: streamIds,
                target: methodName,
                type: _MessageType.Invocation
              };
            } else {
              return {
                arguments: args,
                invocationId: invocationId.toString(),
                target: methodName,
                type: _MessageType.Invocation
              };
            }
          }
        }
      }, {
        key: "_launchStreams",
        value: function _launchStreams(streams, promiseQueue) {
          var _this24 = this;
          if (streams.length === 0) {
            return;
          }
          // Synchronize stream data so they arrive in-order on the server
          if (!promiseQueue) {
            promiseQueue = Promise.resolve();
          }
          // We want to iterate over the keys, since the keys are the stream ids
          // eslint-disable-next-line guard-for-in
          var _loop = function _loop(streamId) {
            streams[streamId].subscribe({
              complete: function complete() {
                promiseQueue = promiseQueue.then(function () {
                  return _this24._sendWithProtocol(_this24._createCompletionMessage(streamId));
                });
              },
              error: function error(err) {
                var message;
                if (err instanceof Error) {
                  message = err.message;
                } else if (err && err.toString) {
                  message = err.toString();
                } else {
                  message = "Unknown error";
                }
                promiseQueue = promiseQueue.then(function () {
                  return _this24._sendWithProtocol(_this24._createCompletionMessage(streamId, message));
                });
              },
              next: function next(item) {
                promiseQueue = promiseQueue.then(function () {
                  return _this24._sendWithProtocol(_this24._createStreamItemMessage(streamId, item));
                });
              }
            });
          };
          for (var streamId in streams) {
            _loop(streamId);
          }
        }
      }, {
        key: "_replaceStreamingParams",
        value: function _replaceStreamingParams(args) {
          var streams = [];
          var streamIds = [];
          for (var i = 0; i < args.length; i++) {
            var argument = args[i];
            if (this._isObservable(argument)) {
              var streamId = this._invocationId;
              this._invocationId++;
              // Store the stream for later use
              streams[streamId] = argument;
              streamIds.push(streamId.toString());
              // remove stream from args
              args.splice(i, 1);
            }
          }
          return [streams, streamIds];
        }
      }, {
        key: "_isObservable",
        value: function _isObservable(arg) {
          // This allows other stream implementations to just work (like rxjs)
          return arg && arg.subscribe && typeof arg.subscribe === "function";
        }
      }, {
        key: "_createStreamInvocation",
        value: function _createStreamInvocation(methodName, args, streamIds) {
          var invocationId = this._invocationId;
          this._invocationId++;
          if (streamIds.length !== 0) {
            return {
              arguments: args,
              invocationId: invocationId.toString(),
              streamIds: streamIds,
              target: methodName,
              type: _MessageType.StreamInvocation
            };
          } else {
            return {
              arguments: args,
              invocationId: invocationId.toString(),
              target: methodName,
              type: _MessageType.StreamInvocation
            };
          }
        }
      }, {
        key: "_createCancelInvocation",
        value: function _createCancelInvocation(id) {
          return {
            invocationId: id,
            type: _MessageType.CancelInvocation
          };
        }
      }, {
        key: "_createStreamItemMessage",
        value: function _createStreamItemMessage(id, item) {
          return {
            invocationId: id,
            item: item,
            type: _MessageType.StreamItem
          };
        }
      }, {
        key: "_createCompletionMessage",
        value: function _createCompletionMessage(id, error, result) {
          if (error) {
            return {
              error: error,
              invocationId: id,
              type: _MessageType.Completion
            };
          }
          return {
            invocationId: id,
            result: result,
            type: _MessageType.Completion
          };
        }
      }, {
        key: "_createCloseMessage",
        value: function _createCloseMessage() {
          return {
            type: _MessageType.Close
          };
        }
      }], [{
        key: "create",
        value: /** @internal */
        // Using a public static factory method means we can have a private constructor and an _internal_
        // create method that can be used by HubConnectionBuilder. An "internal" constructor would just
        // be stripped away and the '.d.ts' file would have no constructor, which is interpreted as a
        // public parameter-less constructor.
        function create(connection, logger, protocol, reconnectPolicy, serverTimeoutInMilliseconds, keepAliveIntervalInMilliseconds, statefulReconnectBufferSize) {
          return new _HubConnection(connection, logger, protocol, reconnectPolicy, serverTimeoutInMilliseconds, keepAliveIntervalInMilliseconds, statefulReconnectBufferSize);
        }
      }]);
    }();
    ; // CONCATENATED MODULE: ./src/DefaultReconnectPolicy.ts
    // Licensed to the .NET Foundation under one or more agreements.
    // The .NET Foundation licenses this file to you under the MIT license.
    // 0, 2, 10, 30 second delays before reconnect attempts.
    var DEFAULT_RETRY_DELAYS_IN_MILLISECONDS = [0, 2000, 10000, 30000, null];
    /** @private */
    var DefaultReconnectPolicy = /*#__PURE__*/function () {
      function DefaultReconnectPolicy(retryDelays) {
        _classCallCheck(this, DefaultReconnectPolicy);
        this._retryDelays = retryDelays !== undefined ? [].concat(_toConsumableArray(retryDelays), [null]) : DEFAULT_RETRY_DELAYS_IN_MILLISECONDS;
      }
      return _createClass(DefaultReconnectPolicy, [{
        key: "nextRetryDelayInMilliseconds",
        value: function nextRetryDelayInMilliseconds(retryContext) {
          return this._retryDelays[retryContext.previousRetryCount];
        }
      }]);
    }();
    ; // CONCATENATED MODULE: ./src/HeaderNames.ts
    // Licensed to the .NET Foundation under one or more agreements.
    // The .NET Foundation licenses this file to you under the MIT license.
    var HeaderNames = /*#__PURE__*/_createClass(function HeaderNames() {
      _classCallCheck(this, HeaderNames);
    });
    HeaderNames.Authorization = "Authorization";
    HeaderNames.Cookie = "Cookie";
    ; // CONCATENATED MODULE: ./src/AccessTokenHttpClient.ts
    // Licensed to the .NET Foundation under one or more agreements.
    // The .NET Foundation licenses this file to you under the MIT license.

    /** @private */
    var AccessTokenHttpClient = /*#__PURE__*/function (_HttpClient5) {
      function AccessTokenHttpClient(innerClient, accessTokenFactory) {
        var _this25;
        _classCallCheck(this, AccessTokenHttpClient);
        _this25 = _callSuper(this, AccessTokenHttpClient);
        _this25._innerClient = innerClient;
        _this25._accessTokenFactory = accessTokenFactory;
        return _this25;
      }
      _inherits(AccessTokenHttpClient, _HttpClient5);
      return _createClass(AccessTokenHttpClient, [{
        key: "send",
        value: function () {
          var _send3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(request) {
            var allowRetry, response;
            return _regeneratorRuntime().wrap(function _callee12$(_context12) {
              while (1) switch (_context12.prev = _context12.next) {
                case 0:
                  allowRetry = true;
                  if (!(this._accessTokenFactory && (!this._accessToken || request.url && request.url.indexOf("/negotiate?") > 0))) {
                    _context12.next = 6;
                    break;
                  }
                  // don't retry if the request is a negotiate or if we just got a potentially new token from the access token factory
                  allowRetry = false;
                  _context12.next = 5;
                  return this._accessTokenFactory();
                case 5:
                  this._accessToken = _context12.sent;
                case 6:
                  this._setAuthorizationHeader(request);
                  _context12.next = 9;
                  return this._innerClient.send(request);
                case 9:
                  response = _context12.sent;
                  if (!(allowRetry && response.statusCode === 401 && this._accessTokenFactory)) {
                    _context12.next = 18;
                    break;
                  }
                  _context12.next = 13;
                  return this._accessTokenFactory();
                case 13:
                  this._accessToken = _context12.sent;
                  this._setAuthorizationHeader(request);
                  _context12.next = 17;
                  return this._innerClient.send(request);
                case 17:
                  return _context12.abrupt("return", _context12.sent);
                case 18:
                  return _context12.abrupt("return", response);
                case 19:
                case "end":
                  return _context12.stop();
              }
            }, _callee12, this);
          }));
          function send(_x11) {
            return _send3.apply(this, arguments);
          }
          return send;
        }()
      }, {
        key: "_setAuthorizationHeader",
        value: function _setAuthorizationHeader(request) {
          if (!request.headers) {
            request.headers = {};
          }
          if (this._accessToken) {
            request.headers[HeaderNames.Authorization] = "Bearer ".concat(this._accessToken);
          }
          // don't remove the header if there isn't an access token factory, the user manually added the header in this case
          else if (this._accessTokenFactory) {
            if (request.headers[HeaderNames.Authorization]) {
              delete request.headers[HeaderNames.Authorization];
            }
          }
        }
      }, {
        key: "getCookieString",
        value: function getCookieString(url) {
          return this._innerClient.getCookieString(url);
        }
      }]);
    }(_HttpClient);
    ; // CONCATENATED MODULE: ./src/ITransport.ts
    // Licensed to the .NET Foundation under one or more agreements.
    // The .NET Foundation licenses this file to you under the MIT license.
    // This will be treated as a bit flag in the future, so we keep it using power-of-two values.
    /** Specifies a specific HTTP transport type. */
    var _HttpTransportType;
    (function (HttpTransportType) {
      /** Specifies no transport preference. */
      HttpTransportType[HttpTransportType["None"] = 0] = "None";
      /** Specifies the WebSockets transport. */
      HttpTransportType[HttpTransportType["WebSockets"] = 1] = "WebSockets";
      /** Specifies the Server-Sent Events transport. */
      HttpTransportType[HttpTransportType["ServerSentEvents"] = 2] = "ServerSentEvents";
      /** Specifies the Long Polling transport. */
      HttpTransportType[HttpTransportType["LongPolling"] = 4] = "LongPolling";
    })(_HttpTransportType || (_HttpTransportType = {}));
    /** Specifies the transfer format for a connection. */
    var _TransferFormat;
    (function (TransferFormat) {
      /** Specifies that only text data will be transmitted over the connection. */
      TransferFormat[TransferFormat["Text"] = 1] = "Text";
      /** Specifies that binary data will be transmitted over the connection. */
      TransferFormat[TransferFormat["Binary"] = 2] = "Binary";
    })(_TransferFormat || (_TransferFormat = {}));
    ; // CONCATENATED MODULE: ./src/AbortController.ts
    // Licensed to the .NET Foundation under one or more agreements.
    // The .NET Foundation licenses this file to you under the MIT license.
    // Rough polyfill of https://developer.mozilla.org/en-US/docs/Web/API/AbortController
    // We don't actually ever use the API being polyfilled, we always use the polyfill because
    // it's a very new API right now.
    // Not exported from index.
    /** @private */
    var AbortController_AbortController = /*#__PURE__*/function () {
      function AbortController_AbortController() {
        _classCallCheck(this, AbortController_AbortController);
        this._isAborted = false;
        this.onabort = null;
      }
      return _createClass(AbortController_AbortController, [{
        key: "abort",
        value: function abort() {
          if (!this._isAborted) {
            this._isAborted = true;
            if (this.onabort) {
              this.onabort();
            }
          }
        }
      }, {
        key: "signal",
        get: function get() {
          return this;
        }
      }, {
        key: "aborted",
        get: function get() {
          return this._isAborted;
        }
      }]);
    }();
    ; // CONCATENATED MODULE: ./src/LongPollingTransport.ts
    // Licensed to the .NET Foundation under one or more agreements.
    // The .NET Foundation licenses this file to you under the MIT license.

    // Not exported from 'index', this type is internal.
    /** @private */
    var LongPollingTransport = /*#__PURE__*/function () {
      function LongPollingTransport(httpClient, logger, options) {
        _classCallCheck(this, LongPollingTransport);
        this._httpClient = httpClient;
        this._logger = logger;
        this._pollAbort = new AbortController_AbortController();
        this._options = options;
        this._running = false;
        this.onreceive = null;
        this.onclose = null;
      }
      return _createClass(LongPollingTransport, [{
        key: "pollAborted",
        get:
        // This is an internal type, not exported from 'index' so this is really just internal.
        function get() {
          return this._pollAbort.aborted;
        }
      }, {
        key: "connect",
        value: function () {
          var _connect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13(url, transferFormat) {
            var _getUserAgentHeader, _getUserAgentHeader2, name, value, headers, pollOptions, pollUrl, response;
            return _regeneratorRuntime().wrap(function _callee13$(_context13) {
              while (1) switch (_context13.prev = _context13.next) {
                case 0:
                  Arg.isRequired(url, "url");
                  Arg.isRequired(transferFormat, "transferFormat");
                  Arg.isIn(transferFormat, _TransferFormat, "transferFormat");
                  this._url = url;
                  this._logger.log(_LogLevel.Trace, "(LongPolling transport) Connecting.");
                  // Allow binary format on Node and Browsers that support binary content (indicated by the presence of responseType property)
                  if (!(transferFormat === _TransferFormat.Binary && typeof XMLHttpRequest !== "undefined" && typeof new XMLHttpRequest().responseType !== "string")) {
                    _context13.next = 7;
                    break;
                  }
                  throw new Error("Binary protocols over XmlHttpRequest not implementing advanced features are not supported.");
                case 7:
                  _getUserAgentHeader = getUserAgentHeader(), _getUserAgentHeader2 = _slicedToArray(_getUserAgentHeader, 2), name = _getUserAgentHeader2[0], value = _getUserAgentHeader2[1];
                  headers = _objectSpread(_defineProperty({}, name, value), this._options.headers);
                  pollOptions = {
                    abortSignal: this._pollAbort.signal,
                    headers: headers,
                    timeout: 100000,
                    withCredentials: this._options.withCredentials
                  };
                  if (transferFormat === _TransferFormat.Binary) {
                    pollOptions.responseType = "arraybuffer";
                  }
                  // Make initial long polling request
                  // Server uses first long polling request to finish initializing connection and it returns without data
                  pollUrl = "".concat(url, "&_=").concat(Date.now());
                  this._logger.log(_LogLevel.Trace, "(LongPolling transport) polling: ".concat(pollUrl, "."));
                  _context13.next = 15;
                  return this._httpClient.get(pollUrl, pollOptions);
                case 15:
                  response = _context13.sent;
                  if (response.statusCode !== 200) {
                    this._logger.log(_LogLevel.Error, "(LongPolling transport) Unexpected response code: ".concat(response.statusCode, "."));
                    // Mark running as false so that the poll immediately ends and runs the close logic
                    this._closeError = new _HttpError(response.statusText || "", response.statusCode);
                    this._running = false;
                  } else {
                    this._running = true;
                  }
                  this._receiving = this._poll(this._url, pollOptions);
                case 18:
                case "end":
                  return _context13.stop();
              }
            }, _callee13, this);
          }));
          function connect(_x12, _x13) {
            return _connect.apply(this, arguments);
          }
          return connect;
        }()
      }, {
        key: "_poll",
        value: function () {
          var _poll2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14(url, pollOptions) {
            var pollUrl, response;
            return _regeneratorRuntime().wrap(function _callee14$(_context14) {
              while (1) switch (_context14.prev = _context14.next) {
                case 0:
                  _context14.prev = 0;
                case 1:
                  if (!this._running) {
                    _context14.next = 16;
                    break;
                  }
                  _context14.prev = 2;
                  pollUrl = "".concat(url, "&_=").concat(Date.now());
                  this._logger.log(_LogLevel.Trace, "(LongPolling transport) polling: ".concat(pollUrl, "."));
                  _context14.next = 7;
                  return this._httpClient.get(pollUrl, pollOptions);
                case 7:
                  response = _context14.sent;
                  if (response.statusCode === 204) {
                    this._logger.log(_LogLevel.Information, "(LongPolling transport) Poll terminated by server.");
                    this._running = false;
                  } else if (response.statusCode !== 200) {
                    this._logger.log(_LogLevel.Error, "(LongPolling transport) Unexpected response code: ".concat(response.statusCode, "."));
                    // Unexpected status code
                    this._closeError = new _HttpError(response.statusText || "", response.statusCode);
                    this._running = false;
                  } else {
                    // Process the response
                    if (response.content) {
                      this._logger.log(_LogLevel.Trace, "(LongPolling transport) data received. ".concat(getDataDetail(response.content, this._options.logMessageContent), "."));
                      if (this.onreceive) {
                        this.onreceive(response.content);
                      }
                    } else {
                      // This is another way timeout manifest.
                      this._logger.log(_LogLevel.Trace, "(LongPolling transport) Poll timed out, reissuing.");
                    }
                  }
                  _context14.next = 14;
                  break;
                case 11:
                  _context14.prev = 11;
                  _context14.t0 = _context14["catch"](2);
                  if (!this._running) {
                    // Log but disregard errors that occur after stopping
                    this._logger.log(_LogLevel.Trace, "(LongPolling transport) Poll errored after shutdown: ".concat(_context14.t0.message));
                  } else {
                    if (_context14.t0 instanceof _TimeoutError) {
                      // Ignore timeouts and reissue the poll.
                      this._logger.log(_LogLevel.Trace, "(LongPolling transport) Poll timed out, reissuing.");
                    } else {
                      // Close the connection with the error as the result.
                      this._closeError = _context14.t0;
                      this._running = false;
                    }
                  }
                case 14:
                  _context14.next = 1;
                  break;
                case 16:
                  _context14.prev = 16;
                  this._logger.log(_LogLevel.Trace, "(LongPolling transport) Polling complete.");
                  // We will reach here with pollAborted==false when the server returned a response causing the transport to stop.
                  // If pollAborted==true then client initiated the stop and the stop method will raise the close event after DELETE is sent.
                  if (!this.pollAborted) {
                    this._raiseOnClose();
                  }
                  return _context14.finish(16);
                case 20:
                case "end":
                  return _context14.stop();
              }
            }, _callee14, this, [[0,, 16, 20], [2, 11]]);
          }));
          function _poll(_x14, _x15) {
            return _poll2.apply(this, arguments);
          }
          return _poll;
        }()
      }, {
        key: "send",
        value: function () {
          var _send4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15(data) {
            return _regeneratorRuntime().wrap(function _callee15$(_context15) {
              while (1) switch (_context15.prev = _context15.next) {
                case 0:
                  if (this._running) {
                    _context15.next = 2;
                    break;
                  }
                  return _context15.abrupt("return", Promise.reject(new Error("Cannot send until the transport is connected")));
                case 2:
                  return _context15.abrupt("return", sendMessage(this._logger, "LongPolling", this._httpClient, this._url, data, this._options));
                case 3:
                case "end":
                  return _context15.stop();
              }
            }, _callee15, this);
          }));
          function send(_x16) {
            return _send4.apply(this, arguments);
          }
          return send;
        }()
      }, {
        key: "stop",
        value: function () {
          var _stop2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee16() {
            var headers, _getUserAgentHeader3, _getUserAgentHeader4, name, value, deleteOptions, error;
            return _regeneratorRuntime().wrap(function _callee16$(_context16) {
              while (1) switch (_context16.prev = _context16.next) {
                case 0:
                  this._logger.log(_LogLevel.Trace, "(LongPolling transport) Stopping polling.");
                  // Tell receiving loop to stop, abort any current request, and then wait for it to finish
                  this._running = false;
                  this._pollAbort.abort();
                  _context16.prev = 3;
                  _context16.next = 6;
                  return this._receiving;
                case 6:
                  // Send DELETE to clean up long polling on the server
                  this._logger.log(_LogLevel.Trace, "(LongPolling transport) sending DELETE request to ".concat(this._url, "."));
                  headers = {};
                  _getUserAgentHeader3 = getUserAgentHeader(), _getUserAgentHeader4 = _slicedToArray(_getUserAgentHeader3, 2), name = _getUserAgentHeader4[0], value = _getUserAgentHeader4[1];
                  headers[name] = value;
                  deleteOptions = {
                    headers: _objectSpread(_objectSpread({}, headers), this._options.headers),
                    timeout: this._options.timeout,
                    withCredentials: this._options.withCredentials
                  };
                  _context16.prev = 11;
                  _context16.next = 14;
                  return this._httpClient["delete"](this._url, deleteOptions);
                case 14:
                  _context16.next = 19;
                  break;
                case 16:
                  _context16.prev = 16;
                  _context16.t0 = _context16["catch"](11);
                  error = _context16.t0;
                case 19:
                  if (error) {
                    if (error instanceof _HttpError) {
                      if (error.statusCode === 404) {
                        this._logger.log(_LogLevel.Trace, "(LongPolling transport) A 404 response was returned from sending a DELETE request.");
                      } else {
                        this._logger.log(_LogLevel.Trace, "(LongPolling transport) Error sending a DELETE request: ".concat(error));
                      }
                    }
                  } else {
                    this._logger.log(_LogLevel.Trace, "(LongPolling transport) DELETE request accepted.");
                  }
                case 20:
                  _context16.prev = 20;
                  this._logger.log(_LogLevel.Trace, "(LongPolling transport) Stop finished.");
                  // Raise close event here instead of in polling
                  // It needs to happen after the DELETE request is sent
                  this._raiseOnClose();
                  return _context16.finish(20);
                case 24:
                case "end":
                  return _context16.stop();
              }
            }, _callee16, this, [[3,, 20, 24], [11, 16]]);
          }));
          function stop() {
            return _stop2.apply(this, arguments);
          }
          return stop;
        }()
      }, {
        key: "_raiseOnClose",
        value: function _raiseOnClose() {
          if (this.onclose) {
            var logMessage = "(LongPolling transport) Firing onclose event.";
            if (this._closeError) {
              logMessage += " Error: " + this._closeError;
            }
            this._logger.log(_LogLevel.Trace, logMessage);
            this.onclose(this._closeError);
          }
        }
      }]);
    }();
    ; // CONCATENATED MODULE: ./src/ServerSentEventsTransport.ts
    // Licensed to the .NET Foundation under one or more agreements.
    // The .NET Foundation licenses this file to you under the MIT license.

    /** @private */
    var ServerSentEventsTransport = /*#__PURE__*/function () {
      function ServerSentEventsTransport(httpClient, accessToken, logger, options) {
        _classCallCheck(this, ServerSentEventsTransport);
        this._httpClient = httpClient;
        this._accessToken = accessToken;
        this._logger = logger;
        this._options = options;
        this.onreceive = null;
        this.onclose = null;
      }
      return _createClass(ServerSentEventsTransport, [{
        key: "connect",
        value: function () {
          var _connect2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee17(url, transferFormat) {
            var _this26 = this;
            return _regeneratorRuntime().wrap(function _callee17$(_context17) {
              while (1) switch (_context17.prev = _context17.next) {
                case 0:
                  Arg.isRequired(url, "url");
                  Arg.isRequired(transferFormat, "transferFormat");
                  Arg.isIn(transferFormat, _TransferFormat, "transferFormat");
                  this._logger.log(_LogLevel.Trace, "(SSE transport) Connecting.");
                  // set url before accessTokenFactory because this._url is only for send and we set the auth header instead of the query string for send
                  this._url = url;
                  if (this._accessToken) {
                    url += (url.indexOf("?") < 0 ? "?" : "&") + "access_token=".concat(encodeURIComponent(this._accessToken));
                  }
                  return _context17.abrupt("return", new Promise(function (resolve, reject) {
                    var opened = false;
                    if (transferFormat !== _TransferFormat.Text) {
                      reject(new Error("The Server-Sent Events transport only supports the 'Text' transfer format"));
                      return;
                    }
                    var eventSource;
                    if (Platform.isBrowser || Platform.isWebWorker) {
                      eventSource = new _this26._options.EventSource(url, {
                        withCredentials: _this26._options.withCredentials
                      });
                    } else {
                      // Non-browser passes cookies via the dictionary
                      var cookies = _this26._httpClient.getCookieString(url);
                      var headers = {};
                      headers.Cookie = cookies;
                      var _getUserAgentHeader5 = getUserAgentHeader(),
                        _getUserAgentHeader6 = _slicedToArray(_getUserAgentHeader5, 2),
                        name = _getUserAgentHeader6[0],
                        value = _getUserAgentHeader6[1];
                      headers[name] = value;
                      eventSource = new _this26._options.EventSource(url, {
                        withCredentials: _this26._options.withCredentials,
                        headers: _objectSpread(_objectSpread({}, headers), _this26._options.headers)
                      });
                    }
                    try {
                      eventSource.onmessage = function (e) {
                        if (_this26.onreceive) {
                          try {
                            _this26._logger.log(_LogLevel.Trace, "(SSE transport) data received. ".concat(getDataDetail(e.data, _this26._options.logMessageContent), "."));
                            _this26.onreceive(e.data);
                          } catch (error) {
                            _this26._close(error);
                            return;
                          }
                        }
                      };
                      // @ts-ignore: not using event on purpose
                      eventSource.onerror = function (e) {
                        // EventSource doesn't give any useful information about server side closes.
                        if (opened) {
                          _this26._close();
                        } else {
                          reject(new Error("EventSource failed to connect. The connection could not be found on the server," + " either the connection ID is not present on the server, or a proxy is refusing/buffering the connection." + " If you have multiple servers check that sticky sessions are enabled."));
                        }
                      };
                      eventSource.onopen = function () {
                        _this26._logger.log(_LogLevel.Information, "SSE connected to ".concat(_this26._url));
                        _this26._eventSource = eventSource;
                        opened = true;
                        resolve();
                      };
                    } catch (e) {
                      reject(e);
                      return;
                    }
                  }));
                case 7:
                case "end":
                  return _context17.stop();
              }
            }, _callee17, this);
          }));
          function connect(_x17, _x18) {
            return _connect2.apply(this, arguments);
          }
          return connect;
        }()
      }, {
        key: "send",
        value: function () {
          var _send5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee18(data) {
            return _regeneratorRuntime().wrap(function _callee18$(_context18) {
              while (1) switch (_context18.prev = _context18.next) {
                case 0:
                  if (this._eventSource) {
                    _context18.next = 2;
                    break;
                  }
                  return _context18.abrupt("return", Promise.reject(new Error("Cannot send until the transport is connected")));
                case 2:
                  return _context18.abrupt("return", sendMessage(this._logger, "SSE", this._httpClient, this._url, data, this._options));
                case 3:
                case "end":
                  return _context18.stop();
              }
            }, _callee18, this);
          }));
          function send(_x19) {
            return _send5.apply(this, arguments);
          }
          return send;
        }()
      }, {
        key: "stop",
        value: function stop() {
          this._close();
          return Promise.resolve();
        }
      }, {
        key: "_close",
        value: function _close(e) {
          if (this._eventSource) {
            this._eventSource.close();
            this._eventSource = undefined;
            if (this.onclose) {
              this.onclose(e);
            }
          }
        }
      }]);
    }();
    ; // CONCATENATED MODULE: ./src/WebSocketTransport.ts
    // Licensed to the .NET Foundation under one or more agreements.
    // The .NET Foundation licenses this file to you under the MIT license.

    /** @private */
    var WebSocketTransport = /*#__PURE__*/function () {
      function WebSocketTransport(httpClient, accessTokenFactory, logger, logMessageContent, webSocketConstructor, headers) {
        _classCallCheck(this, WebSocketTransport);
        this._logger = logger;
        this._accessTokenFactory = accessTokenFactory;
        this._logMessageContent = logMessageContent;
        this._webSocketConstructor = webSocketConstructor;
        this._httpClient = httpClient;
        this.onreceive = null;
        this.onclose = null;
        this._headers = headers;
      }
      return _createClass(WebSocketTransport, [{
        key: "connect",
        value: function () {
          var _connect3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee19(url, transferFormat) {
            var _this27 = this;
            var token;
            return _regeneratorRuntime().wrap(function _callee19$(_context19) {
              while (1) switch (_context19.prev = _context19.next) {
                case 0:
                  Arg.isRequired(url, "url");
                  Arg.isRequired(transferFormat, "transferFormat");
                  Arg.isIn(transferFormat, _TransferFormat, "transferFormat");
                  this._logger.log(_LogLevel.Trace, "(WebSockets transport) Connecting.");
                  if (!this._accessTokenFactory) {
                    _context19.next = 8;
                    break;
                  }
                  _context19.next = 7;
                  return this._accessTokenFactory();
                case 7:
                  token = _context19.sent;
                case 8:
                  return _context19.abrupt("return", new Promise(function (resolve, reject) {
                    url = url.replace(/^http/, "ws");
                    var webSocket;
                    var cookies = _this27._httpClient.getCookieString(url);
                    var opened = false;
                    if (Platform.isNode || Platform.isReactNative) {
                      var headers = {};
                      var _getUserAgentHeader7 = getUserAgentHeader(),
                        _getUserAgentHeader8 = _slicedToArray(_getUserAgentHeader7, 2),
                        name = _getUserAgentHeader8[0],
                        value = _getUserAgentHeader8[1];
                      headers[name] = value;
                      if (token) {
                        headers[HeaderNames.Authorization] = "Bearer ".concat(token);
                      }
                      if (cookies) {
                        headers[HeaderNames.Cookie] = cookies;
                      }
                      // Only pass headers when in non-browser environments
                      webSocket = new _this27._webSocketConstructor(url, undefined, {
                        headers: _objectSpread(_objectSpread({}, headers), _this27._headers)
                      });
                    } else {
                      if (token) {
                        url += (url.indexOf("?") < 0 ? "?" : "&") + "access_token=".concat(encodeURIComponent(token));
                      }
                    }
                    if (!webSocket) {
                      // Chrome is not happy with passing 'undefined' as protocol
                      webSocket = new _this27._webSocketConstructor(url);
                    }
                    if (transferFormat === _TransferFormat.Binary) {
                      webSocket.binaryType = "arraybuffer";
                    }
                    webSocket.onopen = function (_event) {
                      _this27._logger.log(_LogLevel.Information, "WebSocket connected to ".concat(url, "."));
                      _this27._webSocket = webSocket;
                      opened = true;
                      resolve();
                    };
                    webSocket.onerror = function (event) {
                      var error = null;
                      // ErrorEvent is a browser only type we need to check if the type exists before using it
                      if (typeof ErrorEvent !== "undefined" && event instanceof ErrorEvent) {
                        error = event.error;
                      } else {
                        error = "There was an error with the transport";
                      }
                      _this27._logger.log(_LogLevel.Information, "(WebSockets transport) ".concat(error, "."));
                    };
                    webSocket.onmessage = function (message) {
                      _this27._logger.log(_LogLevel.Trace, "(WebSockets transport) data received. ".concat(getDataDetail(message.data, _this27._logMessageContent), "."));
                      if (_this27.onreceive) {
                        try {
                          _this27.onreceive(message.data);
                        } catch (error) {
                          _this27._close(error);
                          return;
                        }
                      }
                    };
                    webSocket.onclose = function (event) {
                      // Don't call close handler if connection was never established
                      // We'll reject the connect call instead
                      if (opened) {
                        _this27._close(event);
                      } else {
                        var error = null;
                        // ErrorEvent is a browser only type we need to check if the type exists before using it
                        if (typeof ErrorEvent !== "undefined" && event instanceof ErrorEvent) {
                          error = event.error;
                        } else {
                          error = "WebSocket failed to connect. The connection could not be found on the server," + " either the endpoint may not be a SignalR endpoint," + " the connection ID is not present on the server, or there is a proxy blocking WebSockets." + " If you have multiple servers check that sticky sessions are enabled.";
                        }
                        reject(new Error(error));
                      }
                    };
                  }));
                case 9:
                case "end":
                  return _context19.stop();
              }
            }, _callee19, this);
          }));
          function connect(_x20, _x21) {
            return _connect3.apply(this, arguments);
          }
          return connect;
        }()
      }, {
        key: "send",
        value: function send(data) {
          if (this._webSocket && this._webSocket.readyState === this._webSocketConstructor.OPEN) {
            this._logger.log(_LogLevel.Trace, "(WebSockets transport) sending data. ".concat(getDataDetail(data, this._logMessageContent), "."));
            this._webSocket.send(data);
            return Promise.resolve();
          }
          return Promise.reject("WebSocket is not in the OPEN state");
        }
      }, {
        key: "stop",
        value: function stop() {
          if (this._webSocket) {
            // Manually invoke onclose callback inline so we know the HttpConnection was closed properly before returning
            // This also solves an issue where websocket.onclose could take 18+ seconds to trigger during network disconnects
            this._close(undefined);
          }
          return Promise.resolve();
        }
      }, {
        key: "_close",
        value: function _close(event) {
          // webSocket will be null if the transport did not start successfully
          if (this._webSocket) {
            // Clear websocket handlers because we are considering the socket closed now
            this._webSocket.onclose = function () {};
            this._webSocket.onmessage = function () {};
            this._webSocket.onerror = function () {};
            this._webSocket.close();
            this._webSocket = undefined;
          }
          this._logger.log(_LogLevel.Trace, "(WebSockets transport) socket closed.");
          if (this.onclose) {
            if (this._isCloseEvent(event) && (event.wasClean === false || event.code !== 1000)) {
              this.onclose(new Error("WebSocket closed with status code: ".concat(event.code, " (").concat(event.reason || "no reason given", ").")));
            } else if (event instanceof Error) {
              this.onclose(event);
            } else {
              this.onclose();
            }
          }
        }
      }, {
        key: "_isCloseEvent",
        value: function _isCloseEvent(event) {
          return event && typeof event.wasClean === "boolean" && typeof event.code === "number";
        }
      }]);
    }();
    ; // CONCATENATED MODULE: ./src/HttpConnection.ts
    // Licensed to the .NET Foundation under one or more agreements.
    // The .NET Foundation licenses this file to you under the MIT license.

    var MAX_REDIRECTS = 100;
    /** @private */
    var HttpConnection = /*#__PURE__*/function () {
      function HttpConnection(url) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        _classCallCheck(this, HttpConnection);
        this._stopPromiseResolver = function () {};
        this.features = {};
        this._negotiateVersion = 1;
        Arg.isRequired(url, "url");
        this._logger = createLogger(options.logger);
        this.baseUrl = this._resolveUrl(url);
        options = options || {};
        options.logMessageContent = options.logMessageContent === undefined ? false : options.logMessageContent;
        if (typeof options.withCredentials === "boolean" || options.withCredentials === undefined) {
          options.withCredentials = options.withCredentials === undefined ? true : options.withCredentials;
        } else {
          throw new Error("withCredentials option was not a 'boolean' or 'undefined' value");
        }
        options.timeout = options.timeout === undefined ? 100 * 1000 : options.timeout;
        var webSocketModule = null;
        var eventSourceModule = null;
        if (Platform.isNode && "function" !== "undefined") {
          // In order to ignore the dynamic require in webpack builds we need to do this magic
          // @ts-ignore: TS doesn't know about these names
          var requireFunc = true ? require : 0;
          webSocketModule = requireFunc("ws");
          eventSourceModule = requireFunc("eventsource");
        }
        if (!Platform.isNode && typeof WebSocket !== "undefined" && !options.WebSocket) {
          options.WebSocket = WebSocket;
        } else if (Platform.isNode && !options.WebSocket) {
          if (webSocketModule) {
            options.WebSocket = webSocketModule;
          }
        }
        if (!Platform.isNode && typeof EventSource !== "undefined" && !options.EventSource) {
          options.EventSource = EventSource;
        } else if (Platform.isNode && !options.EventSource) {
          if (typeof eventSourceModule !== "undefined") {
            options.EventSource = eventSourceModule;
          }
        }
        this._httpClient = new AccessTokenHttpClient(options.httpClient || new _DefaultHttpClient(this._logger), options.accessTokenFactory);
        this._connectionState = "Disconnected" /* ConnectionState.Disconnected */;
        this._connectionStarted = false;
        this._options = options;
        this.onreceive = null;
        this.onclose = null;
      }
      return _createClass(HttpConnection, [{
        key: "start",
        value: function () {
          var _start = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee20(transferFormat) {
            var message, _message3;
            return _regeneratorRuntime().wrap(function _callee20$(_context20) {
              while (1) switch (_context20.prev = _context20.next) {
                case 0:
                  transferFormat = transferFormat || _TransferFormat.Binary;
                  Arg.isIn(transferFormat, _TransferFormat, "transferFormat");
                  this._logger.log(_LogLevel.Debug, "Starting connection with transfer format '".concat(_TransferFormat[transferFormat], "'."));
                  if (!(this._connectionState !== "Disconnected" /* ConnectionState.Disconnected */)) {
                    _context20.next = 5;
                    break;
                  }
                  return _context20.abrupt("return", Promise.reject(new Error("Cannot start an HttpConnection that is not in the 'Disconnected' state.")));
                case 5:
                  this._connectionState = "Connecting" /* ConnectionState.Connecting */;
                  this._startInternalPromise = this._startInternal(transferFormat);
                  _context20.next = 9;
                  return this._startInternalPromise;
                case 9:
                  if (!(this._connectionState === "Disconnecting" /* ConnectionState.Disconnecting */)) {
                    _context20.next = 17;
                    break;
                  }
                  // stop() was called and transitioned the client into the Disconnecting state.
                  message = "Failed to start the HttpConnection before stop() was called.";
                  this._logger.log(_LogLevel.Error, message);
                  // We cannot await stopPromise inside startInternal since stopInternal awaits the startInternalPromise.
                  _context20.next = 14;
                  return this._stopPromise;
                case 14:
                  return _context20.abrupt("return", Promise.reject(new _AbortError(message)));
                case 17:
                  if (!(this._connectionState !== "Connected" /* ConnectionState.Connected */)) {
                    _context20.next = 21;
                    break;
                  }
                  // stop() was called and transitioned the client into the Disconnecting state.
                  _message3 = "HttpConnection.startInternal completed gracefully but didn't enter the connection into the connected state!";
                  this._logger.log(_LogLevel.Error, _message3);
                  return _context20.abrupt("return", Promise.reject(new _AbortError(_message3)));
                case 21:
                  this._connectionStarted = true;
                case 22:
                case "end":
                  return _context20.stop();
              }
            }, _callee20, this);
          }));
          function start(_x22) {
            return _start.apply(this, arguments);
          }
          return start;
        }()
      }, {
        key: "send",
        value: function send(data) {
          if (this._connectionState !== "Connected" /* ConnectionState.Connected */) {
            return Promise.reject(new Error("Cannot send data if the connection is not in the 'Connected' State."));
          }
          if (!this._sendQueue) {
            this._sendQueue = new TransportSendQueue(this.transport);
          }
          // Transport will not be null if state is connected
          return this._sendQueue.send(data);
        }
      }, {
        key: "stop",
        value: function () {
          var _stop3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee21(error) {
            var _this28 = this;
            return _regeneratorRuntime().wrap(function _callee21$(_context21) {
              while (1) switch (_context21.prev = _context21.next) {
                case 0:
                  if (!(this._connectionState === "Disconnected" /* ConnectionState.Disconnected */)) {
                    _context21.next = 3;
                    break;
                  }
                  this._logger.log(_LogLevel.Debug, "Call to HttpConnection.stop(".concat(error, ") ignored because the connection is already in the disconnected state."));
                  return _context21.abrupt("return", Promise.resolve());
                case 3:
                  if (!(this._connectionState === "Disconnecting" /* ConnectionState.Disconnecting */)) {
                    _context21.next = 6;
                    break;
                  }
                  this._logger.log(_LogLevel.Debug, "Call to HttpConnection.stop(".concat(error, ") ignored because the connection is already in the disconnecting state."));
                  return _context21.abrupt("return", this._stopPromise);
                case 6:
                  this._connectionState = "Disconnecting" /* ConnectionState.Disconnecting */;
                  this._stopPromise = new Promise(function (resolve) {
                    // Don't complete stop() until stopConnection() completes.
                    _this28._stopPromiseResolver = resolve;
                  });
                  // stopInternal should never throw so just observe it.
                  _context21.next = 10;
                  return this._stopInternal(error);
                case 10:
                  _context21.next = 12;
                  return this._stopPromise;
                case 12:
                case "end":
                  return _context21.stop();
              }
            }, _callee21, this);
          }));
          function stop(_x23) {
            return _stop3.apply(this, arguments);
          }
          return stop;
        }()
      }, {
        key: "_stopInternal",
        value: function () {
          var _stopInternal2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee22(error) {
            return _regeneratorRuntime().wrap(function _callee22$(_context22) {
              while (1) switch (_context22.prev = _context22.next) {
                case 0:
                  // Set error as soon as possible otherwise there is a race between
                  // the transport closing and providing an error and the error from a close message
                  // We would prefer the close message error.
                  this._stopError = error;
                  _context22.prev = 1;
                  _context22.next = 4;
                  return this._startInternalPromise;
                case 4:
                  _context22.next = 8;
                  break;
                case 6:
                  _context22.prev = 6;
                  _context22.t0 = _context22["catch"](1);
                case 8:
                  if (!this.transport) {
                    _context22.next = 21;
                    break;
                  }
                  _context22.prev = 9;
                  _context22.next = 12;
                  return this.transport.stop();
                case 12:
                  _context22.next = 18;
                  break;
                case 14:
                  _context22.prev = 14;
                  _context22.t1 = _context22["catch"](9);
                  this._logger.log(_LogLevel.Error, "HttpConnection.transport.stop() threw error '".concat(_context22.t1, "'."));
                  this._stopConnection();
                case 18:
                  this.transport = undefined;
                  _context22.next = 22;
                  break;
                case 21:
                  this._logger.log(_LogLevel.Debug, "HttpConnection.transport is undefined in HttpConnection.stop() because start() failed.");
                case 22:
                case "end":
                  return _context22.stop();
              }
            }, _callee22, this, [[1, 6], [9, 14]]);
          }));
          function _stopInternal(_x24) {
            return _stopInternal2.apply(this, arguments);
          }
          return _stopInternal;
        }()
      }, {
        key: "_startInternal",
        value: function () {
          var _startInternal3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee23(transferFormat) {
            var _this29 = this;
            var url, negotiateResponse, redirects, _loop2;
            return _regeneratorRuntime().wrap(function _callee23$(_context24) {
              while (1) switch (_context24.prev = _context24.next) {
                case 0:
                  // Store the original base url and the access token factory since they may change
                  // as part of negotiating
                  url = this.baseUrl;
                  this._accessTokenFactory = this._options.accessTokenFactory;
                  this._httpClient._accessTokenFactory = this._accessTokenFactory;
                  _context24.prev = 3;
                  if (!this._options.skipNegotiation) {
                    _context24.next = 14;
                    break;
                  }
                  if (!(this._options.transport === _HttpTransportType.WebSockets)) {
                    _context24.next = 11;
                    break;
                  }
                  // No need to add a connection ID in this case
                  this.transport = this._constructTransport(_HttpTransportType.WebSockets);
                  // We should just call connect directly in this case.
                  // No fallback or negotiate in this case.
                  _context24.next = 9;
                  return this._startTransport(url, transferFormat);
                case 9:
                  _context24.next = 12;
                  break;
                case 11:
                  throw new Error("Negotiation can only be skipped when using the WebSocket transport directly.");
                case 12:
                  _context24.next = 23;
                  break;
                case 14:
                  negotiateResponse = null;
                  redirects = 0;
                  _loop2 = /*#__PURE__*/_regeneratorRuntime().mark(function _loop2() {
                    var accessToken;
                    return _regeneratorRuntime().wrap(function _loop2$(_context23) {
                      while (1) switch (_context23.prev = _context23.next) {
                        case 0:
                          _context23.next = 2;
                          return _this29._getNegotiationResponse(url);
                        case 2:
                          negotiateResponse = _context23.sent;
                          if (!(_this29._connectionState === "Disconnecting" /* ConnectionState.Disconnecting */ || _this29._connectionState === "Disconnected" /* ConnectionState.Disconnected */)) {
                            _context23.next = 5;
                            break;
                          }
                          throw new _AbortError("The connection was stopped during negotiation.");
                        case 5:
                          if (!negotiateResponse.error) {
                            _context23.next = 7;
                            break;
                          }
                          throw new Error(negotiateResponse.error);
                        case 7:
                          if (!negotiateResponse.ProtocolVersion) {
                            _context23.next = 9;
                            break;
                          }
                          throw new Error("Detected a connection attempt to an ASP.NET SignalR Server. This client only supports connecting to an ASP.NET Core SignalR Server. See https://aka.ms/signalr-core-differences for details.");
                        case 9:
                          if (negotiateResponse.url) {
                            url = negotiateResponse.url;
                          }
                          if (negotiateResponse.accessToken) {
                            // Replace the current access token factory with one that uses
                            // the returned access token
                            accessToken = negotiateResponse.accessToken;
                            _this29._accessTokenFactory = function () {
                              return accessToken;
                            };
                            // set the factory to undefined so the AccessTokenHttpClient won't retry with the same token, since we know it won't change until a connection restart
                            _this29._httpClient._accessToken = accessToken;
                            _this29._httpClient._accessTokenFactory = undefined;
                          }
                          redirects++;
                        case 12:
                        case "end":
                          return _context23.stop();
                      }
                    }, _loop2);
                  });
                case 17:
                  return _context24.delegateYield(_loop2(), "t0", 18);
                case 18:
                  if (negotiateResponse.url && redirects < MAX_REDIRECTS) {
                    _context24.next = 17;
                    break;
                  }
                case 19:
                  if (!(redirects === MAX_REDIRECTS && negotiateResponse.url)) {
                    _context24.next = 21;
                    break;
                  }
                  throw new Error("Negotiate redirection limit exceeded.");
                case 21:
                  _context24.next = 23;
                  return this._createTransport(url, this._options.transport, negotiateResponse, transferFormat);
                case 23:
                  if (this.transport instanceof LongPollingTransport) {
                    this.features.inherentKeepAlive = true;
                  }
                  if (this._connectionState === "Connecting" /* ConnectionState.Connecting */) {
                    // Ensure the connection transitions to the connected state prior to completing this.startInternalPromise.
                    // start() will handle the case when stop was called and startInternal exits still in the disconnecting state.
                    this._logger.log(_LogLevel.Debug, "The HttpConnection connected successfully.");
                    this._connectionState = "Connected" /* ConnectionState.Connected */;
                  }
                  // stop() is waiting on us via this.startInternalPromise so keep this.transport around so it can clean up.
                  // This is the only case startInternal can exit in neither the connected nor disconnected state because stopConnection()
                  // will transition to the disconnected state. start() will wait for the transition using the stopPromise.
                  _context24.next = 34;
                  break;
                case 27:
                  _context24.prev = 27;
                  _context24.t1 = _context24["catch"](3);
                  this._logger.log(_LogLevel.Error, "Failed to start the connection: " + _context24.t1);
                  this._connectionState = "Disconnected" /* ConnectionState.Disconnected */;
                  this.transport = undefined;
                  // if start fails, any active calls to stop assume that start will complete the stop promise
                  this._stopPromiseResolver();
                  return _context24.abrupt("return", Promise.reject(_context24.t1));
                case 34:
                case "end":
                  return _context24.stop();
              }
            }, _callee23, this, [[3, 27]]);
          }));
          function _startInternal(_x25) {
            return _startInternal3.apply(this, arguments);
          }
          return _startInternal;
        }()
      }, {
        key: "_getNegotiationResponse",
        value: function () {
          var _getNegotiationResponse2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee24(url) {
            var headers, _getUserAgentHeader9, _getUserAgentHeader10, name, value, negotiateUrl, response, negotiateResponse, errorMessage;
            return _regeneratorRuntime().wrap(function _callee24$(_context25) {
              while (1) switch (_context25.prev = _context25.next) {
                case 0:
                  headers = {};
                  _getUserAgentHeader9 = getUserAgentHeader(), _getUserAgentHeader10 = _slicedToArray(_getUserAgentHeader9, 2), name = _getUserAgentHeader10[0], value = _getUserAgentHeader10[1];
                  headers[name] = value;
                  negotiateUrl = this._resolveNegotiateUrl(url);
                  this._logger.log(_LogLevel.Debug, "Sending negotiation request: ".concat(negotiateUrl, "."));
                  _context25.prev = 5;
                  _context25.next = 8;
                  return this._httpClient.post(negotiateUrl, {
                    content: "",
                    headers: _objectSpread(_objectSpread({}, headers), this._options.headers),
                    timeout: this._options.timeout,
                    withCredentials: this._options.withCredentials
                  });
                case 8:
                  response = _context25.sent;
                  if (!(response.statusCode !== 200)) {
                    _context25.next = 11;
                    break;
                  }
                  return _context25.abrupt("return", Promise.reject(new Error("Unexpected status code returned from negotiate '".concat(response.statusCode, "'"))));
                case 11:
                  negotiateResponse = JSON.parse(response.content);
                  if (!negotiateResponse.negotiateVersion || negotiateResponse.negotiateVersion < 1) {
                    // Negotiate version 0 doesn't use connectionToken
                    // So we set it equal to connectionId so all our logic can use connectionToken without being aware of the negotiate version
                    negotiateResponse.connectionToken = negotiateResponse.connectionId;
                  }
                  if (!(negotiateResponse.useStatefulReconnect && this._options._useStatefulReconnect !== true)) {
                    _context25.next = 15;
                    break;
                  }
                  return _context25.abrupt("return", Promise.reject(new FailedToNegotiateWithServerError("Client didn't negotiate Stateful Reconnect but the server did.")));
                case 15:
                  return _context25.abrupt("return", negotiateResponse);
                case 18:
                  _context25.prev = 18;
                  _context25.t0 = _context25["catch"](5);
                  errorMessage = "Failed to complete negotiation with the server: " + _context25.t0;
                  if (_context25.t0 instanceof _HttpError) {
                    if (_context25.t0.statusCode === 404) {
                      errorMessage = errorMessage + " Either this is not a SignalR endpoint or there is a proxy blocking the connection.";
                    }
                  }
                  this._logger.log(_LogLevel.Error, errorMessage);
                  return _context25.abrupt("return", Promise.reject(new FailedToNegotiateWithServerError(errorMessage)));
                case 24:
                case "end":
                  return _context25.stop();
              }
            }, _callee24, this, [[5, 18]]);
          }));
          function _getNegotiationResponse(_x26) {
            return _getNegotiationResponse2.apply(this, arguments);
          }
          return _getNegotiationResponse;
        }()
      }, {
        key: "_createConnectUrl",
        value: function _createConnectUrl(url, connectionToken) {
          if (!connectionToken) {
            return url;
          }
          return url + (url.indexOf("?") === -1 ? "?" : "&") + "id=".concat(connectionToken);
        }
      }, {
        key: "_createTransport",
        value: function () {
          var _createTransport2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee25(url, requestedTransport, negotiateResponse, requestedTransferFormat) {
            var connectUrl, transportExceptions, transports, negotiate, _iterator8, _step8, endpoint, transportOrError, message;
            return _regeneratorRuntime().wrap(function _callee25$(_context26) {
              while (1) switch (_context26.prev = _context26.next) {
                case 0:
                  connectUrl = this._createConnectUrl(url, negotiateResponse.connectionToken);
                  if (!this._isITransport(requestedTransport)) {
                    _context26.next = 8;
                    break;
                  }
                  this._logger.log(_LogLevel.Debug, "Connection was provided an instance of ITransport, using that directly.");
                  this.transport = requestedTransport;
                  _context26.next = 6;
                  return this._startTransport(connectUrl, requestedTransferFormat);
                case 6:
                  this.connectionId = negotiateResponse.connectionId;
                  return _context26.abrupt("return");
                case 8:
                  transportExceptions = [];
                  transports = negotiateResponse.availableTransports || [];
                  negotiate = negotiateResponse;
                  _iterator8 = _createForOfIteratorHelper(transports);
                  _context26.prev = 12;
                  _iterator8.s();
                case 14:
                  if ((_step8 = _iterator8.n()).done) {
                    _context26.next = 53;
                    break;
                  }
                  endpoint = _step8.value;
                  transportOrError = this._resolveTransportOrError(endpoint, requestedTransport, requestedTransferFormat, (negotiate === null || negotiate === void 0 ? void 0 : negotiate.useStatefulReconnect) === true);
                  if (!(transportOrError instanceof Error)) {
                    _context26.next = 22;
                    break;
                  }
                  // Store the error and continue, we don't want to cause a re-negotiate in these cases
                  transportExceptions.push("".concat(endpoint.transport, " failed:"));
                  transportExceptions.push(transportOrError);
                  _context26.next = 51;
                  break;
                case 22:
                  if (!this._isITransport(transportOrError)) {
                    _context26.next = 51;
                    break;
                  }
                  this.transport = transportOrError;
                  if (negotiate) {
                    _context26.next = 35;
                    break;
                  }
                  _context26.prev = 25;
                  _context26.next = 28;
                  return this._getNegotiationResponse(url);
                case 28:
                  negotiate = _context26.sent;
                  _context26.next = 34;
                  break;
                case 31:
                  _context26.prev = 31;
                  _context26.t0 = _context26["catch"](25);
                  return _context26.abrupt("return", Promise.reject(_context26.t0));
                case 34:
                  connectUrl = this._createConnectUrl(url, negotiate.connectionToken);
                case 35:
                  _context26.prev = 35;
                  _context26.next = 38;
                  return this._startTransport(connectUrl, requestedTransferFormat);
                case 38:
                  this.connectionId = negotiate.connectionId;
                  return _context26.abrupt("return");
                case 42:
                  _context26.prev = 42;
                  _context26.t1 = _context26["catch"](35);
                  this._logger.log(_LogLevel.Error, "Failed to start the transport '".concat(endpoint.transport, "': ").concat(_context26.t1));
                  negotiate = undefined;
                  transportExceptions.push(new FailedToStartTransportError("".concat(endpoint.transport, " failed: ").concat(_context26.t1), _HttpTransportType[endpoint.transport]));
                  if (!(this._connectionState !== "Connecting" /* ConnectionState.Connecting */)) {
                    _context26.next = 51;
                    break;
                  }
                  message = "Failed to select transport before stop() was called.";
                  this._logger.log(_LogLevel.Debug, message);
                  return _context26.abrupt("return", Promise.reject(new _AbortError(message)));
                case 51:
                  _context26.next = 14;
                  break;
                case 53:
                  _context26.next = 58;
                  break;
                case 55:
                  _context26.prev = 55;
                  _context26.t2 = _context26["catch"](12);
                  _iterator8.e(_context26.t2);
                case 58:
                  _context26.prev = 58;
                  _iterator8.f();
                  return _context26.finish(58);
                case 61:
                  if (!(transportExceptions.length > 0)) {
                    _context26.next = 63;
                    break;
                  }
                  return _context26.abrupt("return", Promise.reject(new AggregateErrors("Unable to connect to the server with any of the available transports. ".concat(transportExceptions.join(" ")), transportExceptions)));
                case 63:
                  return _context26.abrupt("return", Promise.reject(new Error("None of the transports supported by the client are supported by the server.")));
                case 64:
                case "end":
                  return _context26.stop();
              }
            }, _callee25, this, [[12, 55, 58, 61], [25, 31], [35, 42]]);
          }));
          function _createTransport(_x27, _x28, _x29, _x30) {
            return _createTransport2.apply(this, arguments);
          }
          return _createTransport;
        }()
      }, {
        key: "_constructTransport",
        value: function _constructTransport(transport) {
          switch (transport) {
            case _HttpTransportType.WebSockets:
              if (!this._options.WebSocket) {
                throw new Error("'WebSocket' is not supported in your environment.");
              }
              return new WebSocketTransport(this._httpClient, this._accessTokenFactory, this._logger, this._options.logMessageContent, this._options.WebSocket, this._options.headers || {});
            case _HttpTransportType.ServerSentEvents:
              if (!this._options.EventSource) {
                throw new Error("'EventSource' is not supported in your environment.");
              }
              return new ServerSentEventsTransport(this._httpClient, this._httpClient._accessToken, this._logger, this._options);
            case _HttpTransportType.LongPolling:
              return new LongPollingTransport(this._httpClient, this._logger, this._options);
            default:
              throw new Error("Unknown transport: ".concat(transport, "."));
          }
        }
      }, {
        key: "_startTransport",
        value: function _startTransport(url, transferFormat) {
          var _this30 = this;
          this.transport.onreceive = this.onreceive;
          if (this.features.reconnect) {
            this.transport.onclose = /*#__PURE__*/function () {
              var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee26(e) {
                var callStop;
                return _regeneratorRuntime().wrap(function _callee26$(_context27) {
                  while (1) switch (_context27.prev = _context27.next) {
                    case 0:
                      callStop = false;
                      if (!_this30.features.reconnect) {
                        _context27.next = 15;
                        break;
                      }
                      _context27.prev = 2;
                      _this30.features.disconnected();
                      _context27.next = 6;
                      return _this30.transport.connect(url, transferFormat);
                    case 6:
                      _context27.next = 8;
                      return _this30.features.resend();
                    case 8:
                      _context27.next = 13;
                      break;
                    case 10:
                      _context27.prev = 10;
                      _context27.t0 = _context27["catch"](2);
                      callStop = true;
                    case 13:
                      _context27.next = 17;
                      break;
                    case 15:
                      _this30._stopConnection(e);
                      return _context27.abrupt("return");
                    case 17:
                      if (callStop) {
                        _this30._stopConnection(e);
                      }
                    case 18:
                    case "end":
                      return _context27.stop();
                  }
                }, _callee26, null, [[2, 10]]);
              }));
              return function (_x31) {
                return _ref3.apply(this, arguments);
              };
            }();
          } else {
            this.transport.onclose = function (e) {
              return _this30._stopConnection(e);
            };
          }
          return this.transport.connect(url, transferFormat);
        }
      }, {
        key: "_resolveTransportOrError",
        value: function _resolveTransportOrError(endpoint, requestedTransport, requestedTransferFormat, useStatefulReconnect) {
          var transport = _HttpTransportType[endpoint.transport];
          if (transport === null || transport === undefined) {
            this._logger.log(_LogLevel.Debug, "Skipping transport '".concat(endpoint.transport, "' because it is not supported by this client."));
            return new Error("Skipping transport '".concat(endpoint.transport, "' because it is not supported by this client."));
          } else {
            if (transportMatches(requestedTransport, transport)) {
              var transferFormats = endpoint.transferFormats.map(function (s) {
                return _TransferFormat[s];
              });
              if (transferFormats.indexOf(requestedTransferFormat) >= 0) {
                if (transport === _HttpTransportType.WebSockets && !this._options.WebSocket || transport === _HttpTransportType.ServerSentEvents && !this._options.EventSource) {
                  this._logger.log(_LogLevel.Debug, "Skipping transport '".concat(_HttpTransportType[transport], "' because it is not supported in your environment.'"));
                  return new UnsupportedTransportError("'".concat(_HttpTransportType[transport], "' is not supported in your environment."), transport);
                } else {
                  this._logger.log(_LogLevel.Debug, "Selecting transport '".concat(_HttpTransportType[transport], "'."));
                  try {
                    this.features.reconnect = transport === _HttpTransportType.WebSockets ? useStatefulReconnect : undefined;
                    return this._constructTransport(transport);
                  } catch (ex) {
                    return ex;
                  }
                }
              } else {
                this._logger.log(_LogLevel.Debug, "Skipping transport '".concat(_HttpTransportType[transport], "' because it does not support the requested transfer format '").concat(_TransferFormat[requestedTransferFormat], "'."));
                return new Error("'".concat(_HttpTransportType[transport], "' does not support ").concat(_TransferFormat[requestedTransferFormat], "."));
              }
            } else {
              this._logger.log(_LogLevel.Debug, "Skipping transport '".concat(_HttpTransportType[transport], "' because it was disabled by the client."));
              return new DisabledTransportError("'".concat(_HttpTransportType[transport], "' is disabled by the client."), transport);
            }
          }
        }
      }, {
        key: "_isITransport",
        value: function _isITransport(transport) {
          return transport && _typeof(transport) === "object" && "connect" in transport;
        }
      }, {
        key: "_stopConnection",
        value: function _stopConnection(error) {
          var _this31 = this;
          this._logger.log(_LogLevel.Debug, "HttpConnection.stopConnection(".concat(error, ") called while in state ").concat(this._connectionState, "."));
          this.transport = undefined;
          // If we have a stopError, it takes precedence over the error from the transport
          error = this._stopError || error;
          this._stopError = undefined;
          if (this._connectionState === "Disconnected" /* ConnectionState.Disconnected */) {
            this._logger.log(_LogLevel.Debug, "Call to HttpConnection.stopConnection(".concat(error, ") was ignored because the connection is already in the disconnected state."));
            return;
          }
          if (this._connectionState === "Connecting" /* ConnectionState.Connecting */) {
            this._logger.log(_LogLevel.Warning, "Call to HttpConnection.stopConnection(".concat(error, ") was ignored because the connection is still in the connecting state."));
            throw new Error("HttpConnection.stopConnection(".concat(error, ") was called while the connection is still in the connecting state."));
          }
          if (this._connectionState === "Disconnecting" /* ConnectionState.Disconnecting */) {
            // A call to stop() induced this call to stopConnection and needs to be completed.
            // Any stop() awaiters will be scheduled to continue after the onclose callback fires.
            this._stopPromiseResolver();
          }
          if (error) {
            this._logger.log(_LogLevel.Error, "Connection disconnected with error '".concat(error, "'."));
          } else {
            this._logger.log(_LogLevel.Information, "Connection disconnected.");
          }
          if (this._sendQueue) {
            this._sendQueue.stop()["catch"](function (e) {
              _this31._logger.log(_LogLevel.Error, "TransportSendQueue.stop() threw error '".concat(e, "'."));
            });
            this._sendQueue = undefined;
          }
          this.connectionId = undefined;
          this._connectionState = "Disconnected" /* ConnectionState.Disconnected */;
          if (this._connectionStarted) {
            this._connectionStarted = false;
            try {
              if (this.onclose) {
                this.onclose(error);
              }
            } catch (e) {
              this._logger.log(_LogLevel.Error, "HttpConnection.onclose(".concat(error, ") threw error '").concat(e, "'."));
            }
          }
        }
      }, {
        key: "_resolveUrl",
        value: function _resolveUrl(url) {
          // startsWith is not supported in IE
          if (url.lastIndexOf("https://", 0) === 0 || url.lastIndexOf("http://", 0) === 0) {
            return url;
          }
          if (!Platform.isBrowser) {
            throw new Error("Cannot resolve '".concat(url, "'."));
          }
          // Setting the url to the href propery of an anchor tag handles normalization
          // for us. There are 3 main cases.
          // 1. Relative path normalization e.g "b" -> "http://localhost:5000/a/b"
          // 2. Absolute path normalization e.g "/a/b" -> "http://localhost:5000/a/b"
          // 3. Networkpath reference normalization e.g "//localhost:5000/a/b" -> "http://localhost:5000/a/b"
          var aTag = window.document.createElement("a");
          aTag.href = url;
          this._logger.log(_LogLevel.Information, "Normalizing '".concat(url, "' to '").concat(aTag.href, "'."));
          return aTag.href;
        }
      }, {
        key: "_resolveNegotiateUrl",
        value: function _resolveNegotiateUrl(url) {
          var negotiateUrl = new URL(url);
          if (negotiateUrl.pathname.endsWith('/')) {
            negotiateUrl.pathname += "negotiate";
          } else {
            negotiateUrl.pathname += "/negotiate";
          }
          var searchParams = new URLSearchParams(negotiateUrl.searchParams);
          if (!searchParams.has("negotiateVersion")) {
            searchParams.append("negotiateVersion", this._negotiateVersion.toString());
          }
          if (searchParams.has("useStatefulReconnect")) {
            if (searchParams.get("useStatefulReconnect") === "true") {
              this._options._useStatefulReconnect = true;
            }
          } else if (this._options._useStatefulReconnect === true) {
            searchParams.append("useStatefulReconnect", "true");
          }
          negotiateUrl.search = searchParams.toString();
          return negotiateUrl.toString();
        }
      }]);
    }();
    function transportMatches(requestedTransport, actualTransport) {
      return !requestedTransport || (actualTransport & requestedTransport) !== 0;
    }
    /** @private */
    var TransportSendQueue = /*#__PURE__*/function () {
      function TransportSendQueue(_transport) {
        _classCallCheck(this, TransportSendQueue);
        this._transport = _transport;
        this._buffer = [];
        this._executing = true;
        this._sendBufferedData = new PromiseSource();
        this._transportResult = new PromiseSource();
        this._sendLoopPromise = this._sendLoop();
      }
      return _createClass(TransportSendQueue, [{
        key: "send",
        value: function send(data) {
          this._bufferData(data);
          if (!this._transportResult) {
            this._transportResult = new PromiseSource();
          }
          return this._transportResult.promise;
        }
      }, {
        key: "stop",
        value: function stop() {
          this._executing = false;
          this._sendBufferedData.resolve();
          return this._sendLoopPromise;
        }
      }, {
        key: "_bufferData",
        value: function _bufferData(data) {
          if (this._buffer.length && _typeof(this._buffer[0]) !== _typeof(data)) {
            throw new Error("Expected data to be of type ".concat(_typeof(this._buffer), " but was of type ").concat(_typeof(data)));
          }
          this._buffer.push(data);
          this._sendBufferedData.resolve();
        }
      }, {
        key: "_sendLoop",
        value: function () {
          var _sendLoop2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee27() {
            var transportResult, data;
            return _regeneratorRuntime().wrap(function _callee27$(_context28) {
              while (1) switch (_context28.prev = _context28.next) {
                case 0:
                  if (!true) {
                    _context28.next = 22;
                    break;
                  }
                  _context28.next = 3;
                  return this._sendBufferedData.promise;
                case 3:
                  if (this._executing) {
                    _context28.next = 6;
                    break;
                  }
                  if (this._transportResult) {
                    this._transportResult.reject("Connection stopped.");
                  }
                  return _context28.abrupt("break", 22);
                case 6:
                  this._sendBufferedData = new PromiseSource();
                  transportResult = this._transportResult;
                  this._transportResult = undefined;
                  data = typeof this._buffer[0] === "string" ? this._buffer.join("") : TransportSendQueue._concatBuffers(this._buffer);
                  this._buffer.length = 0;
                  _context28.prev = 11;
                  _context28.next = 14;
                  return this._transport.send(data);
                case 14:
                  transportResult.resolve();
                  _context28.next = 20;
                  break;
                case 17:
                  _context28.prev = 17;
                  _context28.t0 = _context28["catch"](11);
                  transportResult.reject(_context28.t0);
                case 20:
                  _context28.next = 0;
                  break;
                case 22:
                case "end":
                  return _context28.stop();
              }
            }, _callee27, this, [[11, 17]]);
          }));
          function _sendLoop() {
            return _sendLoop2.apply(this, arguments);
          }
          return _sendLoop;
        }()
      }], [{
        key: "_concatBuffers",
        value: function _concatBuffers(arrayBuffers) {
          var totalLength = arrayBuffers.map(function (b) {
            return b.byteLength;
          }).reduce(function (a, b) {
            return a + b;
          });
          var result = new Uint8Array(totalLength);
          var offset = 0;
          var _iterator9 = _createForOfIteratorHelper(arrayBuffers),
            _step9;
          try {
            for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
              var item = _step9.value;
              result.set(new Uint8Array(item), offset);
              offset += item.byteLength;
            }
          } catch (err) {
            _iterator9.e(err);
          } finally {
            _iterator9.f();
          }
          return result.buffer;
        }
      }]);
    }();
    var PromiseSource = /*#__PURE__*/function () {
      function PromiseSource() {
        var _this32 = this;
        _classCallCheck(this, PromiseSource);
        this.promise = new Promise(function (resolve, reject) {
          var _ref4;
          return _ref4 = [resolve, reject], _this32._resolver = _ref4[0], _this32._rejecter = _ref4[1], _ref4;
        });
      }
      return _createClass(PromiseSource, [{
        key: "resolve",
        value: function resolve() {
          this._resolver();
        }
      }, {
        key: "reject",
        value: function reject(reason) {
          this._rejecter(reason);
        }
      }]);
    }();
    ; // CONCATENATED MODULE: ./src/JsonHubProtocol.ts
    // Licensed to the .NET Foundation under one or more agreements.
    // The .NET Foundation licenses this file to you under the MIT license.

    var JSON_HUB_PROTOCOL_NAME = "json";
    /** Implements the JSON Hub Protocol. */
    var _JsonHubProtocol = /*#__PURE__*/function () {
      function _JsonHubProtocol() {
        _classCallCheck(this, _JsonHubProtocol);
        /** @inheritDoc */
        this.name = JSON_HUB_PROTOCOL_NAME;
        /** @inheritDoc */
        this.version = 2;
        /** @inheritDoc */
        this.transferFormat = _TransferFormat.Text;
      }
      /** Creates an array of {@link @microsoft/signalr.HubMessage} objects from the specified serialized representation.
       *
       * @param {string} input A string containing the serialized representation.
       * @param {ILogger} logger A logger that will be used to log messages that occur during parsing.
       */
      return _createClass(_JsonHubProtocol, [{
        key: "parseMessages",
        value: function parseMessages(input, logger) {
          // The interface does allow "ArrayBuffer" to be passed in, but this implementation does not. So let's throw a useful error.
          if (typeof input !== "string") {
            throw new Error("Invalid input for JSON hub protocol. Expected a string.");
          }
          if (!input) {
            return [];
          }
          if (logger === null) {
            logger = _NullLogger.instance;
          }
          // Parse the messages
          var messages = TextMessageFormat.parse(input);
          var hubMessages = [];
          var _iterator10 = _createForOfIteratorHelper(messages),
            _step10;
          try {
            for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
              var message = _step10.value;
              var parsedMessage = JSON.parse(message);
              if (typeof parsedMessage.type !== "number") {
                throw new Error("Invalid payload.");
              }
              switch (parsedMessage.type) {
                case _MessageType.Invocation:
                  this._isInvocationMessage(parsedMessage);
                  break;
                case _MessageType.StreamItem:
                  this._isStreamItemMessage(parsedMessage);
                  break;
                case _MessageType.Completion:
                  this._isCompletionMessage(parsedMessage);
                  break;
                case _MessageType.Ping:
                  // Single value, no need to validate
                  break;
                case _MessageType.Close:
                  // All optional values, no need to validate
                  break;
                case _MessageType.Ack:
                  this._isAckMessage(parsedMessage);
                  break;
                case _MessageType.Sequence:
                  this._isSequenceMessage(parsedMessage);
                  break;
                default:
                  // Future protocol changes can add message types, old clients can ignore them
                  logger.log(_LogLevel.Information, "Unknown message type '" + parsedMessage.type + "' ignored.");
                  continue;
              }
              hubMessages.push(parsedMessage);
            }
          } catch (err) {
            _iterator10.e(err);
          } finally {
            _iterator10.f();
          }
          return hubMessages;
        }
        /** Writes the specified {@link @microsoft/signalr.HubMessage} to a string and returns it.
         *
         * @param {HubMessage} message The message to write.
         * @returns {string} A string containing the serialized representation of the message.
         */
      }, {
        key: "writeMessage",
        value: function writeMessage(message) {
          return TextMessageFormat.write(JSON.stringify(message));
        }
      }, {
        key: "_isInvocationMessage",
        value: function _isInvocationMessage(message) {
          this._assertNotEmptyString(message.target, "Invalid payload for Invocation message.");
          if (message.invocationId !== undefined) {
            this._assertNotEmptyString(message.invocationId, "Invalid payload for Invocation message.");
          }
        }
      }, {
        key: "_isStreamItemMessage",
        value: function _isStreamItemMessage(message) {
          this._assertNotEmptyString(message.invocationId, "Invalid payload for StreamItem message.");
          if (message.item === undefined) {
            throw new Error("Invalid payload for StreamItem message.");
          }
        }
      }, {
        key: "_isCompletionMessage",
        value: function _isCompletionMessage(message) {
          if (message.result && message.error) {
            throw new Error("Invalid payload for Completion message.");
          }
          if (!message.result && message.error) {
            this._assertNotEmptyString(message.error, "Invalid payload for Completion message.");
          }
          this._assertNotEmptyString(message.invocationId, "Invalid payload for Completion message.");
        }
      }, {
        key: "_isAckMessage",
        value: function _isAckMessage(message) {
          if (typeof message.sequenceId !== 'number') {
            throw new Error("Invalid SequenceId for Ack message.");
          }
        }
      }, {
        key: "_isSequenceMessage",
        value: function _isSequenceMessage(message) {
          if (typeof message.sequenceId !== 'number') {
            throw new Error("Invalid SequenceId for Sequence message.");
          }
        }
      }, {
        key: "_assertNotEmptyString",
        value: function _assertNotEmptyString(value, errorMessage) {
          if (typeof value !== "string" || value === "") {
            throw new Error(errorMessage);
          }
        }
      }]);
    }();
    ; // CONCATENATED MODULE: ./src/HubConnectionBuilder.ts
    // Licensed to the .NET Foundation under one or more agreements.
    // The .NET Foundation licenses this file to you under the MIT license.

    var LogLevelNameMapping = {
      trace: _LogLevel.Trace,
      debug: _LogLevel.Debug,
      info: _LogLevel.Information,
      information: _LogLevel.Information,
      warn: _LogLevel.Warning,
      warning: _LogLevel.Warning,
      error: _LogLevel.Error,
      critical: _LogLevel.Critical,
      none: _LogLevel.None
    };
    function parseLogLevel(name) {
      // Case-insensitive matching via lower-casing
      // Yes, I know case-folding is a complicated problem in Unicode, but we only support
      // the ASCII strings defined in LogLevelNameMapping anyway, so it's fine -anurse.
      var mapping = LogLevelNameMapping[name.toLowerCase()];
      if (typeof mapping !== "undefined") {
        return mapping;
      } else {
        throw new Error("Unknown log level: ".concat(name));
      }
    }
    /** A builder for configuring {@link @microsoft/signalr.HubConnection} instances. */
    var _HubConnectionBuilder = /*#__PURE__*/function () {
      function _HubConnectionBuilder() {
        _classCallCheck(this, _HubConnectionBuilder);
      }
      return _createClass(_HubConnectionBuilder, [{
        key: "configureLogging",
        value: function configureLogging(logging) {
          Arg.isRequired(logging, "logging");
          if (isLogger(logging)) {
            this.logger = logging;
          } else if (typeof logging === "string") {
            var logLevel = parseLogLevel(logging);
            this.logger = new ConsoleLogger(logLevel);
          } else {
            this.logger = new ConsoleLogger(logging);
          }
          return this;
        }
      }, {
        key: "withUrl",
        value: function withUrl(url, transportTypeOrOptions) {
          Arg.isRequired(url, "url");
          Arg.isNotEmpty(url, "url");
          this.url = url;
          // Flow-typing knows where it's at. Since HttpTransportType is a number and IHttpConnectionOptions is guaranteed
          // to be an object, we know (as does TypeScript) this comparison is all we need to figure out which overload was called.
          if (_typeof(transportTypeOrOptions) === "object") {
            this.httpConnectionOptions = _objectSpread(_objectSpread({}, this.httpConnectionOptions), transportTypeOrOptions);
          } else {
            this.httpConnectionOptions = _objectSpread(_objectSpread({}, this.httpConnectionOptions), {}, {
              transport: transportTypeOrOptions
            });
          }
          return this;
        }
        /** Configures the {@link @microsoft/signalr.HubConnection} to use the specified Hub Protocol.
         *
         * @param {IHubProtocol} protocol The {@link @microsoft/signalr.IHubProtocol} implementation to use.
         */
      }, {
        key: "withHubProtocol",
        value: function withHubProtocol(protocol) {
          Arg.isRequired(protocol, "protocol");
          this.protocol = protocol;
          return this;
        }
      }, {
        key: "withAutomaticReconnect",
        value: function withAutomaticReconnect(retryDelaysOrReconnectPolicy) {
          if (this.reconnectPolicy) {
            throw new Error("A reconnectPolicy has already been set.");
          }
          if (!retryDelaysOrReconnectPolicy) {
            this.reconnectPolicy = new DefaultReconnectPolicy();
          } else if (Array.isArray(retryDelaysOrReconnectPolicy)) {
            this.reconnectPolicy = new DefaultReconnectPolicy(retryDelaysOrReconnectPolicy);
          } else {
            this.reconnectPolicy = retryDelaysOrReconnectPolicy;
          }
          return this;
        }
        /** Configures {@link @microsoft/signalr.HubConnection.serverTimeoutInMilliseconds} for the {@link @microsoft/signalr.HubConnection}.
         *
         * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.
         */
      }, {
        key: "withServerTimeout",
        value: function withServerTimeout(milliseconds) {
          Arg.isRequired(milliseconds, "milliseconds");
          this._serverTimeoutInMilliseconds = milliseconds;
          return this;
        }
        /** Configures {@link @microsoft/signalr.HubConnection.keepAliveIntervalInMilliseconds} for the {@link @microsoft/signalr.HubConnection}.
         *
         * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.
         */
      }, {
        key: "withKeepAliveInterval",
        value: function withKeepAliveInterval(milliseconds) {
          Arg.isRequired(milliseconds, "milliseconds");
          this._keepAliveIntervalInMilliseconds = milliseconds;
          return this;
        }
        /** Enables and configures options for the Stateful Reconnect feature.
         *
         * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.
         */
      }, {
        key: "withStatefulReconnect",
        value: function withStatefulReconnect(options) {
          if (this.httpConnectionOptions === undefined) {
            this.httpConnectionOptions = {};
          }
          this.httpConnectionOptions._useStatefulReconnect = true;
          this._statefulReconnectBufferSize = options === null || options === void 0 ? void 0 : options.bufferSize;
          return this;
        }
        /** Creates a {@link @microsoft/signalr.HubConnection} from the configuration options specified in this builder.
         *
         * @returns {HubConnection} The configured {@link @microsoft/signalr.HubConnection}.
         */
      }, {
        key: "build",
        value: function build() {
          // If httpConnectionOptions has a logger, use it. Otherwise, override it with the one
          // provided to configureLogger
          var httpConnectionOptions = this.httpConnectionOptions || {};
          // If it's 'null', the user **explicitly** asked for null, don't mess with it.
          if (httpConnectionOptions.logger === undefined) {
            // If our logger is undefined or null, that's OK, the HttpConnection constructor will handle it.
            httpConnectionOptions.logger = this.logger;
          }
          // Now create the connection
          if (!this.url) {
            throw new Error("The 'HubConnectionBuilder.withUrl' method must be called before building the connection.");
          }
          var connection = new HttpConnection(this.url, httpConnectionOptions);
          return _HubConnection.create(connection, this.logger || _NullLogger.instance, this.protocol || new _JsonHubProtocol(), this.reconnectPolicy, this._serverTimeoutInMilliseconds, this._keepAliveIntervalInMilliseconds, this._statefulReconnectBufferSize);
        }
      }]);
    }();
    function isLogger(logger) {
      return logger.log !== undefined;
    }
    ; // CONCATENATED MODULE: ./src/index.ts
    // Licensed to the .NET Foundation under one or more agreements.
    // The .NET Foundation licenses this file to you under the MIT license.

    ; // CONCATENATED MODULE: ./src/browser-index.ts
    // Licensed to the .NET Foundation under one or more agreements.
    // The .NET Foundation licenses this file to you under the MIT license.
    // This is where we add any polyfills we'll need for the browser. It is the entry module for browser-specific builds.
    // Copy from Array.prototype into Uint8Array to polyfill on IE. It's OK because the implementations of indexOf and slice use properties
    // that exist on Uint8Array with the same name, and JavaScript is magic.
    // We make them 'writable' because the Buffer polyfill messes with it as well.
    if (!Uint8Array.prototype.indexOf) {
      Object.defineProperty(Uint8Array.prototype, "indexOf", {
        value: Array.prototype.indexOf,
        writable: true
      });
    }
    if (!Uint8Array.prototype.slice) {
      Object.defineProperty(Uint8Array.prototype, "slice", {
        // wrap the slice in Uint8Array so it looks like a Uint8Array.slice call
        // eslint-disable-next-line object-shorthand
        value: function value(start, end) {
          return new Uint8Array(Array.prototype.slice.call(this, start, end));
        },
        writable: true
      });
    }
    if (!Uint8Array.prototype.forEach) {
      Object.defineProperty(Uint8Array.prototype, "forEach", {
        value: Array.prototype.forEach,
        writable: true
      });
    }

    /******/
    return __webpack_exports__;
    /******/
  }();
});