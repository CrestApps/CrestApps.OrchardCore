@using CrestApps.OrchardCore.Omnichannel.Managements.ViewModels
@using CrestApps.OrchardCore.Omnichannel.Core.Models
@using OrchardCore

@model OmnichannelActivityLoadFormViewModel

@if (Model.Status != OmnichannelActivityBatchStatus.New)
{
    <div class="alert alert-info" role="alert">
        @T["You cannot change the settings of an activity batch once it has started loading. If you need to change any of these settings, please create a new activity batch."]
    </div>
}

<div class="@Orchard.GetWrapperClasses()">
    <label asp-for="Channel" class="@Orchard.GetLabelClasses()">@T["Channel"]</label>
    <div class="@Orchard.GetEndClasses()">
        <select asp-for="Channel" asp-items="Model.Channels" class="form-select">
            <option value="">@T["Select a channel"]</option>
        </select>
        <span asp-validation-for="Channel" class="text-danger"></span>
    </div>
</div>

<div class="@Orchard.GetWrapperClasses()">
    <label asp-for="InteractionType" class="@Orchard.GetLabelClasses()">@T["Interaction type"]</label>
    <div class="@Orchard.GetEndClasses()">
        <select asp-for="InteractionType" asp-items="Model.InteractionTypes" class="form-select"></select>
        <span asp-validation-for="InteractionType" class="text-danger"></span>
    </div>
</div>

<div class="@Orchard.GetWrapperClasses("automated-interaction-type", Model.InteractionType == ActivityInteractionType.Manual ? "d-none" : string.Empty)">
    <label asp-for="ChannelEndpoint" class="@Orchard.GetLabelClasses()">@T["Channel endpoint"]</label>
    <div class="@Orchard.GetEndClasses()">
        <select asp-for="ChannelEndpoint" asp-items="Model.ChannelEndpoints" class="form-select">
            <option value="">@T["Select an endpoint"]</option>
        </select>
        <span asp-validation-for="ChannelEndpoint" class="text-danger"></span>
        <span class="hint">@T["Specifies the endpoint to use when sending a response to the incoming message."]</span>
    </div>
</div>

<div class="@Orchard.GetWrapperClasses("automated-interaction-type", Model.InteractionType == ActivityInteractionType.Manual ? "d-none" : string.Empty)">
    <label asp-for="AIProfileName" class="@Orchard.GetLabelClasses()">@T["AI Profile"]</label>
    <div class="@Orchard.GetEndClasses()">
        <select asp-for="AIProfileName" asp-items="Model.AIProfiles" class="form-select">
            <option value="">@T["Select an AI Profile"]</option>
        </select>
        <span asp-validation-for="AIProfileName" class="text-danger"></span>
        <span class="hint">@T["Specifies the AI Profile to use to generate the responses to the incoming messages."]</span>
    </div>
</div>

<div class="@Orchard.GetWrapperClasses()">
    <label asp-for="CampaignId" class="@Orchard.GetLabelClasses()">@T["Campaign"]</label>
    <div class="@Orchard.GetEndClasses()">
        <select asp-for="CampaignId" asp-items="Model.Campaigns" class="form-select">
            <option value="">@T["Select a campaign"]</option>
        </select>
        <span asp-validation-for="CampaignId" class="text-danger"></span>
    </div>
</div>

<div class="@Orchard.GetWrapperClasses()">
    <label asp-for="SubjectContentType" class="@Orchard.GetLabelClasses()">@T["Subject content type"]</label>
    <div class="@Orchard.GetEndClasses()">
        <select asp-for="SubjectContentType" asp-items="Model.Campaigns" class="form-select">
            <option value="">@T["Select a subject content type"]</option>
        </select>
        <span asp-validation-for="SubjectContentType" class="text-danger"></span>
    </div>
</div>

<div class="@Orchard.GetWrapperClasses()">
    <label asp-for="ContactContentType" class="@Orchard.GetLabelClasses()">@T["Subject contact content type"]</label>
    <div class="@Orchard.GetEndClasses()">
        <select asp-for="ContactContentType" asp-items="Model.Campaigns" class="form-select">
            <option value="">@T["Select a contact content type"]</option>
        </select>
        <span asp-validation-for="ContactContentType" class="text-danger"></span>
    </div>
</div>

<div class="@Orchard.GetWrapperClasses()">
    <label asp-for="UserIds" class="@Orchard.GetLabelClasses()">@T["User(s) to assign activities to"]</label>
    <div class="@Orchard.GetEndClasses()">
        <select asp-for="UserIds" asp-items="Model.Campaigns" class="form-select" multiple></select>
        <span asp-validation-for="UserIds" class="text-danger"></span>
    </div>
</div>

<div class="@Orchard.GetWrapperClasses()">
    <div class="@Orchard.GetEndClasses(true)">
        <div class="form-check">
            <input type="checkbox" class="form-check-input" asp-for="IncludeDoNoCalls">
            <label class="form-check-label" asp-for="IncludeDoNoCalls">@T["Include do not call contacts"]</label>
            <span class="hint dashed">@T["When enabled, we'll include any contact that is flagged as do not call."]</span>
        </div>
        <div class="form-check">
            <input type="checkbox" class="form-check-input" asp-for="IncludeDoNoEmail">
            <label class="form-check-label" asp-for="IncludeDoNoEmail">@T["Include do not email contacts"]</label>
            <span class="hint dashed">@T["When enabled, we'll include any contact that is flagged as do not email."]</span>
        </div>
        <div class="form-check">
            <input type="checkbox" class="form-check-input" asp-for="IncludeDoNoSms">
            <label class="form-check-label" asp-for="IncludeDoNoSms">@T["Include do not SMS contacts"]</label>
            <span class="hint dashed">@T["When enabled, we'll include any contact that is flagged as do not SMS."]</span>
        </div>
    </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const interactionTypeSelect = document.getElementById("@Html.IdFor(x => x.InteractionType)");

        function toggleInteractionTypeFields() {
            const value = interactionTypeSelect.value;
            const automatedEls = document.querySelectorAll(".automated-interaction-type");
            const manualEls = document.querySelectorAll(".manual-interaction-type");

            if (value === "@nameof(ActivityInteractionType.Automated)") {
                automatedEls.forEach(el => el.classList.remove("d-none"));
                manualEls.forEach(el => el.classList.add("d-none"));
            } else if (value === "@nameof(ActivityInteractionType.Manual)") {
                automatedEls.forEach(el => el.classList.add("d-none"));
                manualEls.forEach(el => el.classList.remove("d-none"));
            } else {
                // Hide all by default if no selection
                automatedEls.forEach(el => el.classList.add("d-none"));
                manualEls.forEach(el => el.classList.add("d-none"));
            }
        }

        // Run once on load to set initial state
        toggleInteractionTypeFields();

        // Listen for changes
        interactionTypeSelect.addEventListener("change", toggleInteractionTypeFields);
    });
</script>
