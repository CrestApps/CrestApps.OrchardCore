/*
** NOTE: This file is generated by Gulp and should not be edited directly!
** Any changes made directly to this file will be overwritten next time its asset group is processed by Gulp.
*/

stripePaymentProcessing = function () {
  var initialize = function initialize(config) {
    document.addEventListener('DOMContentLoaded', function () {
      var errorElement = document.getElementById('card-errors');
      var showError = function showError(message) {
        errorElement.textContent = message;
        errorElement.classList.remove('d-none');
      };
      var clearError = function clearError() {
        errorElement.textContent = '';
        errorElement.classList.add('d-none');
      };
      var getFilteredStyleObject = function getFilteredStyleObject(element) {
        if (!element) {
          return {};
        }
        var computedStyle = window.getComputedStyle(element);
        var styleObject = {};
        var propertiesToInclude = ['margin', 'padding', 'color', 'font-family', 'font-size', 'line-height', 'border-width', 'border-style', 'border-color'];
        propertiesToInclude.forEach(function (property) {
          styleObject[property] = computedStyle.getPropertyValue(property);
        });
        return styleObject;
      };
      var applyStylesToStripeCard = function applyStylesToStripeCard(styles) {
        return {
          base: {
            color: styles.color || 'black',
            // default color if not specified
            fontSize: styles['font-size'] || '16px',
            // default font size if not specified
            fontFamily: styles['font-family'] || 'Arial, sans-serif',
            // default font family if not specified
            lineHeight: styles['line-height'] || '1.4',
            // default line height if not specified
            border: "".concat(styles['border-width'] || '1px', " ").concat(styles['border-style'] || 'solid', " ").concat(styles['border-color'] || 'black') // default border if not specified
          }
        };
      };
      var stripe = Stripe(config.publishableKey);
      var elements = stripe.elements();

      // Generate the filtered style object
      var filteredStyleObject = getFilteredStyleObject(config.nameOnBankCardElement);

      // Apply styles to Stripe card
      var cardStyles = applyStylesToStripeCard(filteredStyleObject);
      var cardElement = elements.create('card', {
        style: cardStyles
      });
      cardElement.mount('#card-element');
      cardElement.on('change', function (event) {
        clearError();
        config.enablePayButtonButton(true);
        if (event.error) {
          showError(event.error.message);
        }
      });
      config.payButtonElement.addEventListener('click', function (event) {
        if (config.payButtonElement.getAttribute('data-method-name') != 'Stripe') {
          return;
        }
        if (config.nameOnBankCardElement && !config.nameOnBankCardElement.value) {
          showError(config.invalidNameErrorMessage);
          return;
        }
        event.preventDefault();
        config.enablePayButtonButton(false);
        stripe.createPaymentMethod({
          type: 'card',
          card: cardElement,
          billing_details: {
            name: nameOnBankCardElement.value || ''
          }
        }).then(function (result) {
          if (result.error) {
            showError(result.error.message);
          } else {
            // Send payment method ID to the server
            fetch(config.stepIntentEndpoint, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                paymentMethodId: result.paymentMethod.id,
                sessionId: config.sessionId
              })
            }).then(function (response) {
              return response.json();
            }).then(function (data) {
              if (data.error) {
                showError(data.error);
              } else {
                stripe.confirmCardSetup(data.clientSecret).then(function (result) {
                  if (result.error) {
                    showError(result.error.message);
                  } else {
                    var paymentMethodId = result.setupIntent.payment_method;
                    if (data.processInitialPayment) {
                      // Process initial payment
                      fetch(config.paymentIntentEndpoint, {
                        method: 'POST',
                        headers: {
                          'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                          customerId: data.customerId,
                          paymentMethodId: paymentMethodId,
                          sessionId: config.sessionId
                        })
                      }).then(function (response) {
                        return response.json();
                      }).then(function (paymentData) {
                        if (paymentData.error) {
                          showError(paymentData.error);
                        } else {
                          stripe.confirmCardPayment(paymentData.clientSecret).then(function (result) {
                            if (result.error) {
                              showError(result.error.message);
                            } else {
                              // Handle successful payment and schedule the subscription
                              createSubscription(data.customerId, paymentMethodId);
                            }
                          });
                        }
                      });
                    } else {
                      // Skip initial payment and schedule the subscription
                      createSubscription(data.customerId, paymentMethodId);
                    }
                  }
                });
              }
            });
          }
        });
      });
      var createSubscription = function createSubscription(customerId, paymentMethodId) {
        fetch(config.subscriptionEndpoint, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            customerId: customerId,
            paymentMethodId: paymentMethodId,
            sessionId: config.sessionId
          })
        }).then(function (response) {
          return response.json();
        }).then(function (subscriptionData) {
          if (subscriptionData.error) {
            showError(subscriptionData.error);
          } else {
            var form = document.getElementById('subscription-form');
            if (subscriptionData.status == 'requires_action') {
              stripe.confirmCardPayment(subscriptionData.clientSecret).then(function (result) {
                if (result.error) {
                  showError(result.error.message);
                } else {
                  var submitEvent = new Event("submit", {
                    bubbles: true,
                    cancelable: true
                  });
                  form.dispatchEvent(submitEvent);
                }
              });
            } else {
              var submitEvent = new Event("submit", {
                bubbles: true,
                cancelable: true
              });
              form.dispatchEvent(submitEvent);
            }
          }
        });
      };
    });
  };
  return {
    initialize: initialize
  };
}();