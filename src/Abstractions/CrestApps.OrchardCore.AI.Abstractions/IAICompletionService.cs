using CrestApps.OrchardCore.AI.Models;
using Microsoft.Extensions.AI;

namespace CrestApps.OrchardCore.AI;

public interface IAICompletionService
{
    /// <summary>
    /// Sends a series of messages to the AI chat service and returns the completion response.
    /// This method allows communication with the AI chat API by providing input messages and context.
    /// </summary>
    /// <param name="clientName">The technical name of the client implementation to use.</param>
    /// <param name="messages">A collection of messages that are part of the chat conversation.</param>
    /// <param name="context">The context that may provide additional parameters or configurations for the chat request.</param>
    /// <returns>A task representing the asynchronous operation, with the completion response as the result.</returns>
    Task<ChatCompletion> CompleteAsync(string clientName, IEnumerable<ChatMessage> messages, AICompletionContext context, CancellationToken cancellationToken = default);

    /// <summary>
    /// Streams chat completion updates from the AI service in real time.
    /// This method allows for handling partial responses as they are generated by the AI model.
    /// </summary>
    /// <param name="clientName">The technical name of the client implementation to use.</param>
    /// <param name="messages">A list of chat messages that define the conversation history.</param>
    /// <param name="context">Additional context or parameters for configuring the AI request.</param>
    /// <param name="cancellationToken">A token to cancel the streaming operation if needed.</param>
    /// <returns>An asynchronous stream of chat completion updates, allowing real-time processing of AI responses.</returns>
    IAsyncEnumerable<StreamingChatCompletionUpdate> CompleteStreamingAsync(string clientName, IEnumerable<ChatMessage> messages, AICompletionContext context, CancellationToken cancellationToken = default);
}
