name: Release - CI
on:
  push:
    paths-ignore:
      - '**/*.md'
      - 'mkdocs.yml'
      - 'src/docs/**/*'
    tags: 
      - 'v*.*.*'

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
jobs:
  test:
    runs-on: ${{ matrix.os }}
    name: Build, Test, Deploy
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
    - name: Get the version
      id: get_version
      run: |
        arrTag=(${GITHUB_REF//\// })
        VERSION="${arrTag[2]}"
        VERSION="${VERSION//v}"
        echo VERSION:${VERSION}
        echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
      shell: bash
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with:
        node-version: "15"
    - uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          8.0.x
          9.0.x
    - name: Set build number 
      if: matrix.os == 'ubuntu-latest'
      run: echo "BuildNumber=$(( $GITHUB_RUN_NUMBER ))" >> $GITHUB_ENV
    - name: Build
      # NuGetAudit is intentionally not disabled here like it is for other CI builds, because we need to address any
      # vulnerable packages before releasing a new version.
      run: |
        dotnet build -c Release -warnaserror /p:TreatWarningsAsErrors=true /p:RunAnalyzers=true -p:Version=${{ steps.get_version.outputs.VERSION }}
    - name: Unit Tests
      run: |
        dotnet test -c Release --no-build ./tests/CrestApps.OrchardCore.Tests/CrestApps.OrchardCore.Tests.csproj 
    - name: Deploy release NuGet packages
      if: matrix.os == 'ubuntu-latest'
      run: |
        dotnet pack -c Release --no-build -p:Version=${{ steps.get_version.outputs.VERSION }} -p:TreatWarningsAsErrors=false
        dotnet nuget push './src/**/*.nupkg' -t 600 -k ${{secrets.NUGET_API_KEY}} -s https://api.nuget.org/v3/index.json --skip-duplicate
